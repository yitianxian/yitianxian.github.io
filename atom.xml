<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录</title>
  
  <subtitle>千里之行，始于足下</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-07-30T03:49:49.950Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Z-Q-K</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue3使用svg</title>
    <link href="http://yoursite.com/2021/07/30/vue3%E4%BD%BF%E7%94%A8svg/"/>
    <id>http://yoursite.com/2021/07/30/vue3%E4%BD%BF%E7%94%A8svg/</id>
    <published>2021-07-30T03:47:23.000Z</published>
    <updated>2021-07-30T03:49:49.950Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建放svg图标的文件夹"><a href="#创建放svg图标的文件夹" class="headerlink" title="创建放svg图标的文件夹"></a>创建放svg图标的文件夹</h3><p>src/assets/icons/svg</p><h3 id="vite-config-ts-中导入"><a href="#vite-config-ts-中导入" class="headerlink" title="vite.config.ts 中导入"></a>vite.config.ts 中导入</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">plugins: [vue(),</div><div class="line">    <span class="comment">//这里已经将src/icons/svg/下的svg全部导入，无需再单独导入</span></div><div class="line">    [svgBuilder(<span class="string">'./src/assets/icons/svg/'</span>)]],</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;创建放svg图标的文件夹&quot;&gt;&lt;a href=&quot;#创建放svg图标的文件夹&quot; class=&quot;headerlink&quot; title=&quot;创建放svg图标的文件夹&quot;&gt;&lt;/a&gt;创建放svg图标的文件夹&lt;/h3&gt;&lt;p&gt;src/assets/icons/svg&lt;/p&gt;
&lt;h3 i</summary>
      
    
    
    
    
    <category term="vue+vite" scheme="http://yoursite.com/tags/vue-vite/"/>
    
  </entry>
  
  <entry>
    <title>vue3CompositionApi解析</title>
    <link href="http://yoursite.com/2021/07/13/vue3CompositionApi%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2021/07/13/vue3CompositionApi%E8%A7%A3%E6%9E%90/</id>
    <published>2021-07-13T09:55:18.000Z</published>
    <updated>2021-07-13T10:20:30.095Z</updated>
    
    <content type="html"><![CDATA[<h3 id="import-from-‘vue’"><a href="#import-from-‘vue’" class="headerlink" title="import { } from ‘vue’"></a>import { } from ‘vue’</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ref:</div><div class="line"><span class="number">1.</span> 创建一个响应式数据，当数据发生改变时，Vue会自动更新UI</div><div class="line">仅能监听基本类型的变化，不能监听复杂类型的变化（比如对象、数组）</div><div class="line">    <span class="number">2.</span> 通过ref属性获取元素</div><div class="line">    vue3需要借助生命周期方法，在setup执行时，template中的元素还没挂载到页面上，所以必须在mounted之后才能获取到元素。</div><div class="line"></div><div class="line"></div><div class="line">PropType:</div><div class="line">   接受一个泛型，可以将一个array的构造函数返回传入的泛型类型</div><div class="line">   可以把一个构造函数断言成一个类型</div></pre></td></tr></table></figure><h3 id="import-from-‘vue-router’"><a href="#import-from-‘vue-router’" class="headerlink" title="import {} from ‘vue-router’"></a>import {} from ‘vue-router’</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RouteRecordRaw</div><div class="line">路由配置格式</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;import-from-‘vue’&quot;&gt;&lt;a href=&quot;#import-from-‘vue’&quot; class=&quot;headerlink&quot; title=&quot;import { } from ‘vue’&quot;&gt;&lt;/a&gt;import { } from ‘vue’&lt;/h3&gt;&lt;figu</summary>
      
    
    
    
    
    <category term="vue3" scheme="http://yoursite.com/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>vite搭建vue3.0项目</title>
    <link href="http://yoursite.com/2021/07/12/vite%E6%90%AD%E5%BB%BAvue3-0%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2021/07/12/vite%E6%90%AD%E5%BB%BAvue3-0%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-07-12T08:35:58.000Z</published>
    <updated>2021-08-02T11:40:32.481Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//npm init vite-app &lt;project-name&gt;  或 npm init @vitejs/app</span></div><div class="line"></div><div class="line">npm init @vitejs/app my-vue-app --template vue-ts</div><div class="line"></div><div class="line">npm install</div><div class="line"></div><div class="line">npm run dev</div><div class="line"></div><div class="line"><span class="comment">//初始化后的项目会生成一个vite.config.ts文件</span></div><div class="line">npm add @types/node -D</div><div class="line"></div><div class="line">npm add</div><div class="line"> @typescript-eslint/eslint-plugin</div><div class="line">    @typescript-eslint/parser</div><div class="line">    @vue/eslint-config-prettier</div><div class="line">    @vue/eslint-config-typescript</div><div class="line">    babel-eslint</div><div class="line">    eslint</div><div class="line">    eslint-plugin-prettier</div><div class="line">    eslint-plugin-vue</div><div class="line">    prettier</div><div class="line">    babel-polyfill</div><div class="line">-D</div><div class="line"></div><div class="line">npm install sass --save</div><div class="line">npm install node-sass --save</div><div class="line">npm install sass-loader --save</div><div class="line">npm add @vitejs/plugin-vue-jsx --save</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//安装elementplus</span></div><div class="line">npm install element-plus --save</div><div class="line"><span class="comment">//安装 vuex</span></div><div class="line">npm install vuex@next --save</div><div class="line"><span class="comment">//安装vue-router</span></div><div class="line">npm install vue-router@next</div><div class="line"><span class="comment">//安装axios</span></div><div class="line">npm install axios --save</div><div class="line"></div><div class="line"><span class="comment">//使用</span></div><div class="line"><span class="keyword">import</span> &#123; createApp, Vue &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line"><span class="keyword">import</span> ElementPlus <span class="keyword">from</span> <span class="string">'element-plus'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'element-plus/lib/theme-chalk/index.css'</span>;</div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> app = createApp(App)</div><div class="line">app.use(ElementPlus)</div><div class="line">app.mount(<span class="string">'#app'</span>)</div></pre></td></tr></table></figure><h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//安装vue-router</span></div><div class="line">npm install vue-router@next</div><div class="line"><span class="comment">//安装 nprogress 进度条</span></div><div class="line">npm i --save-dev @types/nprogress</div></pre></td></tr></table></figure><h4 id="index-ts"><a href="#index-ts" class="headerlink" title="index.ts"></a>index.ts</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div </summary>
      
    
    
    
    
    <category term="vue3" scheme="http://yoursite.com/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>nginx常用命令</title>
    <link href="http://yoursite.com/2021/07/09/nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2021/07/09/nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-07-09T01:58:30.000Z</published>
    <updated>2021-07-09T02:01:12.073Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、杀死-nginx-进程"><a href="#1、杀死-nginx-进程" class="headerlink" title="1、杀死 nginx 进程"></a>1、杀死 nginx 进程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">taskkill /fi &quot;imagename eq nginx.EXE&quot; /f</div></pre></td></tr></table></figure><h4 id="2、启动"><a href="#2、启动" class="headerlink" title="2、启动"></a>2、启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">start nginx.exe</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、杀死-nginx-进程&quot;&gt;&lt;a href=&quot;#1、杀死-nginx-进程&quot; class=&quot;headerlink&quot; title=&quot;1、杀死 nginx 进程&quot;&gt;&lt;/a&gt;1、杀死 nginx 进程&lt;/h4&gt;&lt;figure class=&quot;highlight plai</summary>
      
    
    
    
    
    <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>vue路由模式</title>
    <link href="http://yoursite.com/2021/07/07/vue%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2021/07/07/vue%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-07-07T00:57:13.000Z</published>
    <updated>2021-07-07T10:42:06.455Z</updated>
    
    <content type="html"><![CDATA[<h3 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h3><p>前端路由的核心，就在于 —— <strong>改变视图的同时不会向后端发出请求</strong></p><ol><li><p>hash</p><p>带 # 号</p><p>hash 虽然出现在 URL 中，但不会被包括在 HTTP 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">hash原理其实是浏览器监听了一个onhashchange的方法来改变页面的跳转的</div><div class="line">window.onhashchange = function(event)&#123;</div><div class="line">    console.log(event.oldURL, event.newURL);</div><div class="line">    let hash = location.hash.slice(1);</div><div class="line">    document.body.style.color = hash;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 缺点：只能改变#后面的来实现路由跳转</p></li><li><p>history</p><p>① 利用了 HTML5 History Interface 中新增的 pushState() 和 replaceState() 方法。（需要特定浏览器支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">调用 history.pushState() 相比于直接修改 hash，存在以下优势：</div><div class="line"></div><div class="line">pushState() 设置的新 URL 可以是与当前 URL 同源的任意 URL；而 hash 只可修改 #后面的部分，因此只能设置与当前 URL 同文档的 URL；</div><div class="line">pushState() 设置的新 URL 可以与当前 URL 一模一样，这样也会把记录添加到栈中；而 hash设置的新值必须与原来不一样才会触发动作将记录添加到栈中；</div><div class="line">pushState() 通过 stateObject 参数可以添加任意类型的数据到记录中；而 hash 只可添加短字符串；</div><div class="line">pushState() 可额外设置 title 属性供后续使用。</div></pre></td></tr></table></figure></li></ol><p>   ② 这种模式充分利用 history.pushState API 来完成URL 跳转而无须重新加载页面</p><p>   ③ 这两个方法应用于浏览器的<strong>历史记录栈</strong>，在当前已有的 <code>back</code>、<code>forward</code>、<code>go</code> 的基础之上，它们提供了对历史记录进行修改的功能。只是当它们执行修改时，虽然改变了当前的 URL，但浏览器不会立即向后端发送请求</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;路由模式&quot;&gt;&lt;a href=&quot;#路由模式&quot; class=&quot;headerlink&quot; title=&quot;路由模式&quot;&gt;&lt;/a&gt;路由模式&lt;/h3&gt;&lt;p&gt;前端路由的核心，就在于 —— &lt;strong&gt;改变视图的同时不会向后端发出请求&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;</summary>
      
    
    
    
    
    <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>jtest</title>
    <link href="http://yoursite.com/2021/05/27/Jest/"/>
    <id>http://yoursite.com/2021/05/27/Jest/</id>
    <published>2021-05-27T12:25:37.000Z</published>
    <updated>2021-05-27T13:08:41.177Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jest-是react自动集成的"><a href="#jest-是react自动集成的" class="headerlink" title="jest 是react自动集成的"></a>jest 是react自动集成的</h3><p>jest 会自动检测 ：</p><p>1.<code>_tests_</code>文件夹下的js(ts)文件</p><p>2.以 .test.js 结尾的文件</p><p>3.以 .spec.js 结尾的文件</p><p>ps:eslint 检测</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">env:</span></div><div class="line"><span class="attr">  "jest":</span> <span class="literal">true</span></div></pre></td></tr></table></figure><h3 id="使用react-中的-testing-library库-内置jest测试模板"><a href="#使用react-中的-testing-library库-内置jest测试模板" class="headerlink" title="使用react 中的 testing-library库(内置jest测试模板)"></a>使用react 中的 testing-library库(内置jest测试模板)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import React  from &quot;react&quot;;</div><div class="line">import &#123;render&#125; from &quot;@testing-library/react&quot;;</div><div class="line">import Button from &quot;./Button&quot;;</div><div class="line"></div><div class="line">test(&apos;first react test&apos;, () =&gt; &#123;</div><div class="line">    const wrapper = render(&lt;Button&gt;Goooooooood&lt;/Button&gt;)</div><div class="line">    const element = wrapper.queryByText(&apos;Goooooooood&apos;)</div><div class="line">    expect(element).toBeTruthy()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;jest-是react自动集成的&quot;&gt;&lt;a href=&quot;#jest-是react自动集成的&quot; class=&quot;headerlink&quot; title=&quot;jest 是react自动集成的&quot;&gt;&lt;/a&gt;jest 是react自动集成的&lt;/h3&gt;&lt;p&gt;jest 会自动检测 ：&lt;/</summary>
      
    
    
    
    
    <category term="Jest" scheme="http://yoursite.com/tags/Jest/"/>
    
  </entry>
  
  <entry>
    <title>react_ClassNames</title>
    <link href="http://yoursite.com/2021/05/27/react/react-ClassNames/"/>
    <id>http://yoursite.com/2021/05/27/react/react-ClassNames/</id>
    <published>2021-05-27T11:43:06.000Z</published>
    <updated>2021-05-27T11:57:55.490Z</updated>
    
    <content type="html"><![CDATA[<h3 id="classNames-插件"><a href="#classNames-插件" class="headerlink" title="classNames 插件"></a>classNames 插件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install classnames --save</div><div class="line"></div><div class="line"><span class="keyword">import</span> classnames <span class="keyword">from</span> <span class="string">'classnames'</span></div></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//可接受多个参数</span></div><div class="line"></div><div class="line">classNames(<span class="string">'foo'</span>, <span class="string">'bar'</span>); <span class="comment">// =&gt; 'foo bar'</span></div><div class="line">classNames(<span class="string">'foo'</span>, &#123; <span class="attr">bar</span>: <span class="literal">true</span> &#125;); <span class="comment">// =&gt; 'foo bar'</span></div><div class="line">classNames(&#123; <span class="string">'foo-bar'</span>: <span class="literal">true</span> &#125;); <span class="comment">// =&gt; 'foo-bar'</span></div><div class="line">classNames(&#123; <span class="string">'foo-bar'</span>: <span class="literal">false</span> &#125;); <span class="comment">// =&gt; ''</span></div><div class="line">classNames(&#123; <span class="attr">foo</span>: <span class="literal">true</span> &#125;, &#123; <span class="attr">bar</span>: <span class="literal">true</span> &#125;); <span class="comment">// =&gt; 'foo bar'</span></div><div class="line">classNames(&#123; <span class="attr">foo</span>: <span class="literal">true</span>, <span class="attr">bar</span>: <span class="literal">true</span> &#125;); <span class="comment">// =&gt; 'foo bar'</span></div><div class="line"></div><div class="line"><span class="comment">// lots of arguments of various types</span></div><div class="line">classNames(<span class="string">'foo'</span>, &#123; <span class="attr">bar</span>: <span class="literal">true</span>, <span class="attr">duck</span>: <span class="literal">false</span> &#125;, <span class="string">'baz'</span>, &#123; <span class="attr">quux</span>: <span class="literal">true</span> &#125;); <span class="comment">// =&gt; 'foo bar baz quux'</span></div><div class="line"></div><div class="line"><span class="comment">// other falsy values are just ignored</span></div><div class="line">classNames(<span class="literal">null</span>, <span class="literal">false</span>, <span class="string">'bar'</span>, <span class="literal">undefined</span>, <span class="number">0</span>, <span class="number">1</span>, &#123; <span class="attr">baz</span>: <span class="literal">null</span> &#125;, <span class="string">''</span>); <span class="comment">// =&gt; 'bar 1'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="string">'b'</span>, &#123; <span class="attr">c</span>: <span class="literal">true</span>, <span class="attr">d</span>: <span class="literal">false</span> &#125;];</div><div class="line">classNames(<span class="string">'a'</span>, arr); <span class="comment">// =&gt; 'a b c'</span></div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;classNames-插件&quot;&gt;&lt;a href=&quot;#classNames-插件&quot; class=&quot;headerlink&quot; title=&quot;classNames 插件&quot;&gt;&lt;/a&gt;classNames 插件&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;</summary>
      
    
    
    
    
    <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>es6字符串</title>
    <link href="http://yoursite.com/2021/05/27/es6%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2021/05/27/es6%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2021-05-27T09:27:31.000Z</published>
    <updated>2021-05-27T11:10:13.062Z</updated>
    
    <content type="html"><![CDATA[<h3 id="新增的字符串方法"><a href="#新增的字符串方法" class="headerlink" title="新增的字符串方法"></a>新增的字符串方法</h3><p>1、charAt</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index必需。表示字符串中某个位置的数字，即字符在字符串中的下标。</span></div><div class="line"><span class="comment">//字符串中第一个字符的下标是 0。如果参数 index 不在 0 与 string.length 之间，该方法将返回一个空字符串。</span></div><div class="line">stringObject.charAt(index)</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;新增的字符串方法&quot;&gt;&lt;a href=&quot;#新增的字符串方法&quot; class=&quot;headerlink&quot; title=&quot;新增的字符串方法&quot;&gt;&lt;/a&gt;新增的字符串方法&lt;/h3&gt;&lt;p&gt;1、charAt&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;tab</summary>
      
    
    
    
    
    <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>git操作</title>
    <link href="http://yoursite.com/2021/05/25/git%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2021/05/25/git%E6%93%8D%E4%BD%9C/</id>
    <published>2021-05-25T09:29:02.000Z</published>
    <updated>2021-05-25T09:33:46.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure><h3 id="添加到本地仓库"><a href="#添加到本地仓库" class="headerlink" title="添加到本地仓库"></a>添加到本地仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure><h2 id="添加说明"><a href="#添加说明" class="headerlink" title="添加说明"></a>添加说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m &quot;first commit&quot;</div></pre></td></tr></table></figure><h2 id="连接到guthub仓库"><a href="#连接到guthub仓库" class="headerlink" title="连接到guthub仓库"></a>连接到guthub仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin https://github.com/*******/********.git</div></pre></td></tr></table></figure><h2 id="将本地库的内容推送到远程"><a href="#将本地库的内容推送到远程" class="headerlink" title="将本地库的内容推送到远程"></a>将本地库的内容推送到远程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push -u origin master</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;d</summary>
      
    
    
    
    
    <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>html</title>
    <link href="http://yoursite.com/2021/05/25/html/html%E8%B8%A9%E5%9D%91/"/>
    <id>http://yoursite.com/2021/05/25/html/html%E8%B8%A9%E5%9D%91/</id>
    <published>2021-05-25T08:31:47.000Z</published>
    <updated>2021-05-25T09:07:23.722Z</updated>
    
    <content type="html"><![CDATA[<h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>公司需求做一个纯 html 加 jq 页面，由于是中期接手不知道需要兼容到 ie10，所以出现许多兼容性问题</p><p>1、不加前缀的 grid 布局不兼容 ie，加了也可能会有各种问题。。直接放弃</p><p>2、flex 从 ie10开始兼容，且无需前缀（实测）</p><p>3、不支持 css 的 unset 属性，需要手动覆盖继承的属性</p><p>​    背景色可用：transparent  </p><p>​        ps: transparent属性用来指定全透明色彩;在CSS3中，transparent被延伸到任何一个有color值的            属性上。</p><p>4.<strong><em>不支持es6的写法</em></strong>，坑了个大爹！</p><p>解决方案：</p><p>1、将js单独使用 babel 转一下，我这是纯html写法，并不推荐，因为后面别人接收或者自己改，都回非常的麻烦，且容易出错。</p><p>我有一个公共js是单独创建一个babel工程，转出来的，但还是不推荐</p><p>2、看这篇 <a href="https://www.jianshu.com/p/13444c467ce2" target="_blank" rel="external">https://www.jianshu.com/p/13444c467ce2</a></p><p>可能是我下载的 browser.js 有问题，在ie11上可以用，ie10上不可以，会报错，而且是压缩后的代码，看都不想看，只能放弃</p><p>3、老老实实重写！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;兼容性&quot;&gt;&lt;a href=&quot;#兼容性&quot; class=&quot;headerlink&quot; title=&quot;兼容性&quot;&gt;&lt;/a&gt;兼容性&lt;/h3&gt;&lt;p&gt;公司需求做一个纯 html 加 jq 页面，由于是中期接手不知道需要兼容到 ie10，所以出现许多兼容性问题&lt;/p&gt;
&lt;p&gt;1、不加</summary>
      
    
    
    
    
    <category term="html jq" scheme="http://yoursite.com/tags/html-jq/"/>
    
  </entry>
  
  <entry>
    <title>react-ts-ui</title>
    <link href="http://yoursite.com/2021/05/23/react/react-ts-ui/"/>
    <id>http://yoursite.com/2021/05/23/react/react-ts-ui/</id>
    <published>2021-05-23T07:10:23.000Z</published>
    <updated>2021-05-23T07:46:20.767Z</updated>
    
    <content type="html"><![CDATA[<h3 id="新项目创建"><a href="#新项目创建" class="headerlink" title="新项目创建"></a>新项目创建</h3><p>1、npm i -g create-react-app</p><p>2、创建初始携带ts的react项目：npx create-react-app my-app –template typescript</p><p>实测：npx create-react-app my-app –typescript 初始文件非ts</p><p>踩坑：</p><p>使用ts会对项目进行语法检查</p><p>如果使用类方式定义组件，需要先定义props的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import React, &#123;Component&#125; from &apos;react&apos;;</div><div class="line"></div><div class="line">type Props = &#123;</div><div class="line">    message: string</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line">class Hello extends Component&lt;Props&gt; &#123;</div><div class="line">    render() &#123;</div><div class="line">        const &#123;message&#125; = this.props</div><div class="line">        return (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;h2&gt;&#123;message&#125;&lt;/h2&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default Hello;</div></pre></td></tr></table></figure><p>ps:type 是ts的一种类型</p><p><a href="https://www.cnblogs.com/EnSnail/p/11233592.html" target="_blank" rel="external">https://www.cnblogs.com/EnSnail/p/11233592.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;新项目创建&quot;&gt;&lt;a href=&quot;#新项目创建&quot; class=&quot;headerlink&quot; title=&quot;新项目创建&quot;&gt;&lt;/a&gt;新项目创建&lt;/h3&gt;&lt;p&gt;1、npm i -g create-react-app&lt;/p&gt;
&lt;p&gt;2、创建初始携带ts的react项目：npx </summary>
      
    
    
    
    
    <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react拓展</title>
    <link href="http://yoursite.com/2021/05/19/react%E6%8B%93%E5%B1%95/"/>
    <id>http://yoursite.com/2021/05/19/react%E6%8B%93%E5%B1%95/</id>
    <published>2021-05-19T12:19:38.000Z</published>
    <updated>2021-05-19T12:20:04.514Z</updated>
    
    
    
    
    
    <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>redux</title>
    <link href="http://yoursite.com/2021/05/10/react/redux/"/>
    <id>http://yoursite.com/2021/05/10/react/redux/</id>
    <published>2021-05-10T10:48:01.000Z</published>
    <updated>2021-05-19T12:02:27.073Z</updated>
    
    <content type="html"><![CDATA[<h3 id="状态管理工具"><a href="#状态管理工具" class="headerlink" title="状态管理工具"></a>状态管理工具</h3><p>redux在 react， angular， vue中都可以使用，常用于react</p><p><strong>store会更改状态，但是不会更新页面！！！！！</strong></p><h4 id="store-js-使用store管理所有reduce对象"><a href="#store-js-使用store管理所有reduce对象" class="headerlink" title="store.js: 使用store管理所有reduce对象"></a><img src="F:\zzz\react\react全家桶资料\02_原理图\redux原理图.png" alt="redux原理图">store.js: 使用store管理所有reduce对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">*  该文件专门用于暴露store对象，整个项目有且只有一个</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">//引入createStore</span></div><div class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"><span class="comment">//引入指定reducer</span></div><div class="line"><span class="keyword">import</span> countReduce <span class="keyword">from</span> <span class="string">'./count_reducer'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(countReduce)</div></pre></td></tr></table></figure><h4 id="reduce-js-调用action更改数据"><a href="#reduce-js-调用action更改数据" class="headerlink" title="reduce.js:  调用action更改数据"></a>reduce.js:  调用action更改数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">    1.一个专门为count服务的reduce, reduce本质是个函数</div><div class="line">    2.接收两个参数</div><div class="line">        preState: 之前的窗台</div><div class="line">        action: 动作对象</div><div class="line">    3.reduce 只做基本操作,不进行细节性的复杂操作</div><div class="line">*/</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">countReduce</span>(<span class="params">preState, action</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(preState, action);</div><div class="line">    <span class="comment">//从action中获取type,data</span></div><div class="line">    <span class="keyword">const</span> &#123;type, data&#125; = action</div><div class="line">    <span class="keyword">switch</span> (type) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'increment'</span>:</div><div class="line">            <span class="keyword">return</span> preState + data</div><div class="line">        <span class="keyword">case</span> <span class="string">'decrement'</span>:</div><div class="line">            <span class="keyword">return</span> preState - data</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> preState || <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用constant</span></div><div class="line"><span class="keyword">import</span> &#123;INCREMENT, DECREMENT&#125; <span class="keyword">from</span> <span class="string">'./constant.js'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">countReduce</span>(<span class="params">preState, action</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(preState, action);</div><div class="line">    <span class="comment">//从action中获取type,data</span></div><div class="line">    <span class="keyword">const</span> &#123;type, data&#125; = action</div><div class="line">    <span class="keyword">switch</span> (type) &#123;</div><div class="line">        <span class="keyword">case</span> INCREMENT:</div><div class="line">            <span class="keyword">return</span> preState + data</div><div class="line">        <span class="keyword">case</span> DECREMENT:</div><div class="line">            <span class="keyword">return</span> preState - data</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> preState || <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="action-js-对数据进行的-操作"><a href="#action-js-对数据进行的-操作" class="headerlink" title="action.js  对数据进行的 操作"></a>action.js  对数据进行的 操作</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 专门为Count生成action对象</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">//简写, 返回对象的写法</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> createIncrementAction = <span class="function"><span class="params">data</span>  =&gt;</span> (&#123;<span class="attr">type</span>:<span class="string">'increment'</span>, data&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> createDecrementAction = <span class="function"><span class="params">data</span>  =&gt;</span> (&#123;<span class="attr">type</span>:<span class="string">'decrement'</span>, data&#125;)</div><div class="line"></div><div class="line"><span class="comment">//原生写法</span></div><div class="line"><span class="comment">// function createDecrementAction(data) &#123;</span></div><div class="line"><span class="comment">//     return &#123;type:'decrement', data&#125;</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 专门为Count生成action对象,使用constant</div><div class="line"> */</div><div class="line"><span class="keyword">import</span> &#123;INCREMENT, DECREMENT&#125; <span class="keyword">from</span> <span class="string">'./constant.js'</span></div><div class="line"><span class="comment">//简写, 返回对象的写法</span></div><div class="line"><span class="comment">//同步action，返回一个对象</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> createIncrementAction = <span class="function"><span class="params">data</span>  =&gt;</span> (&#123;<span class="attr">type</span>:INCREMENT, data&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> createDecrementAction = <span class="function"><span class="params">data</span>  =&gt;</span> (&#123;<span class="attr">type</span>:DECREMENT, data&#125;)</div><div class="line"></div><div class="line"><span class="comment">//原生写法</span></div><div class="line"><span class="comment">// function createDecrementAction(data) &#123;</span></div><div class="line"><span class="comment">//     return &#123;type:'decrement', data&#125;</span></div><div class="line"><span class="comment">// &#125;</span></div></pre></td></tr></table></figure><h4 id="constant-js-定义action中对象的type类型的常量"><a href="#constant-js-定义action中对象的type类型的常量" class="headerlink" title="constant.js : 定义action中对象的type类型的常量"></a>constant.js : 定义action中对象的type类型的常量</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义action中对象的type类型的常量</div><div class="line"> */</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT = <span class="string">'increment'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> DECREMENT = <span class="string">'decrement'</span></div></pre></td></tr></table></figure><h4 id="使用（dispatch）"><a href="#使用（dispatch）" class="headerlink" title="使用（dispatch）"></a>使用（dispatch）</h4><p>使用dispatch触发reduce中的action</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//引入store 获取reduce中的状态</span></div><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../../redux/store'</span></div><div class="line"><span class="comment">//引入专门创建的action对象</span></div><div class="line"><span class="keyword">import</span> &#123;createIncrementAction, createDecrementAction&#125; <span class="keyword">from</span> <span class="string">'../../redux/count_action'</span></div><div class="line"></div><div class="line">incrementOdd = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> &#123;value&#125; = <span class="keyword">this</span>.selectNumber</div><div class="line">    <span class="keyword">const</span> count = store.getState()</div><div class="line">    <span class="keyword">if</span>(count % <span class="number">2</span> !== <span class="number">0</span>) &#123;</div><div class="line">        store.dispatch(createIncrementAction(value * <span class="number">1</span>))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>store会更改状态，但是不会更新页面！！！！！</p><p>所以，需要组件自生重新渲染</p><p>方法1： 单个文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">componentDidMount() &#123;</div><div class="line">    <span class="comment">//检测redux中的状态，只要变化，就带哦用render</span></div><div class="line">    store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="comment">// this.render() 不可以</span></div><div class="line">        <span class="keyword">this</span>.setState(&#123;&#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>方法2：index.js 中调用，一劳永逸</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</div><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./redux/store'</span></div><div class="line">ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>,</span></div><div class="line">    document.getElementById('root')</div><div class="line">);</div><div class="line"></div><div class="line">store.subscribe(() =&gt; &#123;</div><div class="line">    ReactDOM.render(</div><div class="line">        <span class="tag">&lt;<span class="name">App</span> /&gt;</span>,</div><div class="line">        document.getElementById('root')</div><div class="line">    );</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="api"><a href="#api" class="headerlink" title="api"></a>api</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取state</span></div><div class="line">store.getState()</div></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h3 id="action操作"><a href="#action操作" class="headerlink" title="action操作"></a>action操作</h3><p>同步action： Object{}</p><p>异步action:  function, </p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用异步action 需要安装中间转换器 redux-thunk (npm add redux-thunk)</span></div><div class="line"><span class="comment">//在store.js中引入</span></div><div class="line"><span class="keyword">import</span> &#123;createStore, applyMiddleware&#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(countReduce, applyMiddleware(thunk))</div></pre></td></tr></table></figure><p>在action.js中使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//异步action, action的值为函数</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> createIncrementAsyncAction = <span class="function">(<span class="params">data,time</span>)  =&gt;</span> &#123;</div><div class="line">    <span class="comment">//会返回一个 dispatch store对象</span></div><div class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="comment">//分发一个同步action真正返回一个值</span></div><div class="line">            dispatch(createIncrementAction(data))</div><div class="line">        &#125;,time)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h2><p><img src="F:\zzz\react\react全家桶资料\02_原理图\react-redux模型图.png" alt="react-redux模型图"></p><p>注意:容器和ui要分开</p><p>components: ui组件文件夹</p><p>container:  容器组件文件夹</p><p>使用:  cotainers 中的Count中的index.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//引入Count ui组件</span></div><div class="line"><span class="keyword">import</span> CountUi <span class="keyword">from</span> <span class="string">'../../components/Count'</span></div><div class="line"><span class="comment">//引入 store</span></div><div class="line"><span class="comment">//引入connent</span></div><div class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"><span class="keyword">import</span> &#123; createDecrementAction, createIncrementAction, createIncrementAsyncAction &#125; <span class="keyword">from</span> <span class="string">'../../redux/count_action'</span>;</div><div class="line"><span class="comment">//容器组件与ui产生联系,并暴露出去  一个Count 的容器组件</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//a的返回值作为状态传递给ui,返回一个对象</span></div><div class="line"><span class="comment">//a 函数返回对象中的key作为ui组件中props的key</span></div><div class="line"><span class="comment">//react-redux 自动调此方法,并且将返回状态传过来</span></div><div class="line"><span class="comment">// const mapStateToProps = (state) =&gt; &#123;</span></div><div class="line"><span class="comment">//     console.log('state:  ' + state);</span></div><div class="line"><span class="comment">//     return &#123;count: state&#125;</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="comment">// const mapStateToProps = state =&gt; (&#123;count: state&#125;)</span></div><div class="line"><span class="comment">//a的返回值作为状态传递给ui,返回一个对象</span></div><div class="line"><span class="comment">//a 函数返回对象中的key作为ui组件中props的key,value为操作状态的方法</span></div><div class="line"><span class="comment">//react-redux 自动调此方法,并且将dispatch传过来</span></div><div class="line"><span class="comment">// const mapDispatchToProps = dispatch =&gt; (</span></div><div class="line"><span class="comment">//     &#123;</span></div><div class="line"><span class="comment">//         jia: data =&gt; dispatch(createIncrementAction(data)),</span></div><div class="line"><span class="comment">//         jian: data =&gt; dispatch(createDecrementAction(data)),</span></div><div class="line"><span class="comment">//         yibujia: (data,time) =&gt; dispatch(createIncrementAsyncAction(data, time)),</span></div><div class="line"><span class="comment">//     &#125;</span></div><div class="line"><span class="comment">// )</span></div><div class="line"></div><div class="line"><span class="comment">// export default connect(mapStateToProps, mapDispatchToProps)(CountUi)</span></div><div class="line"></div><div class="line"><span class="comment">//究极简写</span></div><div class="line"><span class="comment">// export default connect(state =&gt; (&#123;count: state&#125;), dispatch =&gt; (</span></div><div class="line"><span class="comment">//     &#123;</span></div><div class="line"><span class="comment">//         jia: data =&gt; dispatch(createIncrementAction(data)),</span></div><div class="line"><span class="comment">//         jian: data =&gt; dispatch(createDecrementAction(data)),</span></div><div class="line"><span class="comment">//         yibujia: (data,time) =&gt; dispatch(createIncrementAsyncAction(data, time)),</span></div><div class="line"><span class="comment">//     &#125;</span></div><div class="line"><span class="comment">// ))(CountUi)</span></div><div class="line"></div><div class="line"><span class="comment">//究极精简版</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">count</span>: state&#125;), </div><div class="line">    <span class="comment">// react-redux 自动分发</span></div><div class="line">    &#123;</div><div class="line">        <span class="attr">jia</span>: createIncrementAction,</div><div class="line">        <span class="attr">jian</span>: createDecrementAction,</div><div class="line">        <span class="attr">yibujia</span>: createIncrementAsyncAction,</div><div class="line">    &#125;</div><div class="line">)(CountUi)</div></pre></td></tr></table></figure><p>component中的Count中的index</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">h1</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    increment = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="keyword">this</span>.selectNumber</div><div class="line">        <span class="keyword">this</span>.props.jia(value * <span class="number">1</span>)</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    decrement = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="keyword">this</span>.selectNumber</div><div class="line">        <span class="keyword">this</span>.props.jian(value * <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">    incrementOdd = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="keyword">this</span>.selectNumber</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.props.count % <span class="number">2</span> !== <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.props.jia(value * <span class="number">1</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    incrementAsync = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="keyword">this</span>.selectNumber</div><div class="line">        <span class="keyword">this</span>.props.yibujia(value * <span class="number">1</span>, <span class="number">500</span>)</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="keyword">this</span>.props</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为： &#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</div><div class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementOdd&#125;</span>&gt;</span>当前求和奇数在加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>异步加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>App.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="comment">//使用容器组件</span></div><div class="line"><span class="keyword">import</span> Count <span class="keyword">from</span> <span class="string">'./containers/Count'</span></div><div class="line"><span class="comment">//引入store,进行关联</span></div><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./redux/store'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">app</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">Count</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Count</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用react-redux比redux优化：</p><p>index.js中不需要自己调用强制刷新, 在container中的connect已经封装了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</div><div class="line"><span class="comment">//import store from './redux/store'</span></div><div class="line">ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>,</span></div><div class="line">    document.getElementById('root')</div><div class="line">);</div><div class="line"></div><div class="line">// store.subscribe(() =&gt; &#123;</div><div class="line">//     ReactDOM.render(</div><div class="line">//         <span class="tag">&lt;<span class="name">App</span> /&gt;</span>,</div><div class="line">//         document.getElementById('root')</div><div class="line">//     );</div><div class="line">// &#125;)</div></pre></td></tr></table></figure><h4 id="整合-ui-和-容器（一个文件）"><a href="#整合-ui-和-容器（一个文件）" class="headerlink" title="整合 ui 和 容器（一个文件）"></a>整合 ui 和 容器（一个文件）</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"><span class="keyword">import</span> &#123; createDecrementAction, createIncrementAction, createIncrementAsyncAction &#125; <span class="keyword">from</span> <span class="string">'../../redux/count_action'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Count</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    increment = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="keyword">this</span>.selectNumber</div><div class="line">        <span class="keyword">this</span>.props.jia(value * <span class="number">1</span>)</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    decrement = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="keyword">this</span>.selectNumber</div><div class="line">        <span class="keyword">this</span>.props.jian(value * <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">    incrementOdd = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="keyword">this</span>.selectNumber</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.props.count % <span class="number">2</span> !== <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.props.jia(value * <span class="number">1</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    incrementAsync = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="keyword">this</span>.selectNumber</div><div class="line">        <span class="keyword">this</span>.props.yibujia(value * <span class="number">1</span>, <span class="number">500</span>)</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="keyword">this</span>.props</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为： &#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</div><div class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementOdd&#125;</span>&gt;</span>当前求和奇数在加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>异步加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//究极精简版</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">count</span>: state&#125;), </div><div class="line">    <span class="comment">// react-redux 自动分发</span></div><div class="line">    &#123;</div><div class="line">        <span class="attr">jia</span>: createIncrementAction,</div><div class="line">        <span class="attr">jian</span>: createDecrementAction,</div><div class="line">        <span class="attr">yibujia</span>: createIncrementAsyncAction,</div><div class="line">    &#125;</div><div class="line">)(Count)</div></pre></td></tr></table></figure><h3 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h3><p>将store 传给app所有子组件</p><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</div><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./redux/store'</span></div><div class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line">ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">App</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span>,</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</div><div class="line">);</div></pre></td></tr></table></figure><h3 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h3><p>合并多个reducer</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">*  该文件专门用于暴露store对象，整个项目有且只有一个</div><div class="line">*/</div><div class="line"><span class="comment">//引入createStore</span></div><div class="line"><span class="keyword">import</span> &#123;createStore, applyMiddleware, combineReducers&#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"><span class="comment">//引入指定reducer</span></div><div class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">'./reducers/count'</span></div><div class="line"><span class="keyword">import</span> personReducer <span class="keyword">from</span> <span class="string">'./reducers/person'</span></div><div class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span></div><div class="line"></div><div class="line"><span class="comment">//汇总所有reducer</span></div><div class="line"><span class="keyword">const</span> allReducer = combineReducers(&#123;</div><div class="line">    <span class="attr">count</span>: countReducer,</div><div class="line">    <span class="attr">persons</span>: personReducer</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(allReducer, applyMiddleware(thunk))</div></pre></td></tr></table></figure><h3 id="踩坑："><a href="#踩坑：" class="headerlink" title="踩坑："></a>踩坑：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (type) &#123;</div><div class="line">    <span class="keyword">case</span> ADDPERSON:</div><div class="line">        <span class="comment">// preState.push(personObj)//这样写不会触发更新</span></div><div class="line">        <span class="comment">/**</span></div><div class="line">        * react底层会做浅比较, preState的地址没有发生改变,那么页面不会更新</div><div class="line">        */</div><div class="line"></div><div class="line">        <span class="comment">//下面是放到一个新的数组中</span></div><div class="line">        <span class="keyword">return</span> [personObj, ...preState]</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">return</span> preState;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>原因： redux 的 reducer 函数必须是纯函数</p><p>纯函数：</p><p>1.只要是同样的输入（实参），必须得到同样的输出</p><p>2.不得改写参数数据</p><p>3.不会产生副作用，例如网络请求，输入输出设备</p><p>4.不能调用 Date.now() 或者Math.random()等不纯的方法</p><h3 id="redux-devtools"><a href="#redux-devtools" class="headerlink" title="redux-devtools"></a>redux-devtools</h3><p>项目安装： npm add redux-devtools-extension</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">store.js</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;composeWithDevTools&#125; <span class="keyword">from</span> <span class="string">'redux-devtools-extension'</span></div><div class="line"><span class="comment">//没有异步api</span></div><div class="line"><span class="comment">// export default createStore(allReducer, composeWithDevTools)</span></div><div class="line"><span class="comment">//有异步api</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(allReducer, composeWithDevTools(applyMiddleware(thunk)))</div></pre></td></tr></table></figure><p>浏览器安装： redux-tools</p><h3 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h3><p>安装serve：npm i serve -g</p><p>使用命令：npm run build</p><p>使用命令：serve build</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;状态管理工具&quot;&gt;&lt;a href=&quot;#状态管理工具&quot; class=&quot;headerlink&quot; title=&quot;状态管理工具&quot;&gt;&lt;/a&gt;状态管理工具&lt;/h3&gt;&lt;p&gt;redux在 react， angular， vue中都可以使用，常用于react&lt;/p&gt;
&lt;p&gt;&lt;stro</summary>
      
    
    
    
    
    <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>cropper使用</title>
    <link href="http://yoursite.com/2021/05/09/jquery/cropper%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2021/05/09/jquery/cropper%E4%BD%BF%E7%94%A8/</id>
    <published>2021-05-09T05:05:40.000Z</published>
    <updated>2021-05-09T11:38:16.531Z</updated>
    
    <content type="html"><![CDATA[<h3 id="croper-图片裁剪上传插件"><a href="#croper-图片裁剪上传插件" class="headerlink" title="croper 图片裁剪上传插件"></a>croper 图片裁剪上传插件</h3><h4 id="html引入"><a href="#html引入" class="headerlink" title="html引入"></a>html引入</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"libs/js/cropper.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"libs/css/cropper.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></div></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"../images/picture.jpg"</span> <span class="attr">alt</span>=<span class="string">"Picture"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> image = <span class="built_in">document</span>.querySelector(<span class="string">'#image'</span>);</div><div class="line">      <span class="keyword">var</span> cropper = <span class="keyword">new</span> Cropper(image, &#123;</div><div class="line">参数</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="参数解析："><a href="#参数解析：" class="headerlink" title="参数解析："></a>参数解析：</h4><h5 id="viewMode-默认0，-可选（0，-1，2，3）"><a href="#viewMode-默认0，-可选（0，-1，2，3）" class="headerlink" title="viewMode 默认0， 可选（0， 1，2，3）"></a>viewMode 默认0， 可选（0， 1，2，3）</h5><p><img src="C:\Users\zhang\Desktop\viewNode.png" alt="viewNode"></p><p>解析：</p><p>值为3： 让 img 填满 div 可放大不能缩小</p><p>值为2： 裁剪框不能超过 img， img 中的高与 div 一致</p><p>值为1：裁剪框不能超过图片</p><p>值为0： 裁剪框没有限制</p><h4 id="preview-预览图"><a href="#preview-预览图" class="headerlink" title="preview 预览图"></a>preview 预览图</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">.small &#123;</div><div class="line">    overflow: hidden;</div><div class="line">    height: 100px;</div><div class="line">    width: 100px;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col col-6"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"../images/picture.jpg"</span> <span class="attr">alt</span>=<span class="string">"Picture"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> window.addEventListener('DOMContentLoaded', function () &#123;</div><div class="line">    var image = document.querySelector('#image');</div><div class="line">    var cropper = new Cropper(image, &#123;</div><div class="line">      aspectRatio:1/1,</div><div class="line">      viewMode:0,</div><div class="line">      preview:'.small'</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure><p>注意事项：用于预览的div必须有固定大小，最好超出部分隐藏，即 overflow: hidden;</p><h4 id="dragMode-（移动模式）可以双击切换"><a href="#dragMode-（移动模式）可以双击切换" class="headerlink" title="dragMode （移动模式）可以双击切换"></a>dragMode （移动模式）可以双击切换</h4><p>move：可以移动裁剪框。不能重选</p><p>crop：可以重新选择框，不能拖动</p><p>none：什么都不处理</p><h4 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> image = <span class="built_in">document</span>.querySelector(<span class="string">'#image'</span>);</div><div class="line"><span class="keyword">var</span> cropper = <span class="keyword">new</span> Cropper(image, &#123;</div><div class="line">  <span class="comment">//所有Boolean 不写默认都为true</span></div><div class="line"></div><div class="line">  aspectRatio:<span class="number">1</span>/<span class="number">1</span>,</div><div class="line">  <span class="attr">viewMode</span>:<span class="number">0</span>,</div><div class="line">  <span class="attr">preview</span>:<span class="string">'.small'</span>,</div><div class="line">  <span class="attr">dragMode</span>:<span class="string">'move'</span>,</div><div class="line">  <span class="attr">responsive</span>:<span class="literal">true</span>, <span class="comment">//在调整窗口大小的时候重新渲染cropper</span></div><div class="line">  restore:<span class="literal">true</span>,<span class="comment">//在调整窗口大小后恢复裁剪的区域</span></div><div class="line">  checkCrossOrigin:<span class="literal">true</span>,<span class="comment">//检查图片是否为快于图片</span></div><div class="line">  modal:<span class="literal">true</span>,<span class="comment">//是否开启遮罩 未选中的地方暗色处理</span></div><div class="line">  guides:<span class="literal">true</span>,<span class="comment">//是否显示裁剪虚线</span></div><div class="line">  highlight:<span class="literal">true</span>,<span class="comment">//将选中区域亮色处理</span></div><div class="line">  background:<span class="literal">true</span>,<span class="comment">//是否显示网格背景</span></div><div class="line">  center:<span class="literal">true</span>,<span class="comment">//裁剪框是否在图片中心</span></div><div class="line">  autoCrop:<span class="literal">true</span>,<span class="comment">//初始化时是否自动显示裁剪框</span></div><div class="line">  autoCropArea:<span class="number">1</span>,<span class="comment">//初始化时裁剪框的大小与原图的比例  0-1之间</span></div><div class="line">  movable:<span class="literal">true</span>,<span class="comment">//是否允许移动图片</span></div><div class="line">  rotatable:<span class="literal">true</span>,<span class="comment">//是否允许旋转图片, 需要函数操作</span></div><div class="line">  scalable:<span class="literal">true</span>,<span class="comment">//是否允许翻转图片</span></div><div class="line">  zoomable:<span class="literal">true</span>,<span class="comment">//是否放大缩小图片, 需要函数操作</span></div><div class="line">  zoomOnTouch:<span class="literal">true</span>,<span class="comment">//是否可以通过触摸形式缩放图片 移动端</span></div><div class="line">  zoomOnWheel:<span class="literal">true</span>,<span class="comment">//是否可以通过鼠标缩放图片</span></div><div class="line">  wheelZoomRatio:<span class="number">0.1</span>,<span class="comment">//设置鼠标控制缩放的比列</span></div><div class="line">  cropBoxMovable:<span class="literal">true</span>,<span class="comment">//是否可以移动裁剪框</span></div><div class="line">  cropBoxResizable:<span class="literal">true</span>,<span class="comment">//是否可以调整裁剪框的大小</span></div><div class="line">  toggleDragModeOnDblclick:<span class="literal">false</span>,<span class="comment">//设置dragMode是否可以相互切换, 双击鼠标切换</span></div><div class="line"></div><div class="line">  <span class="comment">//设置container 最小</span></div><div class="line">  minContainerWidth:<span class="number">0</span>,<span class="comment">//设置container宽度</span></div><div class="line">  minContainerHeight:<span class="number">0</span>,<span class="comment">//设置container高度</span></div><div class="line"></div><div class="line">  <span class="comment">//设置canvas  最小</span></div><div class="line">  minCanvasWidth:<span class="number">0</span>,<span class="comment">//canvas宽度</span></div><div class="line">  minCanvasHeight:<span class="number">0</span>,<span class="comment">//canvas高度</span></div><div class="line"></div><div class="line">  <span class="comment">//设置裁剪框  最小</span></div><div class="line">  minCropBoxWidth:<span class="number">500</span>,<span class="comment">//裁剪框 宽度</span></div><div class="line">  minCropBoxHeight:<span class="number">500</span>,<span class="comment">//裁剪框 高度</span></div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> image = <span class="built_in">document</span>.querySelector(<span class="string">'#image'</span>);</div><div class="line"><span class="keyword">var</span> cropper = <span class="keyword">new</span> Cropper(image, &#123;</div><div class="line">  <span class="comment">//插件准备完成时执行</span></div><div class="line">  ready(event) &#123;</div><div class="line">    <span class="built_in">console</span>.log(event)</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//开始移动裁剪框时执行的函数</span></div><div class="line">  cropstart(event) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'start'</span> + event)</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//移动裁剪框的时候, 每一帧都会调用</span></div><div class="line">  cropmove(event) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'move'</span> + event)</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//结束移动裁剪框时执行的函数</span></div><div class="line">  cropend(event) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'end'</span> + event)</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">//裁剪框变化执行的函数</span></div><div class="line">  crop(event) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'crop'</span> + event)</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="api"><a href="#api" class="headerlink" title="api"></a>api</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#reset'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//将图像和裁剪框重置为初始状态</span></div><div class="line">    cropper.reset()</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#clear'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//清除裁剪框</span></div><div class="line">    cropper.clear()</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#replace'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//替换的图片 =&gt; string, 替换图片的比例是否和原图相同 =&gt; boolean</span></div><div class="line">    cropper.replace(<span class="string">"../images/picture-2.jpg"</span>, <span class="literal">false</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#enable'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//替换的图片 =&gt; string, 替换图片的比例是否和原图相同 =&gt; boolean</span></div><div class="line">    cropper.enable()</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#disable'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//替换的图片 =&gt; string, 替换图片的比例是否和原图相同 =&gt; boolean</span></div><div class="line">    cropper.disable()</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#destroy'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//销毁cropper, 并在图像中销毁整个cropper</span></div><div class="line">    cropper.destroy()</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#movex'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//移动x坐标  相对</span></div><div class="line">    cropper.move(<span class="number">1</span>,<span class="number">0</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#movey'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//移动y坐标  相对</span></div><div class="line">    cropper.move(<span class="number">0</span>,<span class="number">1</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#moveTox'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//移动x坐标  绝对</span></div><div class="line">    cropper.moveTo(<span class="number">1</span>,<span class="number">0</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#moveToy'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//移动y坐标  绝对</span></div><div class="line">    cropper.moveTo(<span class="number">0</span>,<span class="number">1</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#zoomG'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//放大</span></div><div class="line">    cropper.zoom(<span class="number">0.1</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#zoomS'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//缩小</span></div><div class="line">    cropper.zoom(<span class="number">-0.1</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#zoomToG'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//放大到</span></div><div class="line">    cropper.zoomTo(<span class="number">2</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#zoomToS'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//缩小到</span></div><div class="line">    cropper.zoomTo(<span class="number">0.1</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#rotateA'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//逆时针旋转</span></div><div class="line">    cropper.rotate(<span class="number">-45</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#rotateB'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//顺时针旋转</span></div><div class="line">    cropper.rotate(<span class="number">45</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#rotateToA'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//逆时针旋转到</span></div><div class="line">    cropper.rotateTo(<span class="number">-45</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#rotateToB'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//顺时针旋转到</span></div><div class="line">    cropper.rotateTo(<span class="number">45</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#scalex'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//沿x翻转</span></div><div class="line">    cropper.scale(<span class="number">1</span>, <span class="number">-1</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#scaley'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//沿y翻转</span></div><div class="line">    cropper.scale(<span class="number">-1</span>, <span class="number">1</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#scalexy'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//沿xy同时翻转</span></div><div class="line">    cropper.scale(<span class="number">-1</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#scaleFromX'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//缩放x坐标默认为1</span></div><div class="line">    cropper.scaleX(<span class="number">0.5</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#scaleFromY'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//沿缩放y坐标</span></div><div class="line">    cropper.scaleY(<span class="number">2</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#getData'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//获取粗略的的数据</span></div><div class="line">    <span class="built_in">console</span>.log(cropper.getData())</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(cropper.getData().toLocaleString()))</div><div class="line">    $(<span class="string">'#message'</span>).append(cropper.getData().toString())</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#setData'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//设置裁剪框的数据</span></div><div class="line">    cropper.setData(&#123;</div><div class="line">        <span class="comment">// width:100,</span></div><div class="line">        <span class="comment">// height:100</span></div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#getContainerData'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//获取container数据</span></div><div class="line">    $(<span class="string">'#message'</span>).append(cropper.getContainerData().toString())</div><div class="line">&#125;)</div><div class="line"><span class="comment">// $('#setData').on('click', function () &#123;</span></div><div class="line"><span class="comment">//   //没有这个api  setImgData 同样没有</span></div><div class="line"><span class="comment">//   cropper.setContainerData(&#123;</span></div><div class="line"><span class="comment">//     width:500,</span></div><div class="line"><span class="comment">//     height:500</span></div><div class="line"><span class="comment">//   &#125;)</span></div><div class="line"><span class="comment">//   alert(123)</span></div><div class="line"><span class="comment">// &#125;)</span></div><div class="line">$(<span class="string">'#getImgData'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//获取img数据</span></div><div class="line">    $(<span class="string">'#message'</span>).append(<span class="built_in">JSON</span>.stringify(cropper.getImageData().toString()))</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#getCanvasData'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//获取canvas数据</span></div><div class="line">    <span class="built_in">console</span>.log(cropper.getCanvasData())</div><div class="line">    $(<span class="string">'#message'</span>).append(<span class="built_in">JSON</span>.stringify(cropper.getCanvasData().toString()))</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#setCanvasData'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//设置canvas数据</span></div><div class="line">    cropper.setCanvasData(&#123;</div><div class="line">        <span class="attr">left</span>:<span class="number">0</span>,</div><div class="line">        <span class="attr">top</span>:<span class="number">0</span>,</div><div class="line">        <span class="attr">width</span>:<span class="number">200</span>,</div><div class="line">        <span class="attr">height</span>:<span class="number">200</span></div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#getCropperBoxData'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//获取 裁剪框 数据</span></div><div class="line">    <span class="built_in">console</span>.log(cropper.getCropBoxData())</div><div class="line">    $(<span class="string">'#message'</span>).append(<span class="built_in">JSON</span>.stringify(cropper.getCropBoxData().toString()))</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#setCropperBoxData'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//设置 裁剪框 数据</span></div><div class="line">    cropper.setCropBoxData(&#123;</div><div class="line">        <span class="attr">left</span>:<span class="number">0</span>,</div><div class="line">        <span class="attr">top</span>:<span class="number">0</span>,</div><div class="line">        <span class="attr">width</span>:<span class="number">400</span>,</div><div class="line">        <span class="attr">height</span>:<span class="number">400</span></div><div class="line">    &#125;)</div><div class="line"></div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#getCroppedCanvas'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//获取 裁剪框中的图片</span></div><div class="line">    $(<span class="string">'#message'</span>).append( cropper.getCroppedCanvas())</div><div class="line">    <span class="built_in">console</span>.log(cropper.getCroppedCanvas().toDataURL(<span class="string">'image/jpeg'</span>))</div><div class="line"></div><div class="line">&#125;)</div><div class="line"></div><div class="line">$(<span class="string">'#getAspectRadio'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//获取 裁剪框中的图片</span></div><div class="line">    $(<span class="string">'#message'</span>).append( cropper.getCroppedCanvas())</div><div class="line">    <span class="built_in">console</span>.log(cropper.getCroppedCanvas().toDataURL(<span class="string">'image/jpeg'</span>))</div><div class="line"></div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#setAspectRadio'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//修改裁剪框的长宽比</span></div><div class="line">    cropper.setAspectRatio(<span class="number">2</span>/<span class="number">1</span>)</div><div class="line"></div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#setData'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//设置拖拽模式</span></div><div class="line">    cropper.setDragMode(<span class="string">'none'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;croper-图片裁剪上传插件&quot;&gt;&lt;a href=&quot;#croper-图片裁剪上传插件&quot; class=&quot;headerlink&quot; title=&quot;croper 图片裁剪上传插件&quot;&gt;&lt;/a&gt;croper 图片裁剪上传插件&lt;/h3&gt;&lt;h4 id=&quot;html引入&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>juqey踩坑</title>
    <link href="http://yoursite.com/2021/05/06/jquery/juqey%E8%B8%A9%E5%9D%91/"/>
    <id>http://yoursite.com/2021/05/06/jquery/juqey%E8%B8%A9%E5%9D%91/</id>
    <published>2021-05-06T07:57:46.000Z</published>
    <updated>2021-05-06T07:59:50.073Z</updated>
    
    <content type="html"><![CDATA[<h3 id="选择父页面元素（top-document）"><a href="#选择父页面元素（top-document）" class="headerlink" title="选择父页面元素（top.document）"></a>选择父页面元素（top.document）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$("[key= 'finishPhoto'] .title", top.document).append(`</div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float: right;</span></span></div><div class="line">         font-size: 14px;</div><div class="line">         font-weight: 400;</div><div class="line">         color: #0084FE;</div><div class="line">         opacity: 1;</div><div class="line">         cursor: pointer;</div><div class="line">         margin-right: 20px;</div><div class="line">   " <span class="attr">onclick</span>=<span class="string">"backToAlbum()"</span>&gt;返回到相册首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">`)</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;选择父页面元素（top-document）&quot;&gt;&lt;a href=&quot;#选择父页面元素（top-document）&quot; class=&quot;headerlink&quot; title=&quot;选择父页面元素（top.document）&quot;&gt;&lt;/a&gt;选择父页面元素（top.document）&lt;/</summary>
      
    
    
    
    
    <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>css-img踩坑</title>
    <link href="http://yoursite.com/2021/04/28/css/css-img%E8%B8%A9%E5%9D%91/"/>
    <id>http://yoursite.com/2021/04/28/css/css-img%E8%B8%A9%E5%9D%91/</id>
    <published>2021-04-28T11:58:21.000Z</published>
    <updated>2021-04-28T12:14:08.330Z</updated>
    
    <content type="html"><![CDATA[<p>先上代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav-set-item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>文章<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img-down"</span> <span class="attr">src</span>=<span class="string">"skin/images/descending-order.png"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img-up"</span> <span class="attr">src</span>=<span class="string">"skin/images/cannot-Ascending-order-.png"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img-del"</span> <span class="attr">src</span>=<span class="string">"skin/images/dele.png"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.nav-set-item</span> <span class="selector-tag">img</span><span class="selector-pseudo">:first-child</span> &#123;</div><div class="line"><span class="attribute">position</span>: absulate;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这一段css无论如何都不能生效</p><p>后来问大佬,原来css中处理img并不是当成img,css将span也当作img处理,所以这样是选中的是第一个span</p><p>解决方式::从第二个元素开始</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.nav-set-item</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</div><div class="line"><span class="attribute">left</span>: <span class="number">721px</span>;</div><div class="line"><span class="attribute">top</span>:<span class="number">13px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先上代码:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=</summary>
      
    
    
    
    
    <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>reactRouter</title>
    <link href="http://yoursite.com/2021/04/28/react/reactRouter/"/>
    <id>http://yoursite.com/2021/04/28/react/reactRouter/</id>
    <published>2021-04-28T11:23:20.000Z</published>
    <updated>2021-05-06T11:56:53.907Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save react-router-dom</div></pre></td></tr></table></figure><h3 id="初级使用"><a href="#初级使用" class="headerlink" title="初级使用"></a>初级使用</h3><p>路由模式同样有两种 hash（HashRouter） 和 history(BrowserRouter)</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//index.js中包裹App</div><div class="line">import &#123;BrowserRouter&#125; from 'react-router-dom'</div><div class="line">ReactDOM.render(</div><div class="line">  &lt;BrowserRouter&gt;</div><div class="line">    &lt;App /&gt;</div><div class="line">  &lt;/BrowserRouter&gt;,</div><div class="line">  document.getElementById('root')</div><div class="line">);</div><div class="line"></div><div class="line">//导航区</div><div class="line">&lt;Link classname='list-group-item' to="/about"&gt;About&lt;/Link&gt;</div><div class="line">&lt;Link classname='list-group-item' to="/home"&gt;Home&lt;/Link&gt;</div><div class="line">//展示区</div><div class="line">&lt;Route path='/home' compoent=&#123;Home&#125;&gt;&lt;/Route&gt;</div><div class="line">&lt;Route path='/about' compoent=&#123;About&#125;&gt;&lt;/Route&gt;</div></pre></td></tr></table></figure><h3 id="NavLink"><a href="#NavLink" class="headerlink" title="NavLink"></a>NavLink</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;NavLink&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></div><div class="line"><span class="comment">//可以传入选中的class类名</span></div><div class="line">&lt;NavLink activeClassName=<span class="string">'active'</span> className=<span class="string">'list-group-item'</span> to=<span class="string">"/about"</span>&gt;About&lt;<span class="regexp">/NavLink&gt;</span></div></pre></td></tr></table></figure><h4 id="Switch-Redirect-exact"><a href="#Switch-Redirect-exact" class="headerlink" title="Switch   Redirect  exact"></a>Switch   Redirect  exact</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//exact 路由严格模式，谨慎使用</span></div><div class="line"><span class="comment">//Switch  寻找到路由匹配后不会在向下寻找，提高效率</span></div><div class="line"><span class="comment">//Redirect 重定向，要写在 Switch 最后</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;Route, Switch, Redirect&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></div><div class="line">&lt;Switch&gt;</div><div class="line">    &#123;<span class="comment">/* exact 开启严格匹配 */</span>&#125;</div><div class="line">    &lt;Route exact path=<span class="string">'/home'</span> component=&#123;Home&#125;&gt;</div><div class="line"></div><div class="line">    <span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></div><div class="line">    &lt;Route exact path=<span class="string">'/about'</span> component=&#123;About&#125;&gt;</div><div class="line"></div><div class="line">    <span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></div><div class="line">    &#123;<span class="comment">/* 重定向 */</span>&#125;</div><div class="line">    &lt;Redirect to=<span class="string">'/about'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Redirect</span>&gt;</span></span></div><div class="line">&lt;<span class="regexp">/Switch&gt;</span></div></pre></td></tr></table></figure><h3 id="路由注册顺序（嵌套路由）"><a href="#路由注册顺序（嵌套路由）" class="headerlink" title="路由注册顺序（嵌套路由）"></a>路由注册顺序（嵌套路由）</h3><p>子路由要带上父路由。</p><p>路由注册是由顺序的，先注册app中的路由。</p><p>所以要慎用 exact 会使二级路由失效。</p><h3 id="向路由组件传递参数"><a href="#向路由组件传递参数" class="headerlink" title="向路由组件传递参数"></a>向路由组件传递参数</h3><h4 id="params（路由中路径传参）"><a href="#params（路由中路径传参）" class="headerlink" title="params（路由中路径传参）"></a>params（路由中路径传参）</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//和vue一样</div><div class="line">&lt;li key=&#123;item.id&#125;&gt;</div><div class="line">    &lt;Link to=&#123;`/home/message/detail/$&#123;item.id&#125;/$&#123;item.title&#125;`&#125;&gt;&#123;item.title&#125;&lt;/Link&gt;</div><div class="line">&lt;/li&gt;</div><div class="line">&lt;Switch&gt;</div><div class="line">    &lt;Route path='/home/message/detail/:id/:title' component=&#123;Detail&#125;&gt;&lt;/Route&gt;</div><div class="line">&lt;/Switch&gt;</div></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//组件中用props接收</span></div><div class="line"><span class="keyword">const</span> &#123;id, title&#125; = <span class="keyword">this</span>.props.match.params</div><div class="line"><span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>id: &#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>title: &#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">)</div></pre></td></tr></table></figure><h4 id="search-query"><a href="#search-query" class="headerlink" title="search(query)"></a>search(query)</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//声明</div><div class="line">&lt;Link to=&#123;`/home/message/detail/?id=$&#123;item.id&#125;&amp;title=$&#123;item.title&#125;`&#125;&gt;&#123;item.title&#125;&lt;/Link&gt;</div><div class="line">&lt;Route path='/home/message/detail' component=&#123;Detail&#125;&gt;&lt;/Route&gt;</div><div class="line">&lt;/Switch&gt;</div></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//react  自引入的querystring进行解构</span></div><div class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'querystring'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> &#123;search&#125; = <span class="keyword">this</span>.props.location</div><div class="line"><span class="keyword">const</span> &#123;id, title&#125; = qs.parse(search.slice(<span class="number">1</span>))</div></pre></td></tr></table></figure><p>ps:   urlencode格式:   key1=valueq&amp;key2=value2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">qs.stringify(&#123;<span class="attr">id</span>:<span class="string">'01'</span>, <span class="attr">value</span>:<span class="string">'aa'</span>&#125;)  =&gt;  id=<span class="number">01</span>&amp;value=aa</div><div class="line">qs.parse(<span class="string">'id=01&amp;value=aa'</span>)  =&gt;  &#123;<span class="attr">id</span>:<span class="string">'01'</span>, <span class="attr">value</span>:<span class="string">'aa'</span>&#125;</div></pre></td></tr></table></figure><h3 id="state（地址栏不会跟上东西）"><a href="#state（地址栏不会跟上东西）" class="headerlink" title="state（地址栏不会跟上东西）"></a>state（地址栏不会跟上东西）</h3><p>传递对象参数，默认值问undefined</p><p>用于使用histroy模式时，state存在history中（缓存），所以刷新不会丢失数据，但是如果清除缓存就会出问题</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Link to=&#123;&#123;pathname:'/home/message/detail',state:&#123;id:item.id,title:item.title&#125;&#125;&#125;&gt;&#123;item.title&#125;&lt;/Link&gt;</div><div class="line"></div><div class="line">const &#123;id, title&#125; = this.props.location.state</div></pre></td></tr></table></figure><h3 id="路由跳转模式（push-replace）"><a href="#路由跳转模式（push-replace）" class="headerlink" title="路由跳转模式（push    replace）"></a>路由跳转模式（push    replace）</h3><h4 id="push（默认）"><a href="#push（默认）" class="headerlink" title="push（默认）"></a>push（默认）</h4><p>push会留下历史记录</p><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><p>不会有历史记录</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Link replace to=&#123;&#123;<span class="attr">pathname</span>:<span class="string">'/home/message/detail'</span>,<span class="attr">state</span>:&#123;<span class="attr">id</span>:item.id,<span class="attr">title</span>:item.title&#125;&#125;&#125;&gt;&#123;item.title&#125;&lt;<span class="regexp">/Link&gt;</span></div></pre></td></tr></table></figure><h3 id="编程式路由导航（this-props-history-api）"><a href="#编程式路由导航（this-props-history-api）" class="headerlink" title="编程式路由导航（this.props.history  api）"></a>编程式路由导航（this.props.history  api）</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//params</span></div><div class="line"><span class="keyword">this</span>.props.history.replace(<span class="string">`/home/<span class="subst">$&#123;id&#125;</span>`</span>)</div><div class="line"><span class="keyword">this</span>.props.history.push(<span class="string">`/home/<span class="subst">$&#123;id&#125;</span>`</span>)</div><div class="line"></div><div class="line"><span class="comment">//query</span></div><div class="line"><span class="keyword">this</span>.props.history.replace(<span class="string">`/home?id=<span class="subst">$&#123;id&#125;</span>`</span>)</div><div class="line"><span class="keyword">this</span>.props.history.push(<span class="string">`/home?id=<span class="subst">$&#123;id&#125;</span>`</span>)</div><div class="line"></div><div class="line"><span class="comment">//state</span></div><div class="line"><span class="keyword">this</span>.props.history.replace(<span class="string">`/home/message/detail`</span>,&#123;id, title&#125;)</div><div class="line"><span class="keyword">this</span>.props.history.push(<span class="string">`/home/message/detail`</span>,&#123;id, title&#125;)</div><div class="line"></div><div class="line"><span class="comment">//前进</span></div><div class="line"><span class="keyword">this</span>.props.history.goForward()</div><div class="line"><span class="comment">//后退</span></div><div class="line"><span class="keyword">this</span>.props.history.goBack()</div><div class="line"><span class="comment">//前进后退几步</span></div><div class="line"><span class="keyword">this</span>.props.history.go(n)</div></pre></td></tr></table></figure><h3 id="withRouter"><a href="#withRouter" class="headerlink" title="withRouter"></a>withRouter</h3><p>使一般组件获得路由组件的api</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;withRouter&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    goForword =<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">this</span>.props.history.goForward()</div><div class="line">    &#125;</div><div class="line">    goBack =<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">this</span>.props.history.goBack()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">                Header</div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.goForword&#125;</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.goBack&#125;</span>&gt;</span>回退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(index);</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div clas</summary>
      
    
    
    
    
    <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react组件间传递参数</title>
    <link href="http://yoursite.com/2021/04/25/react/react%E7%BB%84%E4%BB%B6%E9%97%B4%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/"/>
    <id>http://yoursite.com/2021/04/25/react/react%E7%BB%84%E4%BB%B6%E9%97%B4%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/</id>
    <published>2021-04-25T03:40:12.000Z</published>
    <updated>2021-04-25T12:43:14.914Z</updated>
    
    <content type="html"><![CDATA[<h3 id="父传子-props"><a href="#父传子-props" class="headerlink" title="父传子 props"></a>父传子 props</h3><p>与vue一样 ：组件无论是使用函数声明还是通过 class 声明，都决不能修改自身的 props**</p><ul><li>正常情况下 props 的拥有权不属于当前组件，是别人传给你的，你用的时候用 props 来引用，所以修改的权限应该由上面来决定</li></ul><p>父组件传值：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">state = &#123;</div><div class="line">    <span class="attr">todos</span>: [</div><div class="line">      &#123;<span class="attr">id</span>: <span class="string">'001'</span>, <span class="attr">name</span>: <span class="string">'吃饭'</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;,</div><div class="line">      &#123;<span class="attr">id</span>: <span class="string">'002'</span>, <span class="attr">name</span>: <span class="string">'睡觉'</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;,</div><div class="line">      &#123;<span class="attr">id</span>: <span class="string">'003'</span>, <span class="attr">name</span>: <span class="string">'打游戏'</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;,</div><div class="line">    ],</div><div class="line">    <span class="attr">list</span>: &#123;</div><div class="line">      <span class="string">'id'</span>: <span class="string">'002'</span>,</div><div class="line">      <span class="attr">name</span>:<span class="string">'zs'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">addToDo = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span>&#123;todos&#125; = <span class="keyword">this</span>.state</div><div class="line">    <span class="keyword">const</span> newTOdos = [todoObj, ...todos]</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">todos</span>: newTOdos&#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">//render 中</span></div><div class="line"><span class="keyword">const</span> &#123;todos&#125; = <span class="keyword">this</span>.state</div><div class="line"><span class="comment">//对象可以直接结构传递</span></div><div class="line">&lt;List todos=&#123;todos&#125;  &#123;...list&#125; &#123;...list2&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">List</span>&gt;</span></span></div><div class="line"><span class="comment">//传递一个函数</span></div><div class="line">&lt;Header addToDo=&#123;<span class="keyword">this</span>.addToDo&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span></div></pre></td></tr></table></figure><p>子组件接收并传值：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//render中</span></div><div class="line"><span class="comment">//如果解构后有相同的属性,后面的解构会覆盖前面的</span></div><div class="line"><span class="keyword">const</span> &#123;todos, id&#125; = <span class="keyword">this</span>.props</div><div class="line"><span class="built_in">console</span>.log(id); <span class="comment">// 003</span></div><div class="line"></div><div class="line"><span class="comment">//子组件向父组件传值</span></div><div class="line">handleKeyUp = <span class="function">(<span class="params">event</span>)=&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> &#123;keyCode, target&#125; = event</div><div class="line">    <span class="keyword">if</span>(target.value.trim() !== <span class="string">''</span> &amp;&amp; keyCode === <span class="number">13</span> ) &#123;</div><div class="line">        <span class="built_in">console</span>.log(target.value);</div><div class="line">        <span class="keyword">let</span> params = &#123;</div><div class="line">            <span class="attr">id</span>: nanoid(),</div><div class="line">            <span class="attr">name</span>:target.value,</div><div class="line">            <span class="attr">done</span>:<span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.props.addToDo(params)</div><div class="line">        target.value = <span class="string">''</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="兄弟组件传值-消息订阅与发布-："><a href="#兄弟组件传值-消息订阅与发布-：" class="headerlink" title="兄弟组件传值(消息订阅与发布)："></a>兄弟组件传值(消息订阅与发布)：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">npm i pubsub-js</div><div class="line"></div><div class="line"><span class="comment">//订阅消息,组件一挂载就发布, 返回一个订阅token</span></div><div class="line"><span class="comment">//第一个参数: 订阅名</span></div><div class="line"><span class="comment">//第二个参数: 回调</span></div><div class="line"><span class="comment">//回调函数的第一个参数: 订阅名</span></div><div class="line"><span class="comment">//回调函数的第二个参数: 订阅传过来的值</span></div><div class="line">componentDidMount() &#123;</div><div class="line">    <span class="keyword">this</span>.token = PubSub.subscribe(<span class="string">'at'</span>, (_, data) =&gt; &#123;</div><div class="line">        <span class="keyword">this</span>.setState(data)</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//订阅的值发生变动,调用</span></div><div class="line"><span class="comment">//第一个参数: 订阅名</span></div><div class="line"><span class="comment">//第二个参数: 传递的值</span></div><div class="line">PubSub.publish(<span class="string">'at'</span>, &#123;<span class="string">'name'</span>:<span class="string">'tom'</span>&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//组件销毁前要删除token</span></div><div class="line">componentWillUnmount() &#123;</div><div class="line">    PubSub.unsubscribe(<span class="keyword">this</span>.token)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;父传子-props&quot;&gt;&lt;a href=&quot;#父传子-props&quot; class=&quot;headerlink&quot; title=&quot;父传子 props&quot;&gt;&lt;/a&gt;父传子 props&lt;/h3&gt;&lt;p&gt;与vue一样 ：组件无论是使用函数声明还是通过 class 声明，都决不能修改自身的</summary>
      
    
    
    
    
    <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react生命周期</title>
    <link href="http://yoursite.com/2021/04/23/react/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2021/04/23/react/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2021-04-23T05:31:53.000Z</published>
    <updated>2021-04-23T08:46:20.613Z</updated>
    
    <content type="html"><![CDATA[<h3 id="旧生命周期"><a href="#旧生命周期" class="headerlink" title="旧生命周期"></a>旧生命周期</h3><h3 id="react旧生命周期"><a href="#react旧生命周期" class="headerlink" title="react旧生命周期"></a>react旧生命周期</h3><p><img src="F:\zzz\react\react全家桶资料\02_原理图\react生命周期(旧" alt="react生命周期(旧)">.png)</p><h3 id="vue-旧生命周期"><a href="#vue-旧生命周期" class="headerlink" title="vue  旧生命周期"></a>vue  旧生命周期</h3><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="Vue 实例生命周期"></p><h3 id="react新生命周期"><a href="#react新生命周期" class="headerlink" title="react新生命周期"></a>react新生命周期</h3><p><img src="F:\zzz\react\react全家桶资料\02_原理图\react生命周期(新" alt="react生命周期(新)">.png)</p><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*以下三个与之前相比需加上  UNSAVE_ 前缀*/</span></div><div class="line">UNSAVE_componentWillMount() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Demo-componentWillMount'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">UNSAVE_componentWillUnmount() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Demo-componentWillUnmount'</span>);</div><div class="line">&#125;</div><div class="line">UNSAVE_componentWillReceiveProps(props) &#123;</div><div class="line">    <span class="built_in">console</span>.log(props);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'DemoChild2-componentWillReciveProps'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*新增两个生命周期*/</span></div><div class="line"><span class="comment">//报错 getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.</span></div><div class="line"><span class="comment">//不能这样用</span></div><div class="line">getDerivedStateFromProps() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Demo-getDeivedPropForms'</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//应该这样用</span></div><div class="line"><span class="comment">//需要返回一个状态对象或者null</span></div><div class="line"><span class="comment">//可以接收props</span></div><div class="line"><span class="keyword">static</span> getDerivedStateFromProps(props) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Demo-getDeivedPropForms'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//更新之前获取快照 返回值作为参数返回给 componentDidUpdate, 可以用来传递参数</span></div><div class="line">getSnapshotBeforeUpdate() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Demo-getSnpshotBeforeUpdate'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//preProps props</span></div><div class="line"><span class="comment">//preState state</span></div><div class="line"><span class="comment">//snapshot getSnapshotBeforeUpdate返回值</span></div><div class="line">componentDidUpdate(preProps, preState, snapshot) &#123;</div><div class="line">    <span class="built_in">console</span>.log(preProps, preState, snapshot);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Demo-componentDidUpdate'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*弃用一个*/</span></div><div class="line">componentWillUpdate() &#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;旧生命周期&quot;&gt;&lt;a href=&quot;#旧生命周期&quot; class=&quot;headerlink&quot; title=&quot;旧生命周期&quot;&gt;&lt;/a&gt;旧生命周期&lt;/h3&gt;&lt;h3 id=&quot;react旧生命周期&quot;&gt;&lt;a href=&quot;#react旧生命周期&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="reactreact旧生命周期" scheme="http://yoursite.com/tags/reactreact旧生命周期/"/>
    
  </entry>
  
  <entry>
    <title>js函数柯里化</title>
    <link href="http://yoursite.com/2021/04/23/js/js%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    <id>http://yoursite.com/2021/04/23/js/js%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/</id>
    <published>2021-04-23T02:42:25.000Z</published>
    <updated>2021-04-23T03:16:05.201Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><h4 id="函数调用继续返回函数，实现多次接收参数最后统一处理"><a href="#函数调用继续返回函数，实现多次接收参数最后统一处理" class="headerlink" title="函数调用继续返回函数，实现多次接收参数最后统一处理"></a>函数调用继续返回函数，实现多次接收参数最后统一处理</h4><h4 id="只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数"><a href="#只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数" class="headerlink" title="只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数"></a>只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数</h4><p>简单的柯里化函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">b</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> a + b + c</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)); <span class="comment">//6</span></div></pre></td></tr></table></figure><p>应用：</p><p>react中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">saveFormData = <span class="function">(<span class="params">dataType</span>) =&gt;</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">this</span>.setState(&#123;[dataType]: event.target.value&#125;)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"><span class="comment">//react 默认传递参数event 即实际调用为 this.saveFormData('username')（event）</span></div><div class="line"><span class="comment">//onChange 需要函数作为调用，saveFormData('username') 返回的是一个函数</span></div><div class="line">render() &#123;</div><div class="line"><span class="keyword">return</span> (</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> </span></span></div><div class="line"><span class="attr">type</span>=<span class="string">'text'</span> </div><div class="line"><span class="attr">name</span>=<span class="string">'username'</span></div><div class="line"><span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>'<span class="attr">username</span>')&#125;&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">input</span>&gt;</span></div><div class="line">)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>数组排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* @function 指定数组排序规则</div><div class="line">* @param str &#123;string?&#125; 单个属性，不确定个数</div><div class="line">* @param num &#123;Number?&#125; 是否升序 默认降序</div><div class="line">* @version 1.0.0</div><div class="line">* @description 针对特殊业务需求，用于图表的排序</div><div class="line">*/</div><div class="line">sortBy() &#123;</div><div class="line">    <span class="keyword">let</span> num = <span class="number">1</span></div><div class="line">    <span class="keyword">let</span> arr = []</div><div class="line">    <span class="comment">//最后一个参数是数字</span></div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">arguments</span>[<span class="built_in">arguments</span>.length - <span class="number">1</span>] === <span class="string">'number'</span> &amp;&amp;              !<span class="built_in">isNaN</span>(<span class="built_in">arguments</span>[<span class="built_in">arguments</span>.length - <span class="number">1</span>])) &#123;</div><div class="line">        <span class="comment">//获取最后一个参数的值</span></div><div class="line">        num = <span class="built_in">arguments</span>[<span class="built_in">arguments</span>.length - <span class="number">1</span>] ? <span class="number">1</span> : <span class="number">-1</span></div><div class="line">        arr = <span class="built_in">arguments</span>.slice(<span class="number">0</span>, <span class="built_in">arguments</span>.length - <span class="number">1</span>)</div><div class="line">    &#125;<span class="keyword">else</span> &#123;<span class="comment">//最后一个参数不是数字</span></div><div class="line">        arr = <span class="built_in">arguments</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// num = num ? 1 : -1</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="comment">// 获取其他参数的值</span></div><div class="line">        <span class="keyword">let</span> a1 = <span class="number">0</span></div><div class="line">        <span class="keyword">let</span> b1 = <span class="number">0</span></div><div class="line">        <span class="comment">//这里 a[arr[i]] 后端返回的值确定是number</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len =  arr.length; i &lt; len; i++) &#123;</div><div class="line">            a1 += a[arr[i]]</div><div class="line">            b1 += b[arr[i]]</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(a1 &gt; b1)&#123;</div><div class="line">            <span class="keyword">return</span> num * <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(a1 &lt; b1)&#123;</div><div class="line">            <span class="keyword">return</span> num * <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用</span></div><div class="line">data.sort(<span class="keyword">this</span>.sortBy(<span class="string">'isLeader'</span>, <span class="string">'isNotLeader'</span>))</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;函数柯里化&quot;&gt;&lt;a href=&quot;#函数柯里化&quot; class=&quot;headerlink&quot; title=&quot;函数柯里化&quot;&gt;&lt;/a&gt;函数柯里化&lt;/h3&gt;&lt;h4 id=&quot;函数调用继续返回函数，实现多次接收参数最后统一处理&quot;&gt;&lt;a href=&quot;#函数调用继续返回函数，实现多次接</summary>
      
    
    
    
    
    <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
</feed>
