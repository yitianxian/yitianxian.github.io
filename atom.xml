<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录</title>
  
  <subtitle>千里之行，始于足下</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-04-28T12:14:08.330Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Z-Q-K</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css-img踩坑</title>
    <link href="http://yoursite.com/2021/04/28/css-img%E8%B8%A9%E5%9D%91/"/>
    <id>http://yoursite.com/2021/04/28/css-img%E8%B8%A9%E5%9D%91/</id>
    <published>2021-04-28T11:58:21.000Z</published>
    <updated>2021-04-28T12:14:08.330Z</updated>
    
    <content type="html"><![CDATA[<p>先上代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav-set-item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>文章<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img-down"</span> <span class="attr">src</span>=<span class="string">"skin/images/descending-order.png"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img-up"</span> <span class="attr">src</span>=<span class="string">"skin/images/cannot-Ascending-order-.png"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img-del"</span> <span class="attr">src</span>=<span class="string">"skin/images/dele.png"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.nav-set-item</span> <span class="selector-tag">img</span><span class="selector-pseudo">:first-child</span> &#123;</div><div class="line"><span class="attribute">position</span>: absulate;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这一段css无论如何都不能生效</p><p>后来问大佬,原来css中处理img并不是当成img,css将span也当作img处理,所以这样是选中的是第一个span</p><p>解决方式::从第二个元素开始</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.nav-set-item</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</div><div class="line"><span class="attribute">left</span>: <span class="number">721px</span>;</div><div class="line"><span class="attribute">top</span>:<span class="number">13px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先上代码:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=</summary>
      
    
    
    
    
    <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>reactRouter</title>
    <link href="http://yoursite.com/2021/04/28/reactRouter/"/>
    <id>http://yoursite.com/2021/04/28/reactRouter/</id>
    <published>2021-04-28T11:23:20.000Z</published>
    <updated>2021-04-28T12:14:22.875Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save react-router-dom</div></pre></td></tr></table></figure><h3 id="初级使用"><a href="#初级使用" class="headerlink" title="初级使用"></a>初级使用</h3><p>路由模式同样有两种 hash（HashRouter） 和 history(BrowserRouter)</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//index.js中包裹App</div><div class="line">import &#123;BrowserRouter&#125; from 'react-router-dom'</div><div class="line">ReactDOM.render(</div><div class="line">  &lt;BrowserRouter&gt;</div><div class="line">    &lt;App /&gt;</div><div class="line">  &lt;/BrowserRouter&gt;,</div><div class="line">  document.getElementById('root')</div><div class="line">);</div><div class="line"></div><div class="line">//导航区</div><div class="line">&lt;Link classname='list-group-item' to="/about"&gt;About&lt;/Link&gt;</div><div class="line">&lt;Link classname='list-group-item' to="/home"&gt;Home&lt;/Link&gt;</div><div class="line">//展示区</div><div class="line">&lt;Route path='/home' compoent=&#123;Home&#125;&gt;&lt;/Route&gt;</div><div class="line">&lt;Route path='/about' compoent=&#123;About&#125;&gt;&lt;/Route&gt;</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div clas</summary>
      
    
    
    
    
    <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react组件间传递参数</title>
    <link href="http://yoursite.com/2021/04/25/react/react%E7%BB%84%E4%BB%B6%E9%97%B4%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/"/>
    <id>http://yoursite.com/2021/04/25/react/react%E7%BB%84%E4%BB%B6%E9%97%B4%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/</id>
    <published>2021-04-25T03:40:12.000Z</published>
    <updated>2021-04-25T12:43:14.914Z</updated>
    
    <content type="html"><![CDATA[<h3 id="父传子-props"><a href="#父传子-props" class="headerlink" title="父传子 props"></a>父传子 props</h3><p>与vue一样 ：组件无论是使用函数声明还是通过 class 声明，都决不能修改自身的 props**</p><ul><li>正常情况下 props 的拥有权不属于当前组件，是别人传给你的，你用的时候用 props 来引用，所以修改的权限应该由上面来决定</li></ul><p>父组件传值：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">state = &#123;</div><div class="line">    <span class="attr">todos</span>: [</div><div class="line">      &#123;<span class="attr">id</span>: <span class="string">'001'</span>, <span class="attr">name</span>: <span class="string">'吃饭'</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;,</div><div class="line">      &#123;<span class="attr">id</span>: <span class="string">'002'</span>, <span class="attr">name</span>: <span class="string">'睡觉'</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;,</div><div class="line">      &#123;<span class="attr">id</span>: <span class="string">'003'</span>, <span class="attr">name</span>: <span class="string">'打游戏'</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;,</div><div class="line">    ],</div><div class="line">    <span class="attr">list</span>: &#123;</div><div class="line">      <span class="string">'id'</span>: <span class="string">'002'</span>,</div><div class="line">      <span class="attr">name</span>:<span class="string">'zs'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">addToDo = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span>&#123;todos&#125; = <span class="keyword">this</span>.state</div><div class="line">    <span class="keyword">const</span> newTOdos = [todoObj, ...todos]</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">todos</span>: newTOdos&#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">//render 中</span></div><div class="line"><span class="keyword">const</span> &#123;todos&#125; = <span class="keyword">this</span>.state</div><div class="line"><span class="comment">//对象可以直接结构传递</span></div><div class="line">&lt;List todos=&#123;todos&#125;  &#123;...list&#125; &#123;...list2&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">List</span>&gt;</span></span></div><div class="line"><span class="comment">//传递一个函数</span></div><div class="line">&lt;Header addToDo=&#123;<span class="keyword">this</span>.addToDo&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span></div></pre></td></tr></table></figure><p>子组件接收并传值：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//render中</span></div><div class="line"><span class="comment">//如果解构后有相同的属性,后面的解构会覆盖前面的</span></div><div class="line"><span class="keyword">const</span> &#123;todos, id&#125; = <span class="keyword">this</span>.props</div><div class="line"><span class="built_in">console</span>.log(id); <span class="comment">// 003</span></div><div class="line"></div><div class="line"><span class="comment">//子组件向父组件传值</span></div><div class="line">handleKeyUp = <span class="function">(<span class="params">event</span>)=&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> &#123;keyCode, target&#125; = event</div><div class="line">    <span class="keyword">if</span>(target.value.trim() !== <span class="string">''</span> &amp;&amp; keyCode === <span class="number">13</span> ) &#123;</div><div class="line">        <span class="built_in">console</span>.log(target.value);</div><div class="line">        <span class="keyword">let</span> params = &#123;</div><div class="line">            <span class="attr">id</span>: nanoid(),</div><div class="line">            <span class="attr">name</span>:target.value,</div><div class="line">            <span class="attr">done</span>:<span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.props.addToDo(params)</div><div class="line">        target.value = <span class="string">''</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="兄弟组件传值-消息订阅与发布-："><a href="#兄弟组件传值-消息订阅与发布-：" class="headerlink" title="兄弟组件传值(消息订阅与发布)："></a>兄弟组件传值(消息订阅与发布)：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">npm i pubsub-js</div><div class="line"></div><div class="line"><span class="comment">//订阅消息,组件一挂载就发布, 返回一个订阅token</span></div><div class="line"><span class="comment">//第一个参数: 订阅名</span></div><div class="line"><span class="comment">//第二个参数: 回调</span></div><div class="line"><span class="comment">//回调函数的第一个参数: 订阅名</span></div><div class="line"><span class="comment">//回调函数的第二个参数: 订阅传过来的值</span></div><div class="line">componentDidMount() &#123;</div><div class="line">    <span class="keyword">this</span>.token = PubSub.subscribe(<span class="string">'at'</span>, (_, data) =&gt; &#123;</div><div class="line">        <span class="keyword">this</span>.setState(data)</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//订阅的值发生变动,调用</span></div><div class="line"><span class="comment">//第一个参数: 订阅名</span></div><div class="line"><span class="comment">//第二个参数: 传递的值</span></div><div class="line">PubSub.publish(<span class="string">'at'</span>, &#123;<span class="string">'name'</span>:<span class="string">'tom'</span>&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//组件销毁前要删除token</span></div><div class="line">componentWillUnmount() &#123;</div><div class="line">    PubSub.unsubscribe(<span class="keyword">this</span>.token)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;父传子-props&quot;&gt;&lt;a href=&quot;#父传子-props&quot; class=&quot;headerlink&quot; title=&quot;父传子 props&quot;&gt;&lt;/a&gt;父传子 props&lt;/h3&gt;&lt;p&gt;与vue一样 ：组件无论是使用函数声明还是通过 class 声明，都决不能修改自身的</summary>
      
    
    
    
    
    <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react生命周期</title>
    <link href="http://yoursite.com/2021/04/23/react/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2021/04/23/react/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2021-04-23T05:31:53.000Z</published>
    <updated>2021-04-23T08:46:20.613Z</updated>
    
    <content type="html"><![CDATA[<h3 id="旧生命周期"><a href="#旧生命周期" class="headerlink" title="旧生命周期"></a>旧生命周期</h3><h3 id="react旧生命周期"><a href="#react旧生命周期" class="headerlink" title="react旧生命周期"></a>react旧生命周期</h3><p><img src="F:\zzz\react\react全家桶资料\02_原理图\react生命周期(旧" alt="react生命周期(旧)">.png)</p><h3 id="vue-旧生命周期"><a href="#vue-旧生命周期" class="headerlink" title="vue  旧生命周期"></a>vue  旧生命周期</h3><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="Vue 实例生命周期"></p><h3 id="react新生命周期"><a href="#react新生命周期" class="headerlink" title="react新生命周期"></a>react新生命周期</h3><p><img src="F:\zzz\react\react全家桶资料\02_原理图\react生命周期(新" alt="react生命周期(新)">.png)</p><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*以下三个与之前相比需加上  UNSAVE_ 前缀*/</span></div><div class="line">UNSAVE_componentWillMount() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Demo-componentWillMount'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">UNSAVE_componentWillUnmount() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Demo-componentWillUnmount'</span>);</div><div class="line">&#125;</div><div class="line">UNSAVE_componentWillReceiveProps(props) &#123;</div><div class="line">    <span class="built_in">console</span>.log(props);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'DemoChild2-componentWillReciveProps'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*新增两个生命周期*/</span></div><div class="line"><span class="comment">//报错 getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.</span></div><div class="line"><span class="comment">//不能这样用</span></div><div class="line">getDerivedStateFromProps() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Demo-getDeivedPropForms'</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//应该这样用</span></div><div class="line"><span class="comment">//需要返回一个状态对象或者null</span></div><div class="line"><span class="comment">//可以接收props</span></div><div class="line"><span class="keyword">static</span> getDerivedStateFromProps(props) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Demo-getDeivedPropForms'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//更新之前获取快照 返回值作为参数返回给 componentDidUpdate, 可以用来传递参数</span></div><div class="line">getSnapshotBeforeUpdate() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Demo-getSnpshotBeforeUpdate'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//preProps props</span></div><div class="line"><span class="comment">//preState state</span></div><div class="line"><span class="comment">//snapshot getSnapshotBeforeUpdate返回值</span></div><div class="line">componentDidUpdate(preProps, preState, snapshot) &#123;</div><div class="line">    <span class="built_in">console</span>.log(preProps, preState, snapshot);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Demo-componentDidUpdate'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*弃用一个*/</span></div><div class="line">componentWillUpdate() &#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;旧生命周期&quot;&gt;&lt;a href=&quot;#旧生命周期&quot; class=&quot;headerlink&quot; title=&quot;旧生命周期&quot;&gt;&lt;/a&gt;旧生命周期&lt;/h3&gt;&lt;h3 id=&quot;react旧生命周期&quot;&gt;&lt;a href=&quot;#react旧生命周期&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="reactreact旧生命周期" scheme="http://yoursite.com/tags/reactreact旧生命周期/"/>
    
  </entry>
  
  <entry>
    <title>js函数柯里化</title>
    <link href="http://yoursite.com/2021/04/23/js/js%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    <id>http://yoursite.com/2021/04/23/js/js%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/</id>
    <published>2021-04-23T02:42:25.000Z</published>
    <updated>2021-04-23T03:16:05.201Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><h4 id="函数调用继续返回函数，实现多次接收参数最后统一处理"><a href="#函数调用继续返回函数，实现多次接收参数最后统一处理" class="headerlink" title="函数调用继续返回函数，实现多次接收参数最后统一处理"></a>函数调用继续返回函数，实现多次接收参数最后统一处理</h4><h4 id="只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数"><a href="#只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数" class="headerlink" title="只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数"></a>只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数</h4><p>简单的柯里化函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">b</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> a + b + c</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)); <span class="comment">//6</span></div></pre></td></tr></table></figure><p>应用：</p><p>react中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">saveFormData = <span class="function">(<span class="params">dataType</span>) =&gt;</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">this</span>.setState(&#123;[dataType]: event.target.value&#125;)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"><span class="comment">//react 默认传递参数event 即实际调用为 this.saveFormData('username')（event）</span></div><div class="line"><span class="comment">//onChange 需要函数作为调用，saveFormData('username') 返回的是一个函数</span></div><div class="line">render() &#123;</div><div class="line"><span class="keyword">return</span> (</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> </span></span></div><div class="line"><span class="attr">type</span>=<span class="string">'text'</span> </div><div class="line"><span class="attr">name</span>=<span class="string">'username'</span></div><div class="line"><span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>'<span class="attr">username</span>')&#125;&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">input</span>&gt;</span></div><div class="line">)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>数组排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* @function 指定数组排序规则</div><div class="line">* @param str &#123;string?&#125; 单个属性，不确定个数</div><div class="line">* @param num &#123;Number?&#125; 是否升序 默认降序</div><div class="line">* @version 1.0.0</div><div class="line">* @description 针对特殊业务需求，用于图表的排序</div><div class="line">*/</div><div class="line">sortBy() &#123;</div><div class="line">    <span class="keyword">let</span> num = <span class="number">1</span></div><div class="line">    <span class="keyword">let</span> arr = []</div><div class="line">    <span class="comment">//最后一个参数是数字</span></div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">arguments</span>[<span class="built_in">arguments</span>.length - <span class="number">1</span>] === <span class="string">'number'</span> &amp;&amp;              !<span class="built_in">isNaN</span>(<span class="built_in">arguments</span>[<span class="built_in">arguments</span>.length - <span class="number">1</span>])) &#123;</div><div class="line">        <span class="comment">//获取最后一个参数的值</span></div><div class="line">        num = <span class="built_in">arguments</span>[<span class="built_in">arguments</span>.length - <span class="number">1</span>] ? <span class="number">1</span> : <span class="number">-1</span></div><div class="line">        arr = <span class="built_in">arguments</span>.slice(<span class="number">0</span>, <span class="built_in">arguments</span>.length - <span class="number">1</span>)</div><div class="line">    &#125;<span class="keyword">else</span> &#123;<span class="comment">//最后一个参数不是数字</span></div><div class="line">        arr = <span class="built_in">arguments</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// num = num ? 1 : -1</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="comment">// 获取其他参数的值</span></div><div class="line">        <span class="keyword">let</span> a1 = <span class="number">0</span></div><div class="line">        <span class="keyword">let</span> b1 = <span class="number">0</span></div><div class="line">        <span class="comment">//这里 a[arr[i]] 后端返回的值确定是number</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len =  arr.length; i &lt; len; i++) &#123;</div><div class="line">            a1 += a[arr[i]]</div><div class="line">            b1 += b[arr[i]]</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(a1 &gt; b1)&#123;</div><div class="line">            <span class="keyword">return</span> num * <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(a1 &lt; b1)&#123;</div><div class="line">            <span class="keyword">return</span> num * <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用</span></div><div class="line">data.sort(<span class="keyword">this</span>.sortBy(<span class="string">'isLeader'</span>, <span class="string">'isNotLeader'</span>))</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;函数柯里化&quot;&gt;&lt;a href=&quot;#函数柯里化&quot; class=&quot;headerlink&quot; title=&quot;函数柯里化&quot;&gt;&lt;/a&gt;函数柯里化&lt;/h3&gt;&lt;h4 id=&quot;函数调用继续返回函数，实现多次接收参数最后统一处理&quot;&gt;&lt;a href=&quot;#函数调用继续返回函数，实现多次接</summary>
      
    
    
    
    
    <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>scss中deep</title>
    <link href="http://yoursite.com/2021/04/20/css/scss%E4%B8%ADdeep/"/>
    <id>http://yoursite.com/2021/04/20/css/scss%E4%B8%ADdeep/</id>
    <published>2021-04-20T02:29:18.000Z</published>
    <updated>2021-04-20T02:44:20.362Z</updated>
    
    <content type="html"><![CDATA[<p>vue中有的组件是挂载到全局，查看时与app同级，这时的组件样式更改不能在vue文件中的scope中更改，因为无法读取到。</p><p>同时使用deep有三种运算符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; =&gt; 如果你希望 scoped 样式中的一个选择器能够作用得“更深”，例如影响子组件，你可以使用 &gt;&gt;&gt; 操作符：</div><div class="line">        有些像 Sass 之类的预处理器无法正确解析 &gt;&gt;&gt;。这种情况下你可以使用 /deep/ 或 ::v-deep 操作符取而代之——两者都是 &gt;&gt;&gt; 的别名，同样可以正常工作</div><div class="line"></div><div class="line">/deep/ =&gt; 在scss中有时不能正确编译</div><div class="line"></div><div class="line">::v-deep =&gt; 与/deep/用法一致，听说比/deep/快</div><div class="line">::v-deep .MySteps &#123;</div><div class="line">        width: 50% !important;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vue中有的组件是挂载到全局，查看时与app同级，这时的组件样式更改不能在vue文件中的scope中更改，因为无法读取到。&lt;/p&gt;
&lt;p&gt;同时使用deep有三种运算符&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    
    <category term="scss" scheme="http://yoursite.com/tags/scss/"/>
    
  </entry>
  
  <entry>
    <title>vue3踩坑记录</title>
    <link href="http://yoursite.com/2021/04/19/vue3/vue3%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2021/04/19/vue3/vue3%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2021-04-19T11:03:16.000Z</published>
    <updated>2021-04-20T03:51:02.436Z</updated>
    
    <content type="html"><![CDATA[<h2 id="报错：Error-vue-composition-api-must-call-Vue-use-VueCompositionAPI-before-using-any-function"><a href="#报错：Error-vue-composition-api-must-call-Vue-use-VueCompositionAPI-before-using-any-function" class="headerlink" title="报错：Error: [vue-composition-api] must call Vue.use(VueCompositionAPI) before using any function."></a>报错：Error: [vue-composition-api] must call Vue.use(VueCompositionAPI) before using any function.</h2><h3 id="原因：composition-api-需要安装并引入使用"><a href="#原因：composition-api-需要安装并引入使用" class="headerlink" title="原因：composition-api 需要安装并引入使用"></a>原因：composition-api 需要安装并引入使用</h3><h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install @vue/composition-api --save</div><div class="line"><span class="keyword">import</span> VueCompositionApi <span class="keyword">from</span> <span class="string">'@vue/composition-api'</span></div><div class="line">Vue.use(VueCompositionApi)</div></pre></td></tr></table></figure><h2 id="报错：TypeError-Cannot-read-property-‘util’-of-undefined"><a href="#报错：TypeError-Cannot-read-property-‘util’-of-undefined" class="headerlink" title="报错：TypeError: Cannot read property ‘util’ of undefined"></a>报错：TypeError: Cannot read property ‘util’ of undefined</h2><h3 id="原因：import-defineComponent-from-‘-vue-composition-api’，-这是2-0-3-0的过度版本的脚手架创建的"><a href="#原因：import-defineComponent-from-‘-vue-composition-api’，-这是2-0-3-0的过度版本的脚手架创建的" class="headerlink" title="原因：import { defineComponent } from ‘@vue/composition-api’， 这是2.0-3.0的过度版本的脚手架创建的"></a>原因：import { defineComponent } from ‘@vue/composition-api’， 这是2.0-3.0的过度版本的脚手架创建的</h3><h3 id="解决：升级vue-cli至最新版本"><a href="#解决：升级vue-cli至最新版本" class="headerlink" title="解决：升级vue-cli至最新版本"></a>解决：升级vue-cli至最新版本</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm uninstall vue-cli -g</div><div class="line">npm i @vue/cli -g</div><div class="line">vue --version</div></pre></td></tr></table></figure><h2 id="获取-ctx-（vue2中的this对象-）"><a href="#获取-ctx-（vue2中的this对象-）" class="headerlink" title="获取 ctx （vue2中的this对象 ）"></a>获取 ctx （vue2中的this对象 ）</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; getCurrentInstance&#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> &#123; ctx &#125;:<span class="built_in">any</span> = getCurrentInstance()</div></pre></td></tr></table></figure><h4 id="此时会报错-Property-‘ctx’-does-not-exist-on-type-‘ComponentInternalInstance’"><a href="#此时会报错-Property-‘ctx’-does-not-exist-on-type-‘ComponentInternalInstance’" class="headerlink" title="此时会报错   Property ‘ctx’ does not exist on type ‘ComponentInternalInstance’."></a>此时会报错   Property ‘ctx’ does not exist on type ‘ComponentInternalInstance’.</h4><p>此时使用：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// @ts-ignore</span></div><div class="line"><span class="keyword">const</span> &#123; ctx &#125;:<span class="built_in">any</span> = getCurrentInstance()</div><div class="line"></div><div class="line"><span class="comment">//并关闭ts严格模式</span></div><div class="line"><span class="string">"strict"</span>: <span class="literal">false</span>,</div></pre></td></tr></table></figure><h4 id="会报错：Do-not-use-“-ts-ignore”-because-it-alters-compilation-errors-typescript-eslint-ban-ts-comment"><a href="#会报错：Do-not-use-“-ts-ignore”-because-it-alters-compilation-errors-typescript-eslint-ban-ts-comment" class="headerlink" title="会报错：Do not use “@ts-ignore” because it alters compilation errors  @typescript-eslint/ban-ts-comment"></a>会报错：Do not use “@ts-ignore” because it alters compilation errors  @typescript-eslint/ban-ts-comment</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这是eslint语法检查报错</span></div><div class="line"><span class="comment">//可以将 vue.config.js 中的  lintOnSave: false 注释掉</span></div><div class="line"><span class="comment">//lintOnSave: false,</span></div></pre></td></tr></table></figure><h4 id="终极方案-anyScript"><a href="#终极方案-anyScript" class="headerlink" title="终极方案:anyScript"></a>终极方案:anyScript</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; ctx &#125;:<span class="built_in">any</span> = getCurrentInstance()</div><div class="line"></div><div class="line"><span class="comment">//注意 以下是不行的,因为eslint语法会覆盖ts语法,以下为eslint重命名语法</span></div><div class="line"><span class="keyword">const</span> &#123; ctx:<span class="built_in">any</span>  &#125;= getCurrentInstance()</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;报错：Error-vue-composition-api-must-call-Vue-use-VueCompositionAPI-before-using-any-function&quot;&gt;&lt;a href=&quot;#报错：Error-vue-composition-api-m</summary>
      
    
    
    
    
    <category term="vue3" scheme="http://yoursite.com/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>vue3路由</title>
    <link href="http://yoursite.com/2021/04/17/vue3/vue3%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2021/04/17/vue3/vue3%E8%B7%AF%E7%94%B1/</id>
    <published>2021-04-17T09:45:39.000Z</published>
    <updated>2021-04-17T12:40:14.058Z</updated>
    
    <content type="html"><![CDATA[<h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><p>跟着公司大佬学习3.0前端路由配置</p><p><em>在定义文件时不要使用router后缀否则会无法加载router-view</em></p><h4 id="入口文件-index-ts"><a href="#入口文件-index-ts" class="headerlink" title="入口文件  index.ts"></a>入口文件  index.ts</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory, RouteRecordRaw &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></div><div class="line"><span class="keyword">import</span> &#123; staticRouters &#125; <span class="keyword">from</span> <span class="string">'./staticRouters'</span>;</div><div class="line"><span class="keyword">import</span> defaultRouters <span class="keyword">from</span> <span class="string">'./defaultRouters'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> routes: <span class="built_in">any</span> = staticRouters.concat(defaultRouters);</div><div class="line"></div><div class="line"><span class="keyword">const</span> router = createRouter(&#123;</div><div class="line">    history: createWebHistory(process.env.BASE_URL),</div><div class="line">    routes</div><div class="line">&#125;)</div><div class="line"></div><div class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// let userInfo = localStorage.getItem('user');</span></div><div class="line">    <span class="keyword">const</span> userInfo = <span class="string">"xxxxxxx"</span>;</div><div class="line">    <span class="keyword">if</span> (to.path === <span class="string">"/login"</span>) &#123;</div><div class="line">        next();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (userInfo) &#123;</div><div class="line">            next();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            next(&#123;</div><div class="line">                path: <span class="string">'/login'</span></div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;路由配置&quot;&gt;&lt;a href=&quot;#路由配置&quot; class=&quot;headerlink&quot; title=&quot;路由配置&quot;&gt;&lt;/a&gt;路由配置&lt;/h3&gt;&lt;p&gt;跟着公司大佬学习3.0前端路由配置&lt;/p&gt;
&lt;p&gt;&lt;em&gt;在定义文件时不要使用router后缀否则会无法加载router-v</summary>
      
    
    
    
    
    <category term="vue3" scheme="http://yoursite.com/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>vue-el限制输入</title>
    <link href="http://yoursite.com/2021/04/13/elementUI/vue-el%E9%99%90%E5%88%B6%E8%BE%93%E5%85%A5/"/>
    <id>http://yoursite.com/2021/04/13/elementUI/vue-el%E9%99%90%E5%88%B6%E8%BE%93%E5%85%A5/</id>
    <published>2021-04-13T06:26:35.000Z</published>
    <updated>2021-04-13T06:29:53.212Z</updated>
    
    <content type="html"><![CDATA[<h3 id="oninput限制输入"><a href="#oninput限制输入" class="headerlink" title="oninput限制输入"></a>oninput限制输入</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;el-input v-model='num'</div><div class="line">oninput="if(/^[0-9]*$/.test(value) == false) &#123; value = null &#125;</div><div class="line">                   if(value &lt; 0)&#123;value=0&#125;</div><div class="line">                   if(value &gt; 100)&#123;value=100&#125;</div><div class="line">                   if(value&gt; 0 &amp;&amp; value &lt; 100) &#123;value=value.replace(/[^\d]/g,'')&#125;" &gt;&lt;/el-input&gt;</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;oninput限制输入&quot;&gt;&lt;a href=&quot;#oninput限制输入&quot; class=&quot;headerlink&quot; title=&quot;oninput限制输入&quot;&gt;&lt;/a&gt;oninput限制输入&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;</summary>
      
    
    
    
    
    <category term="vue-el踩坑" scheme="http://yoursite.com/tags/vue-el踩坑/"/>
    
  </entry>
  
  <entry>
    <title>vue路由模式</title>
    <link href="http://yoursite.com/2021/04/08/elementUI/vue%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2021/04/08/elementUI/vue%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-04-08T09:39:47.000Z</published>
    <updated>2021-04-08T10:12:39.977Z</updated>
    
    <content type="html"><![CDATA[<h3 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h3><p>今天使用路由跳转时始终访问不到指定页面</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const href = `/informationAudit/intoInfoAudit?id=` + id;</div><div class="line">window.open(href, "_blank");</div><div class="line"></div><div class="line">//点击后路由跳转</div><div class="line">/informationAudit/intoInfoAudit?id=undefined#/dashboard</div></pre></td></tr></table></figure><p>后来发现路由模式不对</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createRouter = <span class="function"><span class="params">()</span> =&gt;</span></div><div class="line">  <span class="keyword">new</span> Router(&#123;</div><div class="line">    <span class="comment">//不应该注释</span></div><div class="line">    <span class="comment">//mode: 'history', // 路由模式</span></div><div class="line">    scrollBehavior: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">y</span>: <span class="number">0</span> &#125;),</div><div class="line">    <span class="attr">isAdd</span>: <span class="literal">false</span>, <span class="comment">//是否已经添加动态(菜单)路由</span></div><div class="line">    routes: constantRoutes,</div><div class="line">    <span class="attr">base</span>: <span class="string">'/icostviews/'</span></div><div class="line">  &#125;);</div></pre></td></tr></table></figure><p>vue-router有两种模式：</p><p>hash（默认）：</p><p>1、使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载</p><p>2、url带有<em>#</em></p><p>3、前端路由修改的是#中的信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//如果直接输入页面会跳转</div><div class="line">/informationAudit/intoInfoAudit?id=undefined#/supplierManagement/informationAudit</div></pre></td></tr></table></figure><p>history：</p><p>1、这种模式充分利用 <code>history.pushState</code> API 来完成 URL 跳转而无须重新加载页面。</p><p>2、使用history 模式时，URL 就像正常的 url</p><p>3、需要后台配置支持，刷新会请求服务器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;路由模式&quot;&gt;&lt;a href=&quot;#路由模式&quot; class=&quot;headerlink&quot; title=&quot;路由模式&quot;&gt;&lt;/a&gt;路由模式&lt;/h3&gt;&lt;p&gt;今天使用路由跳转时始终访问不到指定页面&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    
    <category term="vue-Router" scheme="http://yoursite.com/tags/vue-Router/"/>
    
  </entry>
  
  <entry>
    <title>js正则</title>
    <link href="http://yoursite.com/2021/04/07/js/js%E6%AD%A3%E5%88%99/"/>
    <id>http://yoursite.com/2021/04/07/js/js%E6%AD%A3%E5%88%99/</id>
    <published>2021-04-07T08:00:57.000Z</published>
    <updated>2021-04-07T08:07:54.509Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><h4 id="常用元字符串"><a href="#常用元字符串" class="headerlink" title="常用元字符串"></a>常用元字符串</h4><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线</td></tr><tr><td>\W</td><td>匹配任意不是字母，数字，下划线</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>.</td><td>匹配除换行符以外的任意单个字符</td></tr><tr><td>^</td><td>表示匹配行首的文本(以谁开始)</td></tr><tr><td>$</td><td>表示匹配行尾的文本(以谁结束)</td></tr></tbody></table><h4 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h4><table><thead><tr><th>限定符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[] 字符串用中括号括起来，表示匹配其中的任一字符，相当于或的意思</div><div class="line">[^]  匹配除中括号以内的内容</div><div class="line">\ 转义符</div><div class="line">| 或者，选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱</div><div class="line">() 从两个直接量中选择一个，分组</div><div class="line">   eg：gr(a|e)y匹配gray和grey</div><div class="line">[\u4e00-\u9fa5]  匹配汉字</div></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//提取邮件中的每一部分</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">'xxxx@itcast.com'</span>;</div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w+)@(\w+)\.(\w+)/</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>); <span class="comment">//RegExp() &#123; [native code] &#125;</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>); <span class="comment">//xxxx</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>); <span class="comment">//itcast</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">3</span>); <span class="comment">//com</span></div><div class="line"></div><div class="line"><span class="comment">//为什么  RegExp.$1 有值</span></div><div class="line"><span class="comment">//参考：https://blog.csdn.net/qq_42423964/article/details/102385983</span></div><div class="line"></div><div class="line"><span class="built_in">RegExp</span> 是javascript中的一个内置对象。为正则表达式。</div><div class="line"></div><div class="line"><span class="built_in">RegExp</span>.$<span class="number">1</span>是<span class="built_in">RegExp</span>的一个属性,指的是与正则表达式匹配的第一个 子匹配(以括号为标志)字符串，以此类推，<span class="built_in">RegExp</span>.$<span class="number">2</span>，<span class="built_in">RegExp</span>.$<span class="number">3</span>，..RegExp.$<span class="number">99</span>总共可以有<span class="number">99</span>个匹配</div><div class="line"></div><div class="line">如果你直接在控制台打印<span class="built_in">RegExp</span>, 出现的一定是一个空字符串: <span class="string">""</span>。那么, 我们在什么时候可以使用<span class="built_in">RegExp</span>.$<span class="number">1</span>呢?</div><div class="line"></div><div class="line"><span class="comment">//其实RegExp这个对象会在我们调用了正则表达式的方法后, 自动将最近一次的结果保存在里面, 所以如果我们在使用正则表达式时, 有用到分组, 那么就可以直接在调用完以后直接使用RegExp.$xx来使用捕获到的分组内容</span></div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;正则&quot;&gt;&lt;a href=&quot;#正则&quot; class=&quot;headerlink&quot; title=&quot;正则&quot;&gt;&lt;/a&gt;正则&lt;/h3&gt;&lt;h4 id=&quot;常用元字符串&quot;&gt;&lt;a href=&quot;#常用元字符串&quot; class=&quot;headerlink&quot; title=&quot;常用元字符串&quot;&gt;&lt;/a&gt;常</summary>
      
    
    
    
    
    <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js对象方法</title>
    <link href="http://yoursite.com/2021/04/07/js/js%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2021/04/07/js/js%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/</id>
    <published>2021-04-07T07:41:27.000Z</published>
    <updated>2021-04-07T07:42:00.717Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对象深拷贝"><a href="#对象深拷贝" class="headerlink" title="对象深拷贝"></a>对象深拷贝</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 深拷贝  把o1的成员拷贝给o2</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">o1, o2</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> o1) &#123;</div><div class="line">    <span class="comment">// 获取key属性对应的值</span></div><div class="line">    <span class="keyword">var</span> item = o1[key];</div><div class="line"></div><div class="line">    <span class="comment">// 如果item 是对象？</span></div><div class="line">    <span class="comment">// var o = &#123;&#125;</span></div><div class="line">    <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</div><div class="line">      <span class="comment">// var o = &#123;&#125;;</span></div><div class="line">      o2[key] = &#123;&#125;; </div><div class="line">      deepCopy(item, o2[key]);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</div><div class="line">      <span class="comment">// 如果item 是数组呢？</span></div><div class="line">      <span class="comment">// var arr = [];</span></div><div class="line">      o2[key] = [];</div><div class="line">      deepCopy(item, o2[key]);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 如果是简单类型</span></div><div class="line">      o2[key] = o1[key];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;对象深拷贝&quot;&gt;&lt;a href=&quot;#对象深拷贝&quot; class=&quot;headerlink&quot; title=&quot;对象深拷贝&quot;&gt;&lt;/a&gt;对象深拷贝&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    
    <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>el-table自定义排序</title>
    <link href="http://yoursite.com/2021/04/06/elementUI/el-table%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2021/04/06/elementUI/el-table%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/</id>
    <published>2021-04-06T02:38:57.000Z</published>
    <updated>2021-04-06T03:12:24.493Z</updated>
    
    <content type="html"><![CDATA[<h3 id="表格自定义排序"><a href="#表格自定义排序" class="headerlink" title="表格自定义排序"></a>表格自定义排序</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">el-table</span></span></div><div class="line"><span class="attr">ref</span>=<span class="string">"tableCot"</span></div><div class="line"><span class="attr">:data</span>=<span class="string">"tableData"</span></div><div class="line"><span class="attr">:default-sort</span> = <span class="string">"&#123;prop: 'projectNo', order: 'descending'&#125;"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">el-table-column</span></span></div><div class="line">     <span class="attr">align</span>=<span class="string">"center"</span></div><div class="line">     <span class="attr">:show-overflow-tooltip</span>=<span class="string">"true"</span></div><div class="line">     <span class="attr">prop</span>=<span class="string">"projectNo"</span></div><div class="line">     <span class="attr">label</span>=<span class="string">"项目编号"</span></div><div class="line">     <span class="attr">:sortable</span>=<span class="string">"true"</span></div><div class="line">     <span class="attr">:sort-method</span>=<span class="string">"sortby"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span>             </div><div class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//可以先看看a，b的内容</span></div><div class="line">sortby(a, b) &#123;</div><div class="line">    <span class="keyword">let</span> x = <span class="built_in">parseInt</span>(a.projectNo.substring(<span class="number">19</span>))</div><div class="line">    <span class="keyword">let</span> y = <span class="built_in">parseInt</span>(b.projectNo.substring(<span class="number">19</span>))</div><div class="line">    <span class="keyword">return</span> x &gt; y ? <span class="number">-1</span> : <span class="number">1</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;表格自定义排序&quot;&gt;&lt;a href=&quot;#表格自定义排序&quot; class=&quot;headerlink&quot; title=&quot;表格自定义排序&quot;&gt;&lt;/a&gt;表格自定义排序&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    
    <category term="Element UI" scheme="http://yoursite.com/tags/Element-UI/"/>
    
  </entry>
  
  <entry>
    <title>vue3新特性-使用</title>
    <link href="http://yoursite.com/2021/03/31/vue3/vue3%E6%96%B0%E7%89%B9%E6%80%A7-%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2021/03/31/vue3/vue3%E6%96%B0%E7%89%B9%E6%80%A7-%E4%BD%BF%E7%94%A8/</id>
    <published>2021-03-31T09:32:34.000Z</published>
    <updated>2021-04-01T14:25:12.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><ul><li>新的option, 所有的组合API函数都在此使用, 只在初始化时执行一次</li><li>函数如果返回对象, 对象中的属性或方法, 模板中可以直接使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//理解：将2.0中data 和 methods 统一,必须通过 return 返回才可以使用</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;defineComponent&#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line"><span class="comment">//暴露一个定义好的组件</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'App'</span>,</div><div class="line">    setup() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ul><li>作用: 定义一个数据的响应式</li><li>语法: const xxx = ref(initValue):<ul><li>创建一个包含响应式数据的引用(reference)对象</li><li>js中操作数据: xxx.value</li><li>模板中操作数据: 不需要.value</li></ul></li><li>一般用来定义一个基本类型的响应式数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"updateCount"</span>&gt;</span>更新数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;defineComponent, ref&#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line">setup()&#123;</div><div class="line">  <span class="comment">// console.log('第一次')</span></div><div class="line">  <span class="comment">// 变量</span></div><div class="line">  <span class="comment">// let count = 0 // 此时的数据并不是响应式的数据(响应式数据:数据变化,页面跟着渲染变化)</span></div><div class="line">  <span class="comment">// ref是一个函数,作用:定义一个响应式的数据,返回的是一个Ref对象,对象中有一个value属性,如果需要对数据进行操作,需要使用该Ref对象调用value属性的方式进行数据的操作</span></div><div class="line">  <span class="comment">// html模版中是不需要使用.value属性的写法</span></div><div class="line">  <span class="comment">// 一般用来定义一个基本类型的响应式数据</span></div><div class="line">  <span class="comment">// count 的类型 Ref类型</span></div><div class="line">    <span class="comment">//count.value = 0</span></div><div class="line">  <span class="keyword">const</span> count = ref(<span class="number">0</span>)</div><div class="line">  <span class="built_in">console</span>.log(count)</div><div class="line">  <span class="comment">// 方法</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">updateCount</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'====='</span>)</div><div class="line">    <span class="comment">// 报错的原因:count是一个Ref对象,对象是不能进行++的操作</span></div><div class="line">    <span class="comment">// count++</span></div><div class="line">    count.value++</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 返回的是一个对象</span></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="comment">// 属性</span></div><div class="line">    count,</div><div class="line">    <span class="comment">// 方法</span></div><div class="line">    updateCount</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h3><ul><li>作用: 定义多个数据的响应式</li><li>const proxy = reactive(obj): 接收一个普通对象然后返回该普通对象的响应式代理器对象</li><li>响应式转换是“深层的”：会影响对象内部所有嵌套的属性</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据都是响应式的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//目标对象</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'小明'</span>,</div><div class="line">      <span class="attr">age</span>: <span class="number">20</span>,</div><div class="line">      <span class="attr">wife</span>: &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'小甜甜'</span>,</div><div class="line">        <span class="attr">age</span>: <span class="number">18</span>,</div><div class="line">        <span class="attr">cars</span>: [<span class="string">'奔驰'</span>, <span class="string">'宝马'</span>, <span class="string">'奥迪'</span>],</div><div class="line">      &#125;,</div><div class="line">    &#125;</div><div class="line"><span class="comment">//代理对象</span></div><div class="line"><span class="keyword">const</span> user = reactive&lt;any&gt;(obj)</div><div class="line"><span class="keyword">const</span> updateUser = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="comment">// 直接使用目标对象的方式来更新目标对象中的成员的值,是不可能的,只能使用代理对象的方式来更新数据(响应式数据)</span></div><div class="line">      <span class="comment">// obj.name += '==='</span></div><div class="line">      <span class="comment">// 通过当前的代理对象把目标对象中的某个数组属性添加一个新的属性</span></div><div class="line">      user.name += <span class="string">'==='</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 总结: 如果操作代理对象,目标对象中的数据也会随之变化,同时如果想要在操作数据的时候,界面也要跟着重新更新渲染,那么也是操作代理对象</span></div><div class="line"><span class="comment">//操作目标对象,目标对象中的数据会随之变化,但不会重新渲染</span></div></pre></td></tr></table></figure><h3 id="computed-和-watch"><a href="#computed-和-watch" class="headerlink" title="computed  和  watch"></a>computed  和  watch</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//computed 和 watch 也放入setup之中</span></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  defineComponent,</div><div class="line">  reactive,</div><div class="line">  computed,</div><div class="line">  watch,</div><div class="line">  ref,</div><div class="line">  watchEffect,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'App'</span>,</div><div class="line">  setup() &#123;</div><div class="line">    <span class="comment">// 定义一个响应式对象</span></div><div class="line">    <span class="keyword">const</span> user = reactive(&#123;</div><div class="line">      <span class="comment">// 姓氏</span></div><div class="line">      firstName: <span class="string">'东方'</span>,</div><div class="line">      <span class="comment">// 名字</span></div><div class="line">      lastName: <span class="string">'不败'</span>,</div><div class="line">    &#125;)</div><div class="line">    <span class="comment">// 通过计算属性的方式,实现第一个姓名的显示</span></div><div class="line">    <span class="comment">// vue3中的计算属性</span></div><div class="line">    <span class="comment">// 计算属性的函数中如果只传入一个回调函数,表示的是get</span></div><div class="line"></div><div class="line">    <span class="comment">// 第一个姓名:</span></div><div class="line">    <span class="comment">// 返回的是一个Ref类型的对象</span></div><div class="line">    <span class="keyword">const</span> fullName1 = computed(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> user.firstName + <span class="string">'_'</span> + user.lastName</div><div class="line">    &#125;)</div><div class="line">    <span class="comment">// 第二个姓名:</span></div><div class="line">    <span class="keyword">const</span> fullName2 = computed(&#123;</div><div class="line">      get() &#123;</div><div class="line">        <span class="keyword">return</span> user.firstName + <span class="string">'_'</span> + user.lastName</div><div class="line">      &#125;,</div><div class="line">      set(val: string) &#123;</div><div class="line">        <span class="comment">// console.log('=====',val)</span></div><div class="line">        <span class="keyword">const</span> names = val.split(<span class="string">'_'</span>)</div><div class="line">        user.firstName = names[<span class="number">0</span>]</div><div class="line">        user.lastName = names[<span class="number">1</span>]</div><div class="line">      &#125;,</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">// 第三个姓名:</span></div><div class="line">    <span class="keyword">const</span> fullName3 = ref(<span class="string">''</span>)</div><div class="line">    <span class="comment">// 监视----监视指定的数据</span></div><div class="line">    watch(</div><div class="line">      user,</div><div class="line">      (&#123; firstName, lastName &#125;) =&gt; &#123;</div><div class="line">        fullName3.value = firstName + <span class="string">'_'</span> + lastName</div><div class="line">      &#125;,</div><div class="line">      &#123; <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="attr">deep</span>: <span class="literal">true</span> &#125;</div><div class="line">    )</div><div class="line">    <span class="comment">// immediate 默认会执行一次watch,deep 深度监视</span></div><div class="line"></div><div class="line">    <span class="comment">// 监视,不需要配置immediate,本身默认就会进行监视,(默认执行一次)</span></div><div class="line">    <span class="comment">// watchEffect(() =&gt; &#123;</span></div><div class="line">    <span class="comment">//   fullName3.value = user.firstName + '_' + user.lastName</span></div><div class="line">    <span class="comment">// &#125;)</span></div><div class="line"></div><div class="line">    <span class="comment">// 监视fullName3的数据,改变firstName和lastName</span></div><div class="line">    watchEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">const</span> names = fullName3.value.split(<span class="string">'_'</span>)</div><div class="line">      user.firstName = names[<span class="number">0</span>]</div><div class="line">      user.lastName = names[<span class="number">1</span>]</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">// watch---可以监视多个数据的</span></div><div class="line">    <span class="comment">// watch([user.firstName,user.lastName,fullName3],()=&gt;&#123;</span></div><div class="line">    <span class="comment">//   // 这里的代码就没有执行,fullName3是响应式的数据,但是,user.firstName,user.lastName不是响应式的数据</span></div><div class="line">    <span class="comment">//   console.log('====')</span></div><div class="line">    <span class="comment">// &#125;)</span></div><div class="line">    <span class="comment">// 当我们使用watch监视非响应式的数据的时候,代码需要改一下</span></div><div class="line">    watch([<span class="function"><span class="params">()</span>=&gt;</span>user.firstName, ()=&gt;user.lastName,fullName3], () =&gt; &#123;</div><div class="line">      <span class="comment">// 这里的代码就没有执行,fullName3是响应式的数据,但是,user.firstName,user.lastName不是响应式的数据</span></div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'===='</span>)</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      user,</div><div class="line">      fullName1,</div><div class="line">      fullName2,</div><div class="line">      fullName3,</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>3.0中的生命周期都变成了组合api</p><p>3.0中的执行都比2.0中的快</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">beforeCreate -&gt; 使用 setup()</div><div class="line">created -&gt; 使用 setup()</div><div class="line">beforeMount -&gt; onBeforeMount</div><div class="line">mounted -&gt; onMounted</div><div class="line">beforeUpdate -&gt; onBeforeUpdate</div><div class="line">updated -&gt; onUpdated</div><div class="line">beforeDestroy -&gt; onBeforeUnmount</div><div class="line">destroyed -&gt; onUnmounted</div><div class="line">errorCaptured -&gt; onErrorCaptured</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;setup&quot;&gt;&lt;a href=&quot;#setup&quot; class=&quot;headerlink&quot; title=&quot;setup&quot;&gt;&lt;/a&gt;setup&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;新的option, 所有的组合API函数都在此使用, 只在初始化时执行一次&lt;/li&gt;
&lt;li&gt;函数如果返</summary>
      
    
    
    
    
    <category term="Vue3" scheme="http://yoursite.com/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>vue3项目创建</title>
    <link href="http://yoursite.com/2021/03/30/vue3/vue3%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA/"/>
    <id>http://yoursite.com/2021/03/30/vue3/vue3%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA/</id>
    <published>2021-03-30T06:00:49.000Z</published>
    <updated>2021-03-30T06:06:45.652Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://24kcs.github.io/vue3_study/chapter3/02_%E5%88%9B%E5%BB%BAvue3%E9%A1%B9%E7%9B%AE.html#_1-%E4%BD%BF%E7%94%A8-vue-cli-%E5%88%9B%E5%BB%BA" target="_blank" rel="external">https://24kcs.github.io/vue3_study/chapter3/02_%E5%88%9B%E5%BB%BAvue3%E9%A1%B9%E7%9B%AE.html#_1-%E4%BD%BF%E7%94%A8-vue-cli-%E5%88%9B%E5%BB%BA</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考：&lt;a href=&quot;https://24kcs.github.io/vue3_study/chapter3/02_%E5%88%9B%E5%BB%BAvue3%E9%A1%B9%E7%9B%AE.html#_1-%E4%BD%BF%E7%94%A8-vue-cli-%E</summary>
      
    
    
    
    
    <category term="Vue3" scheme="http://yoursite.com/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>ts声明文件和内置对象</title>
    <link href="http://yoursite.com/2021/03/30/TypeScript/ts%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6%E5%92%8C%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2021/03/30/TypeScript/ts%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6%E5%92%8C%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-03-30T01:51:51.000Z</published>
    <updated>2021-03-30T06:00:04.960Z</updated>
    
    <content type="html"><![CDATA[<h3 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h3><p>当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line">当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。</div><div class="line">声明语句: 如果需要ts对新的语法进行检查, 需要要加载了对应的类型说明代码</div><div class="line">  declare var jQuery: (selector: string) =&gt; any;</div><div class="line">声明文件: 把声明语句放到一个单独的文件（jQuery.d.ts）中, ts会自动解析到项目中所有声明文件</div><div class="line">下载声明文件: npm install @types/jquery --save-dev 直接安装声明文件</div><div class="line">*/</div><div class="line"></div><div class="line">jQuery(<span class="string">'#foo'</span>);</div><div class="line"><span class="comment">// ERROR: Cannot find name 'jQuery'.</span></div></pre></td></tr></table></figure><p>一般声明文件都会单独写成一个 <code>xxx.d.ts</code> 文件， TS编译器会扫描并加载项目中所有的TS声明文件</p><p>很多的第三方库都定义了对应的声明文件库, 库文件名一般为 <code>@types/xxx</code>, 可以在 <code>https://www.npmjs.com/package/package</code> 进行搜索，<strong>下载完后可不用手动声明</strong></p><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><p>JavaScript 中有很多内置对象，它们可以直接在 TypeScript 中当做定义好了的类型。</p><p>内置对象是指根据标准在全局作用域（Global）上存在的对象。这里的标准是指 ECMAScript 和其他环境（比如 DOM）的标准。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ECMAScript 的内置对象</span></div><div class="line"><span class="comment">/* 1. ECMAScript 的内置对象 */</span></div><div class="line"><span class="keyword">let</span> b: <span class="built_in">Boolean</span> = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>)</div><div class="line"><span class="keyword">let</span> n: <span class="built_in">Number</span> = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="literal">true</span>)</div><div class="line"><span class="keyword">let</span> s: <span class="built_in">String</span> = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'abc'</span>)</div><div class="line"><span class="keyword">let</span> d: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line"><span class="keyword">let</span> r: <span class="built_in">RegExp</span> = <span class="regexp">/^1/</span></div><div class="line"><span class="keyword">let</span> e: <span class="built_in">Error</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error message'</span>)</div><div class="line">b = <span class="literal">true</span></div><div class="line"><span class="comment">// let bb: boolean = new Boolean(2)  // error</span></div><div class="line"></div><div class="line"><span class="comment">//BOM 和 DOM 的内置对象</span></div><div class="line"><span class="keyword">const</span> div: HTMLElement = <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>)</div><div class="line"><span class="keyword">const</span> divs: NodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>)</div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="function">(<span class="params">event: MouseEvent</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.dir(event.target)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">const</span> fragment: DocumentFragment = <span class="built_in">document</span>.createDocumentFragment()</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;声明文件&quot;&gt;&lt;a href=&quot;#声明文件&quot; class=&quot;headerlink&quot; title=&quot;声明文件&quot;&gt;&lt;/a&gt;声明文件&lt;/h3&gt;&lt;p&gt;当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能&lt;/p&gt;
&lt;figure class=&quot;h</summary>
      
    
    
    
    
    <category term="Ty" scheme="http://yoursite.com/tags/Ty/"/>
    
  </entry>
  
  <entry>
    <title>ts泛型</title>
    <link href="http://yoursite.com/2021/03/29/TypeScript/ts%E6%B3%9B%E5%9E%8B/"/>
    <id>http://yoursite.com/2021/03/29/TypeScript/ts%E6%B3%9B%E5%9E%8B/</id>
    <published>2021-03-29T14:25:11.000Z</published>
    <updated>2021-03-30T01:53:15.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ts泛型"><a href="#ts泛型" class="headerlink" title="ts泛型"></a>ts泛型</h2><p>指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定具体类型的一种特性。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//主要是定义方法时参数类型不确定，使用时参数类型确定，并可以进行参数检查与提示</span></div><div class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 根据指定的数量 count 和数据 value , 创建一个包含 count 个 value 的数组</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getArr</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T, count: <span class="built_in">number</span></span>): <span class="title">T</span>[] </span>&#123;</div><div class="line">        <span class="keyword">const</span> arr: <span class="built_in">Array</span>&lt;T&gt; = []</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">            arr.push(value)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> arr</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> arr1 =getArr&lt;<span class="built_in">string</span>&gt;(<span class="string">"str"</span>, <span class="number">3</span>)</div><div class="line">    <span class="built_in">console</span>.log(arr1) <span class="comment">//["str", "str", "str"]</span></div><div class="line">    </div><div class="line">    <span class="comment">//多个泛型</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getMsg</span>&lt;<span class="title">K</span>, <span class="title">T</span>&gt;(<span class="params">value1: K, value2: T</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> [value1, value2]</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> arr2 = getMsg&lt;<span class="built_in">number</span> , <span class="built_in">string</span>&gt;(<span class="number">1</span>, <span class="string">"zs"</span>)</div><div class="line">    <span class="built_in">console</span>.log(arr2) <span class="comment">//[1, "zs"]</span></div><div class="line">&#125;)()</div></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>在定义接口时, 为接口中的属性或方法定义泛型类型<br>在使用接口时, 再指定具体的泛型类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">interface</span> IbaseCRUD &lt;T&gt; &#123;</div><div class="line">        data: T[]</div><div class="line">        add: <span class="function">(<span class="params">t: T</span>) =&gt;</span> <span class="built_in">void</span></div><div class="line">        getById: <span class="function">(<span class="params">id: <span class="built_in">number</span></span>) =&gt;</span> T</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">class</span> User &#123;</div><div class="line">        id?: <span class="built_in">number</span>; <span class="comment">//id主键自增</span></div><div class="line">        name: <span class="built_in">string</span>; <span class="comment">//姓名</span></div><div class="line">        age: <span class="built_in">number</span>; <span class="comment">//年龄</span></div><div class="line"></div><div class="line">        <span class="keyword">constructor</span> (<span class="params">name, age</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.name = name</div><div class="line">            <span class="keyword">this</span>.age = age</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">class</span> UserCRUD <span class="keyword">implements</span> IbaseCRUD &lt;User&gt; &#123;</div><div class="line">        data: User[] = []</div><div class="line"></div><div class="line">        add(user: User): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="comment">//解构赋值</span></div><div class="line">            user = &#123;...user, id: <span class="built_in">Date</span>.now()&#125;</div><div class="line">            <span class="keyword">this</span>.data.push(user)</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'保存user'</span>, user.id)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        getById(id: <span class="built_in">number</span>): User &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.data.find(<span class="function"><span class="params">item</span> =&gt;</span> item.id===id)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">const</span> userCRUD = <span class="keyword">new</span> UserCRUD()</div><div class="line">    userCRUD.add(<span class="keyword">new</span> User(<span class="string">'tom'</span>, <span class="number">12</span>)) <span class="comment">//保存user 1617067853995</span></div><div class="line">    userCRUD.add(<span class="keyword">new</span> User(<span class="string">'tom2'</span>, <span class="number">13</span>)) <span class="comment">//保存user 1617067894390</span></div><div class="line">    <span class="built_in">console</span>.log(userCRUD.data) <span class="comment">//&#123;name: "tom", age: 12, id: 1617067901231&#125; &#123;name: "tom2", age: 13, id: 1617067901233&#125;</span></div><div class="line">&#125;)()</div></pre></td></tr></table></figure><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>在定义类时, 为类中的属性或方法定义泛型类型 在创建类的实例时, 再指定特定的泛型类型</p><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>如果我们直接对一个泛型参数取 <code>length</code> 属性, 会报错, 因为这个泛型根本就不知道它有这个属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 没有泛型约束</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> &lt;<span class="title">T</span>&gt;(<span class="params">x: T</span>): <span class="title">void</span> </span>&#123;</div><div class="line">  <span class="comment">// console.log(x.length)  // error</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">interface</span> Lengthwise &#123;</div><div class="line">  length: <span class="built_in">number</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 指定泛型约束</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span> &lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">x: T</span>): <span class="title">void</span> </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(x.length)</div><div class="line">&#125;</div><div class="line"></div><div class="line">fn2(<span class="string">'abc'</span>)<span class="comment">// fn2(123) // error  number没有length属性</span></div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ts泛型&quot;&gt;&lt;a href=&quot;#ts泛型&quot; class=&quot;headerlink&quot; title=&quot;ts泛型&quot;&gt;&lt;/a&gt;ts泛型&lt;/h2&gt;&lt;p&gt;指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定具体类型的一种特性。&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    
    <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>ts函数</title>
    <link href="http://yoursite.com/2021/03/29/TypeScript/ts%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2021/03/29/TypeScript/ts%E5%87%BD%E6%95%B0/</id>
    <published>2021-03-29T13:56:06.000Z</published>
    <updated>2021-03-29T14:24:56.887Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ts函数"><a href="#ts函数" class="headerlink" title="ts函数"></a>ts函数</h2><p>实现抽象层，模拟类，信息隐藏和模块</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//我们可以给每个参数添加类型之后再为函数本身添加返回值类型。TypeScript 能够根据返回语句自动推断出返回值类型</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> x + y</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> myAdd = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123; </div><div class="line">  <span class="keyword">return</span> x + y</div><div class="line">&#125;</div><div class="line"><span class="comment">//函数完整写法</span></div><div class="line"><span class="comment">//myAdd2 变量名</span></div><div class="line"><span class="comment">//(x: number, y: number) =&gt; number 函数类型</span></div><div class="line"><span class="comment">//function 函数类型的值</span></div><div class="line"><span class="keyword">let</span> myAdd2: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = </div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> x + y</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h3><p>1、TypeScript 里的每个函数参数都是必须的</p><p>2、这不是指不能传递 <code>null</code> 或 <code>undefined</code> 作为参数，而是说编译器检查用户是否为每个参数都传入了值</p><p>3、传递给一个函数的参数个数必须与函数期望的参数个数一致</p><p>4、JavaScript 里，每个参数都是可选的，可传可不传。 没传参的时候，它的值就是 <code>undefined</code></p><p>5、TypeScript 里可以在参数名旁使用 <code>?</code> 实现可选参数的功能</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function getFullname(firstName: string="zhang", lastName?: string):string &#123;</div><div class="line">    if(lastName) &#123;</div><div class="line">        return firstName + "_" + lastName</div><div class="line">    &#125;</div><div class="line">    return firstName</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(getFullname("zhang", 'san')) //zhang_san</div><div class="line">console.log(getFullname("zhao")) //zhao</div></pre></td></tr></table></figure><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//...args: xxx[] 剩余参数 ， 要放在参数最后</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showStr</span>(<span class="params">str: <span class="built_in">string</span>, ...args: <span class="built_in">string</span>[]</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(str) <span class="comment">//a</span></div><div class="line">    <span class="built_in">console</span>.log(...args) <span class="comment">//b c d</span></div><div class="line">&#125;</div><div class="line">showStr(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</div></pre></td></tr></table></figure><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//感觉用于自己写的工具函数会好一点，不直接涉及用户交互</div><div class="line">//函数重载声明</div><div class="line">function add(x: number, y: number): number</div><div class="line">function add(x: string, y: string): string</div><div class="line"></div><div class="line">function add(x: number | string, y: number | string): number | string &#123;</div><div class="line">    if(typeof x == 'string' &amp;&amp; typeof y == 'string') &#123;</div><div class="line">        return x + y //字符串拼接</div><div class="line">    &#125;else if(typeof x == 'number' &amp;&amp; typeof y == 'number') &#123;</div><div class="line">        return x + y //数字相加</div><div class="line">    &#125;</div><div class="line">    //else &#123;// 其他直接返回一个值  不行？？？</div><div class="line">        //return "can not do it"</div><div class="line">//&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">console.log(add(1 , 2)) //3</div><div class="line">console.log(add("东方" , "不败")) //东方不败</div><div class="line">//未声明重载前</div><div class="line">// console.log(add("东方" , 1)) //undefined</div><div class="line">//声明重载后直接报错</div><div class="line">// console.log(add("东方" , 1))</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ts函数&quot;&gt;&lt;a href=&quot;#ts函数&quot; class=&quot;headerlink&quot; title=&quot;ts函数&quot;&gt;&lt;/a&gt;ts函数&lt;/h2&gt;&lt;p&gt;实现抽象层，模拟类，信息隐藏和模块&lt;/p&gt;
&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;</summary>
      
    
    
    
    
    <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>ts类</title>
    <link href="http://yoursite.com/2021/03/29/TypeScript/ts%E7%B1%BB/"/>
    <id>http://yoursite.com/2021/03/29/TypeScript/ts%E7%B1%BB/</id>
    <published>2021-03-29T08:42:04.000Z</published>
    <updated>2021-03-29T13:55:37.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ts类-（和java基本一样）"><a href="#ts类-（和java基本一样）" class="headerlink" title="ts类  （和java基本一样）"></a>ts类  （和java基本一样）</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">//父类</span></div><div class="line">    <span class="keyword">class</span> Person &#123;</div><div class="line">        name: <span class="built_in">string</span></div><div class="line">        age: <span class="built_in">number</span></div><div class="line">        sex: <span class="built_in">string</span></div><div class="line">        <span class="comment">//可以给默认值</span></div><div class="line">        <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>=1</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.name = name</div><div class="line">            <span class="keyword">this</span>.age = age</div><div class="line">        &#125;</div><div class="line">        say(str:<span class="built_in">string</span>) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"class say no "</span> + <span class="keyword">this</span>.name + <span class="string">" "</span> + str)</div><div class="line">        &#125;</div><div class="line">        run(distance: <span class="built_in">number</span>=<span class="number">10</span>) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" run "</span> + distance)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> person:Person = <span class="keyword">new</span> Person(<span class="string">"zs"</span>)</div><div class="line">    <span class="comment">// Person.prototype.sex = "man"</span></div><div class="line">    <span class="comment">// //person.sex = "man"</span></div><div class="line">    <span class="comment">// console.log(person.sex)  //man</span></div><div class="line">    person.say(<span class="string">'father'</span>) <span class="comment">//class say no zs father</span></div><div class="line">&#125;)()</div></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//子类</span></div><div class="line"><span class="keyword">class</span> CPerson <span class="keyword">extends</span> Person &#123;</div><div class="line">        <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>=1</span>) &#123;</div><div class="line">            <span class="keyword">super</span>(name, age);</div><div class="line">        &#125;</div><div class="line">        say(str:<span class="built_in">string</span>) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"CPerson "</span> + str)</div><div class="line">            <span class="keyword">super</span>.say(<span class="string">'children'</span>)</div><div class="line">        &#125;</div><div class="line">        run(distance: <span class="built_in">number</span>=<span class="number">100</span>) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" run "</span> + distance)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> cp:CPerson = <span class="keyword">new</span> CPerson(<span class="string">"ls"</span>)</div><div class="line">    <span class="comment">// CPerson.prototype.sex = 'woman'</span></div><div class="line">    <span class="comment">// cp.sex = "woman"</span></div><div class="line">    <span class="comment">// console.log(cp.sex) //woman</span></div><div class="line">    cp.say(<span class="string">"child"</span>)  <span class="comment">//CPerson child  CPerson class say no ls</span></div></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//父类的引用指向子类对象，不同类型的子类针对相同方法产生不同的行为</span></div><div class="line"><span class="keyword">class</span> CCPerson <span class="keyword">extends</span> Person &#123;</div><div class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>=1</span>) &#123;</div><div class="line">        <span class="keyword">super</span>(name, age);</div><div class="line">    &#125;</div><div class="line">    run(distance: <span class="built_in">number</span> = <span class="number">1000</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" run "</span> + distance)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> ccp:CCPerson = <span class="keyword">new</span> CCPerson(<span class="string">'ww'</span>)</div><div class="line"><span class="keyword">var</span> cp1:Person = <span class="keyword">new</span> CPerson(<span class="string">"zl"</span>) <span class="comment">//使用父类型创建子类对象</span></div><div class="line"><span class="keyword">var</span> ccp1:Person = <span class="keyword">new</span> CCPerson(<span class="string">"qq"</span>)</div><div class="line">person.run() <span class="comment">//zs run 10</span></div><div class="line">cp.run() <span class="comment">//ls run 100</span></div><div class="line">ccp.run() <span class="comment">//ww run 1000</span></div><div class="line">cp1.run() <span class="comment">//zl run 100</span></div><div class="line">ccp1.run() <span class="comment">//qq run 1000</span></div></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p><code>protected</code> 修饰符与 <code>private</code> 修饰符的行为很相似，但有一点不同，<code>protected</code>成员在派生类中仍然可以访问。例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line">访问修饰符: 用来描述类内部的属性/方法的可访问性</div><div class="line">  public: 默认值, 公开的外部也可以访问</div><div class="line">  private: 只能类内部可以访问</div><div class="line">  protected: 类内部和子类可以访问</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">class</span> Animal &#123;</div><div class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span></div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">constructor</span> (<span class="params">name: <span class="built_in">string</span></span>) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> run (distance: <span class="built_in">number</span>=<span class="number">0</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this.name&#125;</span> run <span class="subst">$&#123;distance&#125;</span>m`</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Person <span class="keyword">extends</span> Animal &#123;</div><div class="line">  <span class="keyword">private</span> age: <span class="built_in">number</span> = <span class="number">18</span></div><div class="line">  <span class="keyword">protected</span> sex: <span class="built_in">string</span> = <span class="string">'男'</span></div><div class="line"></div><div class="line">  run (distance: <span class="built_in">number</span>=<span class="number">5</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Person jumping...'</span>)</div><div class="line">    <span class="keyword">super</span>.run(distance)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Student <span class="keyword">extends</span> Person &#123;</div><div class="line">  run (distance: <span class="built_in">number</span>=<span class="number">6</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Student jumping...'</span>)</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.sex) <span class="comment">// 子类能看到父类中受保护的成员</span></div><div class="line">    <span class="comment">// console.log(this.age) //  子类看不到父类中私有的成员</span></div><div class="line"></div><div class="line">    <span class="keyword">super</span>.run(distance)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Person(<span class="string">'abc'</span>).name) <span class="comment">// 公开的可见</span></div><div class="line"><span class="comment">// console.log(new Person('abc').sex) // 受保护的不可见</span></div><div class="line"><span class="comment">// console.log(new Person('abc').age) //  私有的不可见</span></div></pre></td></tr></table></figure><h3 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h3><p>使用 readonly 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Person &#123;</div><div class="line">    readonly name: <span class="built_in">string</span> = <span class="string">'abc'</span></div><div class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//参数属性通过给构造函数参数前面添加一个访问限定符来声明。使用 private 限定一个参数属性会声明并初始化一个私有成员；对于 public 和 protected 来说也是一样。</span></div><div class="line"><span class="keyword">class</span> Person &#123;</div><div class="line">  <span class="comment">//仅在构造函数里使用 readonly name: string 参数来创建和初始化 name 成员。 我们把声明和赋值合并至一处</span></div><div class="line">  <span class="keyword">constructor</span>(<span class="params">readonly name: <span class="built_in">string</span></span>) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="存取器-getter-和-setter"><a href="#存取器-getter-和-setter" class="headerlink" title="存取器 getter 和 setter"></a>存取器 getter 和 setter</h3><p>控制对对象成员的访问</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line">静态属性, 是类对象的属性</div><div class="line">非静态属性, 是类的实例对象的属性</div><div class="line">*/</div><div class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">class</span> Person &#123;</div><div class="line">        <span class="comment">//类中有一个默认的name属性,所以下行代码会报错</span></div><div class="line">        <span class="comment">// static name : string</span></div><div class="line">        firstName: <span class="built_in">string</span> = <span class="string">'A'</span></div><div class="line">        lastName: <span class="built_in">string</span> = <span class="string">'B'</span></div><div class="line">        <span class="keyword">static</span> sex: <span class="built_in">string</span> = <span class="string">"man"</span></div><div class="line">        <span class="keyword">constructor</span>(<span class="params">firstName:<span class="built_in">string</span>, lastName:<span class="built_in">string</span></span>) &#123;</div><div class="line">            <span class="keyword">this</span>.firstName = firstName</div><div class="line">            <span class="keyword">this</span>.lastName = lastName</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">get</span> fullName () &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">'-'</span> + <span class="keyword">this</span>.lastName</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">set</span> fullName (value) &#123;</div><div class="line">            <span class="keyword">const</span> names = value.split(<span class="string">'-'</span>)</div><div class="line">            <span class="keyword">this</span>.firstName = names[<span class="number">0</span>]</div><div class="line">            <span class="keyword">this</span>.lastName = names[<span class="number">1</span>]</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">static</span> say() &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"static function"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">"东方"</span>,<span class="string">"不败"</span>)</div><div class="line">    <span class="built_in">console</span>.log(p.fullName) <span class="comment">//东方-不败</span></div><div class="line">    <span class="comment">// console.log(p.sex)// 报错</span></div><div class="line">    <span class="built_in">console</span>.log(Person.sex)<span class="comment">// man</span></div><div class="line">    Person.sex = <span class="string">"woman"</span></div><div class="line">    <span class="built_in">console</span>.log(Person.sex)<span class="comment">// woman</span></div><div class="line">    Person.say() <span class="comment">//static function</span></div><div class="line"></div><div class="line">    p.fullName = <span class="string">'东方-不败'</span> <span class="comment">//东方 不败</span></div><div class="line">    <span class="built_in">console</span>.log(p.firstName, p.lastName)</div><div class="line">&#125;)()</div></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>1、抽象类做为其它派生类的基类使用。 它们不能被实例化</p><p>2、不同于接口，抽象类可以包含成员的实现细节</p><p>3、<code>abstract</code> 关键字是用于定义抽象类和在抽象类内部定义抽象方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</div><div class="line">        <span class="comment">//抽象属性</span></div><div class="line">        <span class="keyword">abstract</span> name:<span class="built_in">string</span> = <span class="string">"animal"</span></div><div class="line">        <span class="comment">// 抽象类， 不能有具体实现</span></div><div class="line">        <span class="keyword">abstract</span> eat()</div><div class="line">        <span class="comment">//实例方法</span></div><div class="line">        say() &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"mou mou"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//不能直接实例话</span></div><div class="line">    <span class="comment">// var animal:Animal = new Animal()</span></div><div class="line">    <span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</div><div class="line">        name:<span class="built_in">string</span> = <span class="string">"animal"</span></div><div class="line">        eat() &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"dog dog"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> dog:Animal = <span class="keyword">new</span> Dog()</div><div class="line">    dog.eat() <span class="comment">//dog dog</span></div><div class="line">    dog.say() <span class="comment">//mou mou</span></div><div class="line">    <span class="built_in">console</span>.log(dog.name) <span class="comment">//animal</span></div><div class="line">&#125;)()</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ts类-（和java基本一样）&quot;&gt;&lt;a href=&quot;#ts类-（和java基本一样）&quot; class=&quot;headerlink&quot; title=&quot;ts类  （和java基本一样）&quot;&gt;&lt;/a&gt;ts类  （和java基本一样）&lt;/h2&gt;&lt;figure class=&quot;high</summary>
      
    
    
    
    
    <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>ts接口</title>
    <link href="http://yoursite.com/2021/03/29/TypeScript/ts%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2021/03/29/TypeScript/ts%E6%8E%A5%E5%8F%A3/</id>
    <published>2021-03-29T07:37:26.000Z</published>
    <updated>2021-03-29T09:31:48.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ts接口"><a href="#ts接口" class="headerlink" title="ts接口"></a>ts接口</h2><p>TypeScript 的核心原则之一是对值所具有的结构进行类型检查。我们使用接口（Interfaces）来定义对象的类型。<code>接口是对象的状态(属性)和行为(方法)的抽象(描述)</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义人的接口</span></div><div class="line"><span class="keyword">interface</span> IPerson &#123;</div><div class="line">  readonly id: <span class="built_in">number</span> <span class="comment">//只读</span></div><div class="line">  name: <span class="built_in">string</span></div><div class="line">  age: <span class="built_in">number</span></div><div class="line">  sex？: <span class="built_in">string</span> <span class="comment">//可选属性</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> person1: IPerson = &#123;</div><div class="line">  id: <span class="number">1</span>,</div><div class="line">  name: <span class="string">'tom'</span>,</div><div class="line">  age: <span class="number">20</span>,</div><div class="line">&#125;</div><div class="line">person1.id = <span class="number">10</span> <span class="comment">//编译不通过</span></div><div class="line">person1.sex = <span class="string">'man'</span></div></pre></td></tr></table></figure><h3 id="ts函数类型"><a href="#ts函数类型" class="headerlink" title="ts函数类型"></a>ts函数类型</h3><p>为了使用接口表示函数类型，我们需要给接口定义一个调用签名。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line">接口可以描述函数类型(参数的类型与返回的类型)</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">interface</span> SearchFunc &#123;</div><div class="line">  <span class="comment">//定义一个调用签名</span></div><div class="line">  <span class="comment">//它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型</span></div><div class="line">  (source: <span class="built_in">string</span>, subString: <span class="built_in">string</span>): <span class="built_in">boolean</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> mySearch: SearchFunc = <span class="function"><span class="keyword">function</span> (<span class="params">source: <span class="built_in">string</span>, sub: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> source.search(sub) &gt; <span class="number">-1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(mySearch(<span class="string">'abcd'</span>, <span class="string">'bc'</span>)) <span class="comment">//true</span></div></pre></td></tr></table></figure><h3 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//和java相似  继承 实现</span></div><div class="line"><span class="comment">/* </span></div><div class="line">类类型: 实现接口</div><div class="line">1. 一个类可以实现多个接口</div><div class="line">2. 一个接口可以继承多个接口</div><div class="line">*/</div><div class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">//定义一个接口</span></div><div class="line">    <span class="keyword">interface</span> Ifly &#123;</div><div class="line">        <span class="comment">//定义一个没有任何实现的方法</span></div><div class="line">        fly():<span class="built_in">void</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">class</span> Fly <span class="keyword">implements</span> Ifly &#123;</div><div class="line">        fly() &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'fly'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> fly = <span class="keyword">new</span> Fly()</div><div class="line">    fly.fly()</div><div class="line"></div><div class="line">    <span class="keyword">interface</span> Ifly2 &#123;</div><div class="line">        <span class="comment">//定义一个没有任何实现的方法</span></div><div class="line">        fly2():<span class="built_in">void</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">class</span> Fly2 <span class="keyword">implements</span> Ifly, Ifly2 &#123;</div><div class="line">        fly() &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'fly1'</span>)</div><div class="line">        &#125;</div><div class="line">        fly2() &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'fly2'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> fly2 = <span class="keyword">new</span> Fly2()</div><div class="line">    fly2.fly()</div><div class="line">    fly2.fly2()</div><div class="line">    <span class="keyword">interface</span> Ifly3 <span class="keyword">extends</span> Ifly, Ifly2 &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">class</span> Fly3 <span class="keyword">implements</span> Ifly3 &#123;</div><div class="line">        fly() &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'fly3'</span>)</div><div class="line">        &#125;</div><div class="line">        fly2() &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'fly3'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> fly3 = <span class="keyword">new</span> Fly3()</div><div class="line">    fly3.fly()</div><div class="line">    fly3.fly2()</div><div class="line">&#125;)()</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ts接口&quot;&gt;&lt;a href=&quot;#ts接口&quot; class=&quot;headerlink&quot; title=&quot;ts接口&quot;&gt;&lt;/a&gt;ts接口&lt;/h2&gt;&lt;p&gt;TypeScript 的核心原则之一是对值所具有的结构进行类型检查。我们使用接口（Interfaces）来定义对象的类型。&lt;</summary>
      
    
    
    
    
    <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
</feed>
