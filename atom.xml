<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录</title>
  
  <subtitle>千里之行，始于足下</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-04-13T06:29:53.212Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Z-Q-K</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue-el限制输入</title>
    <link href="http://yoursite.com/2021/04/13/vue-el%E9%99%90%E5%88%B6%E8%BE%93%E5%85%A5/"/>
    <id>http://yoursite.com/2021/04/13/vue-el%E9%99%90%E5%88%B6%E8%BE%93%E5%85%A5/</id>
    <published>2021-04-13T06:26:35.000Z</published>
    <updated>2021-04-13T06:29:53.212Z</updated>
    
    <content type="html"><![CDATA[<h3 id="oninput限制输入"><a href="#oninput限制输入" class="headerlink" title="oninput限制输入"></a>oninput限制输入</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;el-input v-model='num'</div><div class="line">oninput="if(/^[0-9]*$/.test(value) == false) &#123; value = null &#125;</div><div class="line">                   if(value &lt; 0)&#123;value=0&#125;</div><div class="line">                   if(value &gt; 100)&#123;value=100&#125;</div><div class="line">                   if(value&gt; 0 &amp;&amp; value &lt; 100) &#123;value=value.replace(/[^\d]/g,'')&#125;" &gt;&lt;/el-input&gt;</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;oninput限制输入&quot;&gt;&lt;a href=&quot;#oninput限制输入&quot; class=&quot;headerlink&quot; title=&quot;oninput限制输入&quot;&gt;&lt;/a&gt;oninput限制输入&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;</summary>
      
    
    
    
    
    <category term="vue-el踩坑" scheme="http://yoursite.com/tags/vue-el踩坑/"/>
    
  </entry>
  
  <entry>
    <title>vue路由模式</title>
    <link href="http://yoursite.com/2021/04/08/vue%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2021/04/08/vue%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-04-08T09:39:47.000Z</published>
    <updated>2021-04-08T10:12:39.977Z</updated>
    
    <content type="html"><![CDATA[<h3 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h3><p>今天使用路由跳转时始终访问不到指定页面</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const href = `/informationAudit/intoInfoAudit?id=` + id;</div><div class="line">window.open(href, "_blank");</div><div class="line"></div><div class="line">//点击后路由跳转</div><div class="line">/informationAudit/intoInfoAudit?id=undefined#/dashboard</div></pre></td></tr></table></figure><p>后来发现路由模式不对</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createRouter = <span class="function"><span class="params">()</span> =&gt;</span></div><div class="line">  <span class="keyword">new</span> Router(&#123;</div><div class="line">    <span class="comment">//不应该注释</span></div><div class="line">    <span class="comment">//mode: 'history', // 路由模式</span></div><div class="line">    scrollBehavior: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">y</span>: <span class="number">0</span> &#125;),</div><div class="line">    <span class="attr">isAdd</span>: <span class="literal">false</span>, <span class="comment">//是否已经添加动态(菜单)路由</span></div><div class="line">    routes: constantRoutes,</div><div class="line">    <span class="attr">base</span>: <span class="string">'/icostviews/'</span></div><div class="line">  &#125;);</div></pre></td></tr></table></figure><p>vue-router有两种模式：</p><p>hash（默认）：</p><p>1、使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载</p><p>2、url带有<em>#</em></p><p>3、前端路由修改的是#中的信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//如果直接输入页面会跳转</div><div class="line">/informationAudit/intoInfoAudit?id=undefined#/supplierManagement/informationAudit</div></pre></td></tr></table></figure><p>history：</p><p>1、这种模式充分利用 <code>history.pushState</code> API 来完成 URL 跳转而无须重新加载页面。</p><p>2、使用history 模式时，URL 就像正常的 url</p><p>3、需要后台配置支持，刷新会请求服务器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;路由模式&quot;&gt;&lt;a href=&quot;#路由模式&quot; class=&quot;headerlink&quot; title=&quot;路由模式&quot;&gt;&lt;/a&gt;路由模式&lt;/h3&gt;&lt;p&gt;今天使用路由跳转时始终访问不到指定页面&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    
    <category term="vue-Router" scheme="http://yoursite.com/tags/vue-Router/"/>
    
  </entry>
  
  <entry>
    <title>js正则</title>
    <link href="http://yoursite.com/2021/04/07/js%E6%AD%A3%E5%88%99/"/>
    <id>http://yoursite.com/2021/04/07/js%E6%AD%A3%E5%88%99/</id>
    <published>2021-04-07T08:00:57.000Z</published>
    <updated>2021-04-07T08:07:54.509Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><h4 id="常用元字符串"><a href="#常用元字符串" class="headerlink" title="常用元字符串"></a>常用元字符串</h4><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线</td></tr><tr><td>\W</td><td>匹配任意不是字母，数字，下划线</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>.</td><td>匹配除换行符以外的任意单个字符</td></tr><tr><td>^</td><td>表示匹配行首的文本(以谁开始)</td></tr><tr><td>$</td><td>表示匹配行尾的文本(以谁结束)</td></tr></tbody></table><h4 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h4><table><thead><tr><th>限定符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[] 字符串用中括号括起来，表示匹配其中的任一字符，相当于或的意思</div><div class="line">[^]  匹配除中括号以内的内容</div><div class="line">\ 转义符</div><div class="line">| 或者，选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱</div><div class="line">() 从两个直接量中选择一个，分组</div><div class="line">   eg：gr(a|e)y匹配gray和grey</div><div class="line">[\u4e00-\u9fa5]  匹配汉字</div></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//提取邮件中的每一部分</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">'xxxx@itcast.com'</span>;</div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w+)@(\w+)\.(\w+)/</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>); <span class="comment">//RegExp() &#123; [native code] &#125;</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>); <span class="comment">//xxxx</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>); <span class="comment">//itcast</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">3</span>); <span class="comment">//com</span></div><div class="line"></div><div class="line"><span class="comment">//为什么  RegExp.$1 有值</span></div><div class="line"><span class="comment">//参考：https://blog.csdn.net/qq_42423964/article/details/102385983</span></div><div class="line"></div><div class="line"><span class="built_in">RegExp</span> 是javascript中的一个内置对象。为正则表达式。</div><div class="line"></div><div class="line"><span class="built_in">RegExp</span>.$<span class="number">1</span>是<span class="built_in">RegExp</span>的一个属性,指的是与正则表达式匹配的第一个 子匹配(以括号为标志)字符串，以此类推，<span class="built_in">RegExp</span>.$<span class="number">2</span>，<span class="built_in">RegExp</span>.$<span class="number">3</span>，..RegExp.$<span class="number">99</span>总共可以有<span class="number">99</span>个匹配</div><div class="line"></div><div class="line">如果你直接在控制台打印<span class="built_in">RegExp</span>, 出现的一定是一个空字符串: <span class="string">""</span>。那么, 我们在什么时候可以使用<span class="built_in">RegExp</span>.$<span class="number">1</span>呢?</div><div class="line"></div><div class="line"><span class="comment">//其实RegExp这个对象会在我们调用了正则表达式的方法后, 自动将最近一次的结果保存在里面, 所以如果我们在使用正则表达式时, 有用到分组, 那么就可以直接在调用完以后直接使用RegExp.$xx来使用捕获到的分组内容</span></div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;正则&quot;&gt;&lt;a href=&quot;#正则&quot; class=&quot;headerlink&quot; title=&quot;正则&quot;&gt;&lt;/a&gt;正则&lt;/h3&gt;&lt;h4 id=&quot;常用元字符串&quot;&gt;&lt;a href=&quot;#常用元字符串&quot; class=&quot;headerlink&quot; title=&quot;常用元字符串&quot;&gt;&lt;/a&gt;常</summary>
      
    
    
    
    
    <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js对象方法</title>
    <link href="http://yoursite.com/2021/04/07/js%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2021/04/07/js%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/</id>
    <published>2021-04-07T07:41:27.000Z</published>
    <updated>2021-04-07T07:42:00.717Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对象深拷贝"><a href="#对象深拷贝" class="headerlink" title="对象深拷贝"></a>对象深拷贝</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 深拷贝  把o1的成员拷贝给o2</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">o1, o2</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> o1) &#123;</div><div class="line">    <span class="comment">// 获取key属性对应的值</span></div><div class="line">    <span class="keyword">var</span> item = o1[key];</div><div class="line"></div><div class="line">    <span class="comment">// 如果item 是对象？</span></div><div class="line">    <span class="comment">// var o = &#123;&#125;</span></div><div class="line">    <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</div><div class="line">      <span class="comment">// var o = &#123;&#125;;</span></div><div class="line">      o2[key] = &#123;&#125;; </div><div class="line">      deepCopy(item, o2[key]);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</div><div class="line">      <span class="comment">// 如果item 是数组呢？</span></div><div class="line">      <span class="comment">// var arr = [];</span></div><div class="line">      o2[key] = [];</div><div class="line">      deepCopy(item, o2[key]);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 如果是简单类型</span></div><div class="line">      o2[key] = o1[key];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;对象深拷贝&quot;&gt;&lt;a href=&quot;#对象深拷贝&quot; class=&quot;headerlink&quot; title=&quot;对象深拷贝&quot;&gt;&lt;/a&gt;对象深拷贝&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    
    <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>el-table自定义排序</title>
    <link href="http://yoursite.com/2021/04/06/el-table%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2021/04/06/el-table%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/</id>
    <published>2021-04-06T02:38:57.000Z</published>
    <updated>2021-04-06T03:12:24.493Z</updated>
    
    <content type="html"><![CDATA[<h3 id="表格自定义排序"><a href="#表格自定义排序" class="headerlink" title="表格自定义排序"></a>表格自定义排序</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">el-table</span></span></div><div class="line"><span class="attr">ref</span>=<span class="string">"tableCot"</span></div><div class="line"><span class="attr">:data</span>=<span class="string">"tableData"</span></div><div class="line"><span class="attr">:default-sort</span> = <span class="string">"&#123;prop: 'projectNo', order: 'descending'&#125;"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">el-table-column</span></span></div><div class="line">     <span class="attr">align</span>=<span class="string">"center"</span></div><div class="line">     <span class="attr">:show-overflow-tooltip</span>=<span class="string">"true"</span></div><div class="line">     <span class="attr">prop</span>=<span class="string">"projectNo"</span></div><div class="line">     <span class="attr">label</span>=<span class="string">"项目编号"</span></div><div class="line">     <span class="attr">:sortable</span>=<span class="string">"true"</span></div><div class="line">     <span class="attr">:sort-method</span>=<span class="string">"sortby"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span>             </div><div class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//可以先看看a，b的内容</span></div><div class="line">sortby(a, b) &#123;</div><div class="line">    <span class="keyword">let</span> x = <span class="built_in">parseInt</span>(a.projectNo.substring(<span class="number">19</span>))</div><div class="line">    <span class="keyword">let</span> y = <span class="built_in">parseInt</span>(b.projectNo.substring(<span class="number">19</span>))</div><div class="line">    <span class="keyword">return</span> x &gt; y ? <span class="number">-1</span> : <span class="number">1</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;表格自定义排序&quot;&gt;&lt;a href=&quot;#表格自定义排序&quot; class=&quot;headerlink&quot; title=&quot;表格自定义排序&quot;&gt;&lt;/a&gt;表格自定义排序&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    
    <category term="Element UI" scheme="http://yoursite.com/tags/Element-UI/"/>
    
  </entry>
  
  <entry>
    <title>vue3新特性-使用</title>
    <link href="http://yoursite.com/2021/03/31/vue3%E6%96%B0%E7%89%B9%E6%80%A7-%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2021/03/31/vue3%E6%96%B0%E7%89%B9%E6%80%A7-%E4%BD%BF%E7%94%A8/</id>
    <published>2021-03-31T09:32:34.000Z</published>
    <updated>2021-04-01T14:25:12.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><ul><li>新的option, 所有的组合API函数都在此使用, 只在初始化时执行一次</li><li>函数如果返回对象, 对象中的属性或方法, 模板中可以直接使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//理解：将2.0中data 和 methods 统一,必须通过 return 返回才可以使用</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;defineComponent&#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line"><span class="comment">//暴露一个定义好的组件</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'App'</span>,</div><div class="line">    setup() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ul><li>作用: 定义一个数据的响应式</li><li>语法: const xxx = ref(initValue):<ul><li>创建一个包含响应式数据的引用(reference)对象</li><li>js中操作数据: xxx.value</li><li>模板中操作数据: 不需要.value</li></ul></li><li>一般用来定义一个基本类型的响应式数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"updateCount"</span>&gt;</span>更新数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;defineComponent, ref&#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line">setup()&#123;</div><div class="line">  <span class="comment">// console.log('第一次')</span></div><div class="line">  <span class="comment">// 变量</span></div><div class="line">  <span class="comment">// let count = 0 // 此时的数据并不是响应式的数据(响应式数据:数据变化,页面跟着渲染变化)</span></div><div class="line">  <span class="comment">// ref是一个函数,作用:定义一个响应式的数据,返回的是一个Ref对象,对象中有一个value属性,如果需要对数据进行操作,需要使用该Ref对象调用value属性的方式进行数据的操作</span></div><div class="line">  <span class="comment">// html模版中是不需要使用.value属性的写法</span></div><div class="line">  <span class="comment">// 一般用来定义一个基本类型的响应式数据</span></div><div class="line">  <span class="comment">// count 的类型 Ref类型</span></div><div class="line">    <span class="comment">//count.value = 0</span></div><div class="line">  <span class="keyword">const</span> count = ref(<span class="number">0</span>)</div><div class="line">  <span class="built_in">console</span>.log(count)</div><div class="line">  <span class="comment">// 方法</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">updateCount</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'====='</span>)</div><div class="line">    <span class="comment">// 报错的原因:count是一个Ref对象,对象是不能进行++的操作</span></div><div class="line">    <span class="comment">// count++</span></div><div class="line">    count.value++</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 返回的是一个对象</span></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="comment">// 属性</span></div><div class="line">    count,</div><div class="line">    <span class="comment">// 方法</span></div><div class="line">    updateCount</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h3><ul><li>作用: 定义多个数据的响应式</li><li>const proxy = reactive(obj): 接收一个普通对象然后返回该普通对象的响应式代理器对象</li><li>响应式转换是“深层的”：会影响对象内部所有嵌套的属性</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据都是响应式的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//目标对象</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'小明'</span>,</div><div class="line">      <span class="attr">age</span>: <span class="number">20</span>,</div><div class="line">      <span class="attr">wife</span>: &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'小甜甜'</span>,</div><div class="line">        <span class="attr">age</span>: <span class="number">18</span>,</div><div class="line">        <span class="attr">cars</span>: [<span class="string">'奔驰'</span>, <span class="string">'宝马'</span>, <span class="string">'奥迪'</span>],</div><div class="line">      &#125;,</div><div class="line">    &#125;</div><div class="line"><span class="comment">//代理对象</span></div><div class="line"><span class="keyword">const</span> user = reactive&lt;any&gt;(obj)</div><div class="line"><span class="keyword">const</span> updateUser = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="comment">// 直接使用目标对象的方式来更新目标对象中的成员的值,是不可能的,只能使用代理对象的方式来更新数据(响应式数据)</span></div><div class="line">      <span class="comment">// obj.name += '==='</span></div><div class="line">      <span class="comment">// 通过当前的代理对象把目标对象中的某个数组属性添加一个新的属性</span></div><div class="line">      user.name += <span class="string">'==='</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 总结: 如果操作代理对象,目标对象中的数据也会随之变化,同时如果想要在操作数据的时候,界面也要跟着重新更新渲染,那么也是操作代理对象</span></div><div class="line"><span class="comment">//操作目标对象,目标对象中的数据会随之变化,但不会重新渲染</span></div></pre></td></tr></table></figure><h3 id="computed-和-watch"><a href="#computed-和-watch" class="headerlink" title="computed  和  watch"></a>computed  和  watch</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//computed 和 watch 也放入setup之中</span></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  defineComponent,</div><div class="line">  reactive,</div><div class="line">  computed,</div><div class="line">  watch,</div><div class="line">  ref,</div><div class="line">  watchEffect,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'App'</span>,</div><div class="line">  setup() &#123;</div><div class="line">    <span class="comment">// 定义一个响应式对象</span></div><div class="line">    <span class="keyword">const</span> user = reactive(&#123;</div><div class="line">      <span class="comment">// 姓氏</span></div><div class="line">      firstName: <span class="string">'东方'</span>,</div><div class="line">      <span class="comment">// 名字</span></div><div class="line">      lastName: <span class="string">'不败'</span>,</div><div class="line">    &#125;)</div><div class="line">    <span class="comment">// 通过计算属性的方式,实现第一个姓名的显示</span></div><div class="line">    <span class="comment">// vue3中的计算属性</span></div><div class="line">    <span class="comment">// 计算属性的函数中如果只传入一个回调函数,表示的是get</span></div><div class="line"></div><div class="line">    <span class="comment">// 第一个姓名:</span></div><div class="line">    <span class="comment">// 返回的是一个Ref类型的对象</span></div><div class="line">    <span class="keyword">const</span> fullName1 = computed(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> user.firstName + <span class="string">'_'</span> + user.lastName</div><div class="line">    &#125;)</div><div class="line">    <span class="comment">// 第二个姓名:</span></div><div class="line">    <span class="keyword">const</span> fullName2 = computed(&#123;</div><div class="line">      get() &#123;</div><div class="line">        <span class="keyword">return</span> user.firstName + <span class="string">'_'</span> + user.lastName</div><div class="line">      &#125;,</div><div class="line">      set(val: string) &#123;</div><div class="line">        <span class="comment">// console.log('=====',val)</span></div><div class="line">        <span class="keyword">const</span> names = val.split(<span class="string">'_'</span>)</div><div class="line">        user.firstName = names[<span class="number">0</span>]</div><div class="line">        user.lastName = names[<span class="number">1</span>]</div><div class="line">      &#125;,</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">// 第三个姓名:</span></div><div class="line">    <span class="keyword">const</span> fullName3 = ref(<span class="string">''</span>)</div><div class="line">    <span class="comment">// 监视----监视指定的数据</span></div><div class="line">    watch(</div><div class="line">      user,</div><div class="line">      (&#123; firstName, lastName &#125;) =&gt; &#123;</div><div class="line">        fullName3.value = firstName + <span class="string">'_'</span> + lastName</div><div class="line">      &#125;,</div><div class="line">      &#123; <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="attr">deep</span>: <span class="literal">true</span> &#125;</div><div class="line">    )</div><div class="line">    <span class="comment">// immediate 默认会执行一次watch,deep 深度监视</span></div><div class="line"></div><div class="line">    <span class="comment">// 监视,不需要配置immediate,本身默认就会进行监视,(默认执行一次)</span></div><div class="line">    <span class="comment">// watchEffect(() =&gt; &#123;</span></div><div class="line">    <span class="comment">//   fullName3.value = user.firstName + '_' + user.lastName</span></div><div class="line">    <span class="comment">// &#125;)</span></div><div class="line"></div><div class="line">    <span class="comment">// 监视fullName3的数据,改变firstName和lastName</span></div><div class="line">    watchEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">const</span> names = fullName3.value.split(<span class="string">'_'</span>)</div><div class="line">      user.firstName = names[<span class="number">0</span>]</div><div class="line">      user.lastName = names[<span class="number">1</span>]</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">// watch---可以监视多个数据的</span></div><div class="line">    <span class="comment">// watch([user.firstName,user.lastName,fullName3],()=&gt;&#123;</span></div><div class="line">    <span class="comment">//   // 这里的代码就没有执行,fullName3是响应式的数据,但是,user.firstName,user.lastName不是响应式的数据</span></div><div class="line">    <span class="comment">//   console.log('====')</span></div><div class="line">    <span class="comment">// &#125;)</span></div><div class="line">    <span class="comment">// 当我们使用watch监视非响应式的数据的时候,代码需要改一下</span></div><div class="line">    watch([<span class="function"><span class="params">()</span>=&gt;</span>user.firstName, ()=&gt;user.lastName,fullName3], () =&gt; &#123;</div><div class="line">      <span class="comment">// 这里的代码就没有执行,fullName3是响应式的数据,但是,user.firstName,user.lastName不是响应式的数据</span></div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'===='</span>)</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      user,</div><div class="line">      fullName1,</div><div class="line">      fullName2,</div><div class="line">      fullName3,</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>3.0中的生命周期都变成了组合api</p><p>3.0中的执行都比2.0中的快</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">beforeCreate -&gt; 使用 setup()</div><div class="line">created -&gt; 使用 setup()</div><div class="line">beforeMount -&gt; onBeforeMount</div><div class="line">mounted -&gt; onMounted</div><div class="line">beforeUpdate -&gt; onBeforeUpdate</div><div class="line">updated -&gt; onUpdated</div><div class="line">beforeDestroy -&gt; onBeforeUnmount</div><div class="line">destroyed -&gt; onUnmounted</div><div class="line">errorCaptured -&gt; onErrorCaptured</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;setup&quot;&gt;&lt;a href=&quot;#setup&quot; class=&quot;headerlink&quot; title=&quot;setup&quot;&gt;&lt;/a&gt;setup&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;新的option, 所有的组合API函数都在此使用, 只在初始化时执行一次&lt;/li&gt;
&lt;li&gt;函数如果返</summary>
      
    
    
    
    
    <category term="Vue3" scheme="http://yoursite.com/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>vue3项目创建</title>
    <link href="http://yoursite.com/2021/03/30/vue3%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA/"/>
    <id>http://yoursite.com/2021/03/30/vue3%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA/</id>
    <published>2021-03-30T06:00:49.000Z</published>
    <updated>2021-03-30T06:06:45.652Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://24kcs.github.io/vue3_study/chapter3/02_%E5%88%9B%E5%BB%BAvue3%E9%A1%B9%E7%9B%AE.html#_1-%E4%BD%BF%E7%94%A8-vue-cli-%E5%88%9B%E5%BB%BA" target="_blank" rel="external">https://24kcs.github.io/vue3_study/chapter3/02_%E5%88%9B%E5%BB%BAvue3%E9%A1%B9%E7%9B%AE.html#_1-%E4%BD%BF%E7%94%A8-vue-cli-%E5%88%9B%E5%BB%BA</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考：&lt;a href=&quot;https://24kcs.github.io/vue3_study/chapter3/02_%E5%88%9B%E5%BB%BAvue3%E9%A1%B9%E7%9B%AE.html#_1-%E4%BD%BF%E7%94%A8-vue-cli-%E</summary>
      
    
    
    
    
    <category term="Vue3" scheme="http://yoursite.com/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>ts声明文件和内置对象</title>
    <link href="http://yoursite.com/2021/03/30/ts%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6%E5%92%8C%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2021/03/30/ts%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6%E5%92%8C%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-03-30T01:51:51.000Z</published>
    <updated>2021-03-30T06:00:04.960Z</updated>
    
    <content type="html"><![CDATA[<h3 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h3><p>当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line">当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。</div><div class="line">声明语句: 如果需要ts对新的语法进行检查, 需要要加载了对应的类型说明代码</div><div class="line">  declare var jQuery: (selector: string) =&gt; any;</div><div class="line">声明文件: 把声明语句放到一个单独的文件（jQuery.d.ts）中, ts会自动解析到项目中所有声明文件</div><div class="line">下载声明文件: npm install @types/jquery --save-dev 直接安装声明文件</div><div class="line">*/</div><div class="line"></div><div class="line">jQuery(<span class="string">'#foo'</span>);</div><div class="line"><span class="comment">// ERROR: Cannot find name 'jQuery'.</span></div></pre></td></tr></table></figure><p>一般声明文件都会单独写成一个 <code>xxx.d.ts</code> 文件， TS编译器会扫描并加载项目中所有的TS声明文件</p><p>很多的第三方库都定义了对应的声明文件库, 库文件名一般为 <code>@types/xxx</code>, 可以在 <code>https://www.npmjs.com/package/package</code> 进行搜索，<strong>下载完后可不用手动声明</strong></p><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><p>JavaScript 中有很多内置对象，它们可以直接在 TypeScript 中当做定义好了的类型。</p><p>内置对象是指根据标准在全局作用域（Global）上存在的对象。这里的标准是指 ECMAScript 和其他环境（比如 DOM）的标准。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ECMAScript 的内置对象</span></div><div class="line"><span class="comment">/* 1. ECMAScript 的内置对象 */</span></div><div class="line"><span class="keyword">let</span> b: <span class="built_in">Boolean</span> = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>)</div><div class="line"><span class="keyword">let</span> n: <span class="built_in">Number</span> = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="literal">true</span>)</div><div class="line"><span class="keyword">let</span> s: <span class="built_in">String</span> = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'abc'</span>)</div><div class="line"><span class="keyword">let</span> d: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line"><span class="keyword">let</span> r: <span class="built_in">RegExp</span> = <span class="regexp">/^1/</span></div><div class="line"><span class="keyword">let</span> e: <span class="built_in">Error</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error message'</span>)</div><div class="line">b = <span class="literal">true</span></div><div class="line"><span class="comment">// let bb: boolean = new Boolean(2)  // error</span></div><div class="line"></div><div class="line"><span class="comment">//BOM 和 DOM 的内置对象</span></div><div class="line"><span class="keyword">const</span> div: HTMLElement = <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>)</div><div class="line"><span class="keyword">const</span> divs: NodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>)</div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="function">(<span class="params">event: MouseEvent</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.dir(event.target)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">const</span> fragment: DocumentFragment = <span class="built_in">document</span>.createDocumentFragment()</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;声明文件&quot;&gt;&lt;a href=&quot;#声明文件&quot; class=&quot;headerlink&quot; title=&quot;声明文件&quot;&gt;&lt;/a&gt;声明文件&lt;/h3&gt;&lt;p&gt;当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能&lt;/p&gt;
&lt;figure class=&quot;h</summary>
      
    
    
    
    
    <category term="Ty" scheme="http://yoursite.com/tags/Ty/"/>
    
  </entry>
  
  <entry>
    <title>ts泛型</title>
    <link href="http://yoursite.com/2021/03/29/ts%E6%B3%9B%E5%9E%8B/"/>
    <id>http://yoursite.com/2021/03/29/ts%E6%B3%9B%E5%9E%8B/</id>
    <published>2021-03-29T14:25:11.000Z</published>
    <updated>2021-03-30T01:53:15.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ts泛型"><a href="#ts泛型" class="headerlink" title="ts泛型"></a>ts泛型</h2><p>指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定具体类型的一种特性。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//主要是定义方法时参数类型不确定，使用时参数类型确定，并可以进行参数检查与提示</span></div><div class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 根据指定的数量 count 和数据 value , 创建一个包含 count 个 value 的数组</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getArr</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T, count: <span class="built_in">number</span></span>): <span class="title">T</span>[] </span>&#123;</div><div class="line">        <span class="keyword">const</span> arr: <span class="built_in">Array</span>&lt;T&gt; = []</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">            arr.push(value)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> arr</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> arr1 =getArr&lt;<span class="built_in">string</span>&gt;(<span class="string">"str"</span>, <span class="number">3</span>)</div><div class="line">    <span class="built_in">console</span>.log(arr1) <span class="comment">//["str", "str", "str"]</span></div><div class="line">    </div><div class="line">    <span class="comment">//多个泛型</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getMsg</span>&lt;<span class="title">K</span>, <span class="title">T</span>&gt;(<span class="params">value1: K, value2: T</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> [value1, value2]</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> arr2 = getMsg&lt;<span class="built_in">number</span> , <span class="built_in">string</span>&gt;(<span class="number">1</span>, <span class="string">"zs"</span>)</div><div class="line">    <span class="built_in">console</span>.log(arr2) <span class="comment">//[1, "zs"]</span></div><div class="line">&#125;)()</div></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>在定义接口时, 为接口中的属性或方法定义泛型类型<br>在使用接口时, 再指定具体的泛型类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">interface</span> IbaseCRUD &lt;T&gt; &#123;</div><div class="line">        data: T[]</div><div class="line">        add: <span class="function">(<span class="params">t: T</span>) =&gt;</span> <span class="built_in">void</span></div><div class="line">        getById: <span class="function">(<span class="params">id: <span class="built_in">number</span></span>) =&gt;</span> T</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">class</span> User &#123;</div><div class="line">        id?: <span class="built_in">number</span>; <span class="comment">//id主键自增</span></div><div class="line">        name: <span class="built_in">string</span>; <span class="comment">//姓名</span></div><div class="line">        age: <span class="built_in">number</span>; <span class="comment">//年龄</span></div><div class="line"></div><div class="line">        <span class="keyword">constructor</span> (<span class="params">name, age</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.name = name</div><div class="line">            <span class="keyword">this</span>.age = age</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">class</span> UserCRUD <span class="keyword">implements</span> IbaseCRUD &lt;User&gt; &#123;</div><div class="line">        data: User[] = []</div><div class="line"></div><div class="line">        add(user: User): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="comment">//解构赋值</span></div><div class="line">            user = &#123;...user, id: <span class="built_in">Date</span>.now()&#125;</div><div class="line">            <span class="keyword">this</span>.data.push(user)</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'保存user'</span>, user.id)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        getById(id: <span class="built_in">number</span>): User &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.data.find(<span class="function"><span class="params">item</span> =&gt;</span> item.id===id)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">const</span> userCRUD = <span class="keyword">new</span> UserCRUD()</div><div class="line">    userCRUD.add(<span class="keyword">new</span> User(<span class="string">'tom'</span>, <span class="number">12</span>)) <span class="comment">//保存user 1617067853995</span></div><div class="line">    userCRUD.add(<span class="keyword">new</span> User(<span class="string">'tom2'</span>, <span class="number">13</span>)) <span class="comment">//保存user 1617067894390</span></div><div class="line">    <span class="built_in">console</span>.log(userCRUD.data) <span class="comment">//&#123;name: "tom", age: 12, id: 1617067901231&#125; &#123;name: "tom2", age: 13, id: 1617067901233&#125;</span></div><div class="line">&#125;)()</div></pre></td></tr></table></figure><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>在定义类时, 为类中的属性或方法定义泛型类型 在创建类的实例时, 再指定特定的泛型类型</p><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>如果我们直接对一个泛型参数取 <code>length</code> 属性, 会报错, 因为这个泛型根本就不知道它有这个属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 没有泛型约束</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> &lt;<span class="title">T</span>&gt;(<span class="params">x: T</span>): <span class="title">void</span> </span>&#123;</div><div class="line">  <span class="comment">// console.log(x.length)  // error</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">interface</span> Lengthwise &#123;</div><div class="line">  length: <span class="built_in">number</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 指定泛型约束</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span> &lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">x: T</span>): <span class="title">void</span> </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(x.length)</div><div class="line">&#125;</div><div class="line"></div><div class="line">fn2(<span class="string">'abc'</span>)<span class="comment">// fn2(123) // error  number没有length属性</span></div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ts泛型&quot;&gt;&lt;a href=&quot;#ts泛型&quot; class=&quot;headerlink&quot; title=&quot;ts泛型&quot;&gt;&lt;/a&gt;ts泛型&lt;/h2&gt;&lt;p&gt;指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定具体类型的一种特性。&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    
    <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>ts函数</title>
    <link href="http://yoursite.com/2021/03/29/ts%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2021/03/29/ts%E5%87%BD%E6%95%B0/</id>
    <published>2021-03-29T13:56:06.000Z</published>
    <updated>2021-03-29T14:24:56.887Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ts函数"><a href="#ts函数" class="headerlink" title="ts函数"></a>ts函数</h2><p>实现抽象层，模拟类，信息隐藏和模块</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//我们可以给每个参数添加类型之后再为函数本身添加返回值类型。TypeScript 能够根据返回语句自动推断出返回值类型</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> x + y</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> myAdd = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123; </div><div class="line">  <span class="keyword">return</span> x + y</div><div class="line">&#125;</div><div class="line"><span class="comment">//函数完整写法</span></div><div class="line"><span class="comment">//myAdd2 变量名</span></div><div class="line"><span class="comment">//(x: number, y: number) =&gt; number 函数类型</span></div><div class="line"><span class="comment">//function 函数类型的值</span></div><div class="line"><span class="keyword">let</span> myAdd2: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = </div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> x + y</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h3><p>1、TypeScript 里的每个函数参数都是必须的</p><p>2、这不是指不能传递 <code>null</code> 或 <code>undefined</code> 作为参数，而是说编译器检查用户是否为每个参数都传入了值</p><p>3、传递给一个函数的参数个数必须与函数期望的参数个数一致</p><p>4、JavaScript 里，每个参数都是可选的，可传可不传。 没传参的时候，它的值就是 <code>undefined</code></p><p>5、TypeScript 里可以在参数名旁使用 <code>?</code> 实现可选参数的功能</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function getFullname(firstName: string="zhang", lastName?: string):string &#123;</div><div class="line">    if(lastName) &#123;</div><div class="line">        return firstName + "_" + lastName</div><div class="line">    &#125;</div><div class="line">    return firstName</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(getFullname("zhang", 'san')) //zhang_san</div><div class="line">console.log(getFullname("zhao")) //zhao</div></pre></td></tr></table></figure><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//...args: xxx[] 剩余参数 ， 要放在参数最后</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showStr</span>(<span class="params">str: <span class="built_in">string</span>, ...args: <span class="built_in">string</span>[]</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(str) <span class="comment">//a</span></div><div class="line">    <span class="built_in">console</span>.log(...args) <span class="comment">//b c d</span></div><div class="line">&#125;</div><div class="line">showStr(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</div></pre></td></tr></table></figure><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//感觉用于自己写的工具函数会好一点，不直接涉及用户交互</div><div class="line">//函数重载声明</div><div class="line">function add(x: number, y: number): number</div><div class="line">function add(x: string, y: string): string</div><div class="line"></div><div class="line">function add(x: number | string, y: number | string): number | string &#123;</div><div class="line">    if(typeof x == 'string' &amp;&amp; typeof y == 'string') &#123;</div><div class="line">        return x + y //字符串拼接</div><div class="line">    &#125;else if(typeof x == 'number' &amp;&amp; typeof y == 'number') &#123;</div><div class="line">        return x + y //数字相加</div><div class="line">    &#125;</div><div class="line">    //else &#123;// 其他直接返回一个值  不行？？？</div><div class="line">        //return "can not do it"</div><div class="line">//&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">console.log(add(1 , 2)) //3</div><div class="line">console.log(add("东方" , "不败")) //东方不败</div><div class="line">//未声明重载前</div><div class="line">// console.log(add("东方" , 1)) //undefined</div><div class="line">//声明重载后直接报错</div><div class="line">// console.log(add("东方" , 1))</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ts函数&quot;&gt;&lt;a href=&quot;#ts函数&quot; class=&quot;headerlink&quot; title=&quot;ts函数&quot;&gt;&lt;/a&gt;ts函数&lt;/h2&gt;&lt;p&gt;实现抽象层，模拟类，信息隐藏和模块&lt;/p&gt;
&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;</summary>
      
    
    
    
    
    <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>ts类</title>
    <link href="http://yoursite.com/2021/03/29/ts%E7%B1%BB/"/>
    <id>http://yoursite.com/2021/03/29/ts%E7%B1%BB/</id>
    <published>2021-03-29T08:42:04.000Z</published>
    <updated>2021-03-29T13:55:37.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ts类-（和java基本一样）"><a href="#ts类-（和java基本一样）" class="headerlink" title="ts类  （和java基本一样）"></a>ts类  （和java基本一样）</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">//父类</span></div><div class="line">    <span class="keyword">class</span> Person &#123;</div><div class="line">        name: <span class="built_in">string</span></div><div class="line">        age: <span class="built_in">number</span></div><div class="line">        sex: <span class="built_in">string</span></div><div class="line">        <span class="comment">//可以给默认值</span></div><div class="line">        <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>=1</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.name = name</div><div class="line">            <span class="keyword">this</span>.age = age</div><div class="line">        &#125;</div><div class="line">        say(str:<span class="built_in">string</span>) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"class say no "</span> + <span class="keyword">this</span>.name + <span class="string">" "</span> + str)</div><div class="line">        &#125;</div><div class="line">        run(distance: <span class="built_in">number</span>=<span class="number">10</span>) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" run "</span> + distance)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> person:Person = <span class="keyword">new</span> Person(<span class="string">"zs"</span>)</div><div class="line">    <span class="comment">// Person.prototype.sex = "man"</span></div><div class="line">    <span class="comment">// //person.sex = "man"</span></div><div class="line">    <span class="comment">// console.log(person.sex)  //man</span></div><div class="line">    person.say(<span class="string">'father'</span>) <span class="comment">//class say no zs father</span></div><div class="line">&#125;)()</div></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//子类</span></div><div class="line"><span class="keyword">class</span> CPerson <span class="keyword">extends</span> Person &#123;</div><div class="line">        <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>=1</span>) &#123;</div><div class="line">            <span class="keyword">super</span>(name, age);</div><div class="line">        &#125;</div><div class="line">        say(str:<span class="built_in">string</span>) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"CPerson "</span> + str)</div><div class="line">            <span class="keyword">super</span>.say(<span class="string">'children'</span>)</div><div class="line">        &#125;</div><div class="line">        run(distance: <span class="built_in">number</span>=<span class="number">100</span>) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" run "</span> + distance)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> cp:CPerson = <span class="keyword">new</span> CPerson(<span class="string">"ls"</span>)</div><div class="line">    <span class="comment">// CPerson.prototype.sex = 'woman'</span></div><div class="line">    <span class="comment">// cp.sex = "woman"</span></div><div class="line">    <span class="comment">// console.log(cp.sex) //woman</span></div><div class="line">    cp.say(<span class="string">"child"</span>)  <span class="comment">//CPerson child  CPerson class say no ls</span></div></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//父类的引用指向子类对象，不同类型的子类针对相同方法产生不同的行为</span></div><div class="line"><span class="keyword">class</span> CCPerson <span class="keyword">extends</span> Person &#123;</div><div class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>=1</span>) &#123;</div><div class="line">        <span class="keyword">super</span>(name, age);</div><div class="line">    &#125;</div><div class="line">    run(distance: <span class="built_in">number</span> = <span class="number">1000</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" run "</span> + distance)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> ccp:CCPerson = <span class="keyword">new</span> CCPerson(<span class="string">'ww'</span>)</div><div class="line"><span class="keyword">var</span> cp1:Person = <span class="keyword">new</span> CPerson(<span class="string">"zl"</span>) <span class="comment">//使用父类型创建子类对象</span></div><div class="line"><span class="keyword">var</span> ccp1:Person = <span class="keyword">new</span> CCPerson(<span class="string">"qq"</span>)</div><div class="line">person.run() <span class="comment">//zs run 10</span></div><div class="line">cp.run() <span class="comment">//ls run 100</span></div><div class="line">ccp.run() <span class="comment">//ww run 1000</span></div><div class="line">cp1.run() <span class="comment">//zl run 100</span></div><div class="line">ccp1.run() <span class="comment">//qq run 1000</span></div></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p><code>protected</code> 修饰符与 <code>private</code> 修饰符的行为很相似，但有一点不同，<code>protected</code>成员在派生类中仍然可以访问。例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line">访问修饰符: 用来描述类内部的属性/方法的可访问性</div><div class="line">  public: 默认值, 公开的外部也可以访问</div><div class="line">  private: 只能类内部可以访问</div><div class="line">  protected: 类内部和子类可以访问</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">class</span> Animal &#123;</div><div class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span></div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">constructor</span> (<span class="params">name: <span class="built_in">string</span></span>) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> run (distance: <span class="built_in">number</span>=<span class="number">0</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this.name&#125;</span> run <span class="subst">$&#123;distance&#125;</span>m`</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Person <span class="keyword">extends</span> Animal &#123;</div><div class="line">  <span class="keyword">private</span> age: <span class="built_in">number</span> = <span class="number">18</span></div><div class="line">  <span class="keyword">protected</span> sex: <span class="built_in">string</span> = <span class="string">'男'</span></div><div class="line"></div><div class="line">  run (distance: <span class="built_in">number</span>=<span class="number">5</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Person jumping...'</span>)</div><div class="line">    <span class="keyword">super</span>.run(distance)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Student <span class="keyword">extends</span> Person &#123;</div><div class="line">  run (distance: <span class="built_in">number</span>=<span class="number">6</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Student jumping...'</span>)</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.sex) <span class="comment">// 子类能看到父类中受保护的成员</span></div><div class="line">    <span class="comment">// console.log(this.age) //  子类看不到父类中私有的成员</span></div><div class="line"></div><div class="line">    <span class="keyword">super</span>.run(distance)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Person(<span class="string">'abc'</span>).name) <span class="comment">// 公开的可见</span></div><div class="line"><span class="comment">// console.log(new Person('abc').sex) // 受保护的不可见</span></div><div class="line"><span class="comment">// console.log(new Person('abc').age) //  私有的不可见</span></div></pre></td></tr></table></figure><h3 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h3><p>使用 readonly 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Person &#123;</div><div class="line">    readonly name: <span class="built_in">string</span> = <span class="string">'abc'</span></div><div class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//参数属性通过给构造函数参数前面添加一个访问限定符来声明。使用 private 限定一个参数属性会声明并初始化一个私有成员；对于 public 和 protected 来说也是一样。</span></div><div class="line"><span class="keyword">class</span> Person &#123;</div><div class="line">  <span class="comment">//仅在构造函数里使用 readonly name: string 参数来创建和初始化 name 成员。 我们把声明和赋值合并至一处</span></div><div class="line">  <span class="keyword">constructor</span>(<span class="params">readonly name: <span class="built_in">string</span></span>) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="存取器-getter-和-setter"><a href="#存取器-getter-和-setter" class="headerlink" title="存取器 getter 和 setter"></a>存取器 getter 和 setter</h3><p>控制对对象成员的访问</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line">静态属性, 是类对象的属性</div><div class="line">非静态属性, 是类的实例对象的属性</div><div class="line">*/</div><div class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">class</span> Person &#123;</div><div class="line">        <span class="comment">//类中有一个默认的name属性,所以下行代码会报错</span></div><div class="line">        <span class="comment">// static name : string</span></div><div class="line">        firstName: <span class="built_in">string</span> = <span class="string">'A'</span></div><div class="line">        lastName: <span class="built_in">string</span> = <span class="string">'B'</span></div><div class="line">        <span class="keyword">static</span> sex: <span class="built_in">string</span> = <span class="string">"man"</span></div><div class="line">        <span class="keyword">constructor</span>(<span class="params">firstName:<span class="built_in">string</span>, lastName:<span class="built_in">string</span></span>) &#123;</div><div class="line">            <span class="keyword">this</span>.firstName = firstName</div><div class="line">            <span class="keyword">this</span>.lastName = lastName</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">get</span> fullName () &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">'-'</span> + <span class="keyword">this</span>.lastName</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">set</span> fullName (value) &#123;</div><div class="line">            <span class="keyword">const</span> names = value.split(<span class="string">'-'</span>)</div><div class="line">            <span class="keyword">this</span>.firstName = names[<span class="number">0</span>]</div><div class="line">            <span class="keyword">this</span>.lastName = names[<span class="number">1</span>]</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">static</span> say() &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"static function"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">"东方"</span>,<span class="string">"不败"</span>)</div><div class="line">    <span class="built_in">console</span>.log(p.fullName) <span class="comment">//东方-不败</span></div><div class="line">    <span class="comment">// console.log(p.sex)// 报错</span></div><div class="line">    <span class="built_in">console</span>.log(Person.sex)<span class="comment">// man</span></div><div class="line">    Person.sex = <span class="string">"woman"</span></div><div class="line">    <span class="built_in">console</span>.log(Person.sex)<span class="comment">// woman</span></div><div class="line">    Person.say() <span class="comment">//static function</span></div><div class="line"></div><div class="line">    p.fullName = <span class="string">'东方-不败'</span> <span class="comment">//东方 不败</span></div><div class="line">    <span class="built_in">console</span>.log(p.firstName, p.lastName)</div><div class="line">&#125;)()</div></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>1、抽象类做为其它派生类的基类使用。 它们不能被实例化</p><p>2、不同于接口，抽象类可以包含成员的实现细节</p><p>3、<code>abstract</code> 关键字是用于定义抽象类和在抽象类内部定义抽象方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</div><div class="line">        <span class="comment">//抽象属性</span></div><div class="line">        <span class="keyword">abstract</span> name:<span class="built_in">string</span> = <span class="string">"animal"</span></div><div class="line">        <span class="comment">// 抽象类， 不能有具体实现</span></div><div class="line">        <span class="keyword">abstract</span> eat()</div><div class="line">        <span class="comment">//实例方法</span></div><div class="line">        say() &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"mou mou"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//不能直接实例话</span></div><div class="line">    <span class="comment">// var animal:Animal = new Animal()</span></div><div class="line">    <span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</div><div class="line">        name:<span class="built_in">string</span> = <span class="string">"animal"</span></div><div class="line">        eat() &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"dog dog"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> dog:Animal = <span class="keyword">new</span> Dog()</div><div class="line">    dog.eat() <span class="comment">//dog dog</span></div><div class="line">    dog.say() <span class="comment">//mou mou</span></div><div class="line">    <span class="built_in">console</span>.log(dog.name) <span class="comment">//animal</span></div><div class="line">&#125;)()</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ts类-（和java基本一样）&quot;&gt;&lt;a href=&quot;#ts类-（和java基本一样）&quot; class=&quot;headerlink&quot; title=&quot;ts类  （和java基本一样）&quot;&gt;&lt;/a&gt;ts类  （和java基本一样）&lt;/h2&gt;&lt;figure class=&quot;high</summary>
      
    
    
    
    
    <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>ts接口</title>
    <link href="http://yoursite.com/2021/03/29/ts%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2021/03/29/ts%E6%8E%A5%E5%8F%A3/</id>
    <published>2021-03-29T07:37:26.000Z</published>
    <updated>2021-03-29T09:31:48.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ts接口"><a href="#ts接口" class="headerlink" title="ts接口"></a>ts接口</h2><p>TypeScript 的核心原则之一是对值所具有的结构进行类型检查。我们使用接口（Interfaces）来定义对象的类型。<code>接口是对象的状态(属性)和行为(方法)的抽象(描述)</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义人的接口</span></div><div class="line"><span class="keyword">interface</span> IPerson &#123;</div><div class="line">  readonly id: <span class="built_in">number</span> <span class="comment">//只读</span></div><div class="line">  name: <span class="built_in">string</span></div><div class="line">  age: <span class="built_in">number</span></div><div class="line">  sex？: <span class="built_in">string</span> <span class="comment">//可选属性</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> person1: IPerson = &#123;</div><div class="line">  id: <span class="number">1</span>,</div><div class="line">  name: <span class="string">'tom'</span>,</div><div class="line">  age: <span class="number">20</span>,</div><div class="line">&#125;</div><div class="line">person1.id = <span class="number">10</span> <span class="comment">//编译不通过</span></div><div class="line">person1.sex = <span class="string">'man'</span></div></pre></td></tr></table></figure><h3 id="ts函数类型"><a href="#ts函数类型" class="headerlink" title="ts函数类型"></a>ts函数类型</h3><p>为了使用接口表示函数类型，我们需要给接口定义一个调用签名。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line">接口可以描述函数类型(参数的类型与返回的类型)</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">interface</span> SearchFunc &#123;</div><div class="line">  <span class="comment">//定义一个调用签名</span></div><div class="line">  <span class="comment">//它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型</span></div><div class="line">  (source: <span class="built_in">string</span>, subString: <span class="built_in">string</span>): <span class="built_in">boolean</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> mySearch: SearchFunc = <span class="function"><span class="keyword">function</span> (<span class="params">source: <span class="built_in">string</span>, sub: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> source.search(sub) &gt; <span class="number">-1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(mySearch(<span class="string">'abcd'</span>, <span class="string">'bc'</span>)) <span class="comment">//true</span></div></pre></td></tr></table></figure><h3 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//和java相似  继承 实现</span></div><div class="line"><span class="comment">/* </span></div><div class="line">类类型: 实现接口</div><div class="line">1. 一个类可以实现多个接口</div><div class="line">2. 一个接口可以继承多个接口</div><div class="line">*/</div><div class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">//定义一个接口</span></div><div class="line">    <span class="keyword">interface</span> Ifly &#123;</div><div class="line">        <span class="comment">//定义一个没有任何实现的方法</span></div><div class="line">        fly():<span class="built_in">void</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">class</span> Fly <span class="keyword">implements</span> Ifly &#123;</div><div class="line">        fly() &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'fly'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> fly = <span class="keyword">new</span> Fly()</div><div class="line">    fly.fly()</div><div class="line"></div><div class="line">    <span class="keyword">interface</span> Ifly2 &#123;</div><div class="line">        <span class="comment">//定义一个没有任何实现的方法</span></div><div class="line">        fly2():<span class="built_in">void</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">class</span> Fly2 <span class="keyword">implements</span> Ifly, Ifly2 &#123;</div><div class="line">        fly() &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'fly1'</span>)</div><div class="line">        &#125;</div><div class="line">        fly2() &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'fly2'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> fly2 = <span class="keyword">new</span> Fly2()</div><div class="line">    fly2.fly()</div><div class="line">    fly2.fly2()</div><div class="line">    <span class="keyword">interface</span> Ifly3 <span class="keyword">extends</span> Ifly, Ifly2 &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">class</span> Fly3 <span class="keyword">implements</span> Ifly3 &#123;</div><div class="line">        fly() &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'fly3'</span>)</div><div class="line">        &#125;</div><div class="line">        fly2() &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'fly3'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> fly3 = <span class="keyword">new</span> Fly3()</div><div class="line">    fly3.fly()</div><div class="line">    fly3.fly2()</div><div class="line">&#125;)()</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ts接口&quot;&gt;&lt;a href=&quot;#ts接口&quot; class=&quot;headerlink&quot; title=&quot;ts接口&quot;&gt;&lt;/a&gt;ts接口&lt;/h2&gt;&lt;p&gt;TypeScript 的核心原则之一是对值所具有的结构进行类型检查。我们使用接口（Interfaces）来定义对象的类型。&lt;</summary>
      
    
    
    
    
    <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>js数组操作</title>
    <link href="http://yoursite.com/2021/03/29/js%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2021/03/29/js%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/</id>
    <published>2021-03-29T02:37:26.000Z</published>
    <updated>2021-03-29T06:53:06.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js数组操作"><a href="#js数组操作" class="headerlink" title="js数组操作"></a>js数组操作</h2><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">push()：向数组的末尾添加一个或多个元素，并返回新的长度</div><div class="line"></div><div class="line">pop()：删除数组的最后一个元素，数组的长度减<span class="number">1</span>，并且返回删除元素的值(数组为空时，不改变数组，并返回<span class="literal">undefined</span>)</div><div class="line"></div><div class="line">unshift()：向数组的头部添加一个或多个元素，返回新的长度</div><div class="line"></div><div class="line">shift()：删除并返回数组的第一个元素</div><div class="line"></div><div class="line">reverse()：颠倒数组中的元素顺序</div><div class="line"></div><div class="line">indexOf(x, start)、lastIndexOf()：查找数组元素的位置，参数：要查的项和起点位置索引</div></pre></td></tr></table></figure><h3 id="排序-sort-gt-对数组元素进行排序（默认按照ASCII）"><a href="#排序-sort-gt-对数组元素进行排序（默认按照ASCII）" class="headerlink" title="排序  sort   =&gt;  对数组元素进行排序（默认按照ASCII）"></a>排序  sort   =&gt;  对数组元素进行排序（默认按照ASCII）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">5</span>,<span class="number">1000</span>,<span class="number">25</span>,<span class="number">1</span>];</div><div class="line">arr.sort(); <span class="comment">// [1, 10, 1000, 25, 5]   默认按照首字母顺序排</span></div><div class="line">arr.sort(<span class="function">(<span class="params">a, b</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">return</span> a-b;</div><div class="line">&#125;);   <span class="comment">// [1, 5, 10, 25, 1000]  从大到小排序</span></div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"> * @function 指定数组排序规则</div><div class="line"> * @param str &#123;Array&#125; 单个属性</div><div class="line"> * @param num &#123;Number&#125; 是否升序 默认降序</div><div class="line"> * @version 1.0.0</div><div class="line"> * @description 用于图表的排序</div><div class="line"> */</div><div class="line">sortBy() &#123;</div><div class="line">    <span class="keyword">let</span> num = <span class="number">1</span></div><div class="line">    <span class="keyword">let</span> arr = []</div><div class="line">    <span class="comment">//最后一个参数是数字</span></div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">arguments</span>[<span class="built_in">arguments</span>.length - <span class="number">1</span>] === <span class="string">'number'</span> &amp;&amp; !<span class="built_in">isNaN</span>(<span class="built_in">arguments</span>[<span class="built_in">arguments</span>.length - <span class="number">1</span>])) &#123;</div><div class="line">        <span class="comment">//获取最后一个参数的值</span></div><div class="line">        num = <span class="built_in">arguments</span>[<span class="built_in">arguments</span>.length - <span class="number">1</span>] ? <span class="number">1</span> : <span class="number">-1</span></div><div class="line">        arr = <span class="built_in">arguments</span>.slice(<span class="number">0</span>, <span class="built_in">arguments</span>.length - <span class="number">1</span>)</div><div class="line">    &#125;<span class="keyword">else</span> &#123;<span class="comment">//最后一个参数不是数字</span></div><div class="line">        arr = <span class="built_in">arguments</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// num = num ? 1 : -1</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="comment">// 获取其他参数的值</span></div><div class="line">        <span class="keyword">let</span> a1 = <span class="number">0</span></div><div class="line">        <span class="keyword">let</span> b1 = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len =  arr.length; i &lt; len; i++) &#123;</div><div class="line">            a1 += a[arr[i]]</div><div class="line">            b1 += b[arr[i]]</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(a1 &gt; b1)&#123;</div><div class="line">            <span class="keyword">return</span> num * <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(a1 &lt; b1)&#123;</div><div class="line">            <span class="keyword">return</span> num * <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用</span></div><div class="line">data.sort(<span class="keyword">this</span>.sortBy(<span class="string">'isLeader'</span>, <span class="string">'isNotLeader'</span>))</div></pre></td></tr></table></figure><h3 id="concat-：链接两个或多个数组"><a href="#concat-：链接两个或多个数组" class="headerlink" title="concat()：链接两个或多个数组"></a>concat()：链接两个或多个数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</span></div><div class="line">arrayObject.concat(arrayX,arrayX,......,arrayX)</div><div class="line"></div><div class="line"><span class="comment">//可用于对数组进行深拷贝 （不行）</span></div><div class="line"><span class="comment">//数组中的对象等还是没有进行深拷贝</span></div><div class="line"><span class="keyword">var</span> arr1 = [].concat(arr)</div></pre></td></tr></table></figure><h3 id="join-gt-把所有的元素放进一个字符串，通过指定的分隔符分割"><a href="#join-gt-把所有的元素放进一个字符串，通过指定的分隔符分割" class="headerlink" title="join =&gt; 把所有的元素放进一个字符串，通过指定的分隔符分割"></a>join =&gt; 把所有的元素放进一个字符串，通过指定的分隔符分割</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">arr.join(<span class="string">'-'</span>) <span class="comment">//"1-2-3"</span></div><div class="line"><span class="keyword">var</span> arr1 = []</div><div class="line">arr1.join(<span class="string">"-"</span>)<span class="comment">//""</span></div></pre></td></tr></table></figure><h3 id="splice-gt-删除元素，并向数组添加新元素"><a href="#splice-gt-删除元素，并向数组添加新元素" class="headerlink" title="splice =&gt; 删除元素，并向数组添加新元素"></a>splice =&gt; 删除元素，并向数组添加新元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</div><div class="line">arr.splice(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [3, 4, 5]   删除第三个元素以后的三个数组元素</span></div><div class="line"> </div><div class="line">arr.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">8</span>);  <span class="comment">// []   在第三个元素之前插入7和8</span></div><div class="line">arr; <span class="comment">// [1, 2, 7, 8, 9]</span></div><div class="line"> </div><div class="line">arr.splice(<span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">10</span>);  <span class="comment">// [7, 8, 9]  删除第三个元素以后的三个数组元素，并用9和10代替</span></div><div class="line">arr;  <span class="comment">// [1, 2, 9, 10]</span></div></pre></td></tr></table></figure><h3 id="slice-start-end-gt-从某个已有的数组返回选定的元素-没有end参数时就到数组结尾"><a href="#slice-start-end-gt-从某个已有的数组返回选定的元素-没有end参数时就到数组结尾" class="headerlink" title="slice(start, end) =&gt; 从某个已有的数组返回选定的元素(没有end参数时就到数组结尾)"></a>slice(start, end) =&gt; 从某个已有的数组返回选定的元素(没有end参数时就到数组结尾)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//该方法返回一个新的数组，包含从 start 到 end （不包括该元素，数学上来讲是左闭右开，即包含左，不含右）的 arrayObject 中的元素</span></div><div class="line"><span class="comment">//可用于数组深拷贝(不行)</span></div><div class="line"><span class="comment">//不会影响原数组</span></div><div class="line"><span class="comment">////数组中的对象等还是没有进行深拷贝</span></div><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> arr2 = arr1.slice(<span class="number">0</span>);</div><div class="line">arr1[<span class="number">0</span>] = <span class="number">4</span>;</div><div class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">//4, 2, 3</span></div><div class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">//1, 2, 3</span></div></pre></td></tr></table></figure><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params">o</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> _t;</div><div class="line">    <span class="keyword">return</span> ((_t = <span class="keyword">typeof</span>(o)) == <span class="string">"object"</span> ? o==<span class="literal">null</span> &amp;&amp; <span class="string">"null"</span> || <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>,<span class="number">-1</span>):_t).toLowerCase();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">destination,source</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> source)&#123;</div><div class="line">        <span class="keyword">if</span>(getType(source[p])==<span class="string">"array"</span>||getType(source[p])==<span class="string">"object"</span>)&#123;</div><div class="line">            destination[p]=getType(source[p])==<span class="string">"array"</span>?[]:&#123;&#125;;</div><div class="line">            <span class="built_in">arguments</span>.callee(destination[p],source[p]);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            destination[p]=source[p];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> test=&#123;<span class="attr">a</span>:<span class="string">"ss"</span>,<span class="attr">b</span>:<span class="string">"dd"</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="string">"css"</span>,<span class="attr">e</span>:<span class="string">"cdd"</span>&#125;&#125;;</div><div class="line"><span class="keyword">var</span> test1=&#123;&#125;;</div><div class="line">extend(test1,test);</div><div class="line">test1.c.d=<span class="string">"change"</span>; <span class="comment">//改变test1的c属性对象的d属性</span></div><div class="line">alert(test.c.d); <span class="comment">//不影响test</span></div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;js数组操作&quot;&gt;&lt;a href=&quot;#js数组操作&quot; class=&quot;headerlink&quot; title=&quot;js数组操作&quot;&gt;&lt;/a&gt;js数组操作&lt;/h2&gt;&lt;h3 id=&quot;常用&quot;&gt;&lt;a href=&quot;#常用&quot; class=&quot;headerlink&quot; title=&quot;常用&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="js 数组" scheme="http://yoursite.com/tags/js-数组/"/>
    
  </entry>
  
  <entry>
    <title>js遍历数组</title>
    <link href="http://yoursite.com/2021/03/29/js%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2021/03/29/js%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84/</id>
    <published>2021-03-29T02:20:04.000Z</published>
    <updated>2021-03-30T01:44:10.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS-遍历数组"><a href="#JS-遍历数组" class="headerlink" title="JS 遍历数组"></a>JS 遍历数组</h1><h2 id="1-普通for循环"><a href="#1-普通for循环" class="headerlink" title="1.普通for循环"></a>1.普通for循环</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; loopTimes; i++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-弱化for循环"><a href="#2-弱化for循环" class="headerlink" title="2.弱化for循环"></a>2.弱化for循环</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; arr[j]!=<span class="literal">null</span>; j++) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-foreach循环"><a href="#3-foreach循环" class="headerlink" title="3.foreach循环"></a>3.foreach循环</h2><p>方法对数组的每个元素执行一次提供的函数。总是返回undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//forEach方法中的function回调有三个参数：</span></div><div class="line"><span class="comment">//第一个参数是遍历的数组内容，</span></div><div class="line"><span class="comment">//第二个参数是对应的数组索引，</span></div><div class="line"><span class="comment">//第三个参数是数组本身,可用this调用</span></div><div class="line">head.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, arr</span>) </span>&#123;</div><div class="line">    element.checked = <span class="literal">true</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="4-foreach变种"><a href="#4-foreach变种" class="headerlink" title="4.foreach变种"></a>4.foreach变种</h2><p><code>document.querySelectorAll()</code>返回的并不是我们想当然的数组(对数组进行解析是html的每个元素节点列表，使用getElementsByTagNames()也是一样)，而是<code>NodeList</code>，对<code>NodeList</code>，它里面没有<code>.forEach</code>方法，我们使用了这样的方法进行循环:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//调用数组的原型相关方法</span></div><div class="line"><span class="built_in">Array</span>.prototype.forEach.call(arr,<span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;  </div><div class="line">   </div><div class="line">&#125;);</div><div class="line"><span class="comment">//简写</span></div><div class="line">[].prototype.forEach.call(arr,<span class="function"><span class="keyword">function</span>(<span class="params">el, index, arr1</span>)</span>&#123;  </div><div class="line">   </div><div class="line">&#125;);</div><div class="line"><span class="comment">//参数</span></div><div class="line"><span class="comment">//arr 传入的参数NodeList</span></div><div class="line"><span class="comment">//.call() 用arr替换[]作为传入参数</span></div><div class="line"><span class="comment">//其余参数和foreach一样</span></div></pre></td></tr></table></figure><h2 id="5-for-in循环（不建议使用）"><a href="#5-for-in循环（不建议使用）" class="headerlink" title="5.for in循环（不建议使用）"></a>5.for in循环（不建议使用）</h2><p>1).index索引为字符串型数字，不能直接进行几何运算。</p><p>2).遍历顺序有可能不是按照实际数组的内部顺序。</p><p>3).使用for in会遍历数组所有的可枚举属性，包括原型。</p><p>缺点：给数组添加了原型函数，导致循环的结果多了一个函数。将Array数组的原型添加了方法，导致循环的时候将该方法也遍历到了，所以for…in…循环最好使用在遍历对象上，不要用来遍历数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="6-for-of-循环-（可遍历Symbol）https-www-cnblogs-com-wangxiayun-p-10194806-html"><a href="#6-for-of-循环-（可遍历Symbol）https-www-cnblogs-com-wangxiayun-p-10194806-html" class="headerlink" title="6.for of 循环 （可遍历Symbol）https://www.cnblogs.com/wangxiayun/p/10194806.html"></a>6.for of 循环 （可遍历Symbol）<a href="https://www.cnblogs.com/wangxiayun/p/10194806.html" target="_blank" rel="external">https://www.cnblogs.com/wangxiayun/p/10194806.html</a></h2><p>for…of是ES6新增的遍历方式，它提供了统一的遍历机制。所有实现了[Symbol.iterator]接口的对象都可以被遍历。<code>for...of</code>循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如<code>arguments</code>对象、DOM NodeList 对象）、Generator 对象，以及字符串。</p><p>优点：</p><ul><li>有着同<code>for...in</code>一样的简洁语法，但是没有<code>for...in</code>那些缺点</li><li>不同用于<code>forEach</code>方法，它可以与<code>break</code>、<code>continue</code>和<code>return</code>配合使用</li><li>提供了遍历所有数据结构的统一操作接口</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> j = <span class="number">0</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">of</span> <span class="keyword">this</span>.hasSelectedList) &#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.hasSelectedList[i] == id) &#123;</div><div class="line">        j = i</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">this</span>.hasSelectedList.splice(j,<span class="number">1</span>)</div></pre></td></tr></table></figure><h3 id="for…of获取索引"><a href="#for…of获取索引" class="headerlink" title="for…of获取索引"></a>for…of获取索引</h3><ul><li><code>entries</code>返回一个遍历器对象，用来遍历<code>[键名, 键值]</code>组成的数组。对于数组，键名就是索引值；对于 Set，键名与键值相同。Map 结构的 Iterator 接口，默认就是调用<code>entries</code>方法。</li><li><code>keys</code>返回一个遍历器对象，用来遍历所有的键名。</li><li><code>values</code>返回一个遍历器对象，用来遍历所有的键值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]; </div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> arr.entries) &#123; </div><div class="line"><span class="built_in">console</span>.log(pair); </div><div class="line">&#125; <span class="comment">// [0, 'a'] // [1, 'b'] // [2, 'c']</span></div></pre></td></tr></table></figure><h3 id="类似数组的对象"><a href="#类似数组的对象" class="headerlink" title="类似数组的对象"></a>类似数组的对象</h3><p>类似数组的对象包括好几类。下面是<code>for...of</code>循环用于字符串、DOM NodeList 对象、<code>arguments</code>对象的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 字符串 </span></div><div class="line"><span class="keyword">let</span> str = <span class="string">"hello"</span>; </div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> s <span class="keyword">of</span> str) &#123;</div><div class="line"> <span class="built_in">console</span>.log(s); <span class="comment">// h e l l o </span></div><div class="line">&#125; <span class="comment">// DOM NodeList对象 </span></div><div class="line"><span class="keyword">let</span> paras = <span class="built_in">document</span>.querySelectorAll(<span class="string">"p"</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">of</span> paras) &#123; </div><div class="line">    p.classList.add(<span class="string">"test"</span>); </div><div class="line">&#125; <span class="comment">// arguments对象 </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printArgs</span> </span>&#123; </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> <span class="built_in">arguments</span>) &#123; </div><div class="line">        <span class="built_in">console</span>.log(x); </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line">printArgs(<span class="string">'a'</span>, <span class="string">'b'</span>); <span class="comment">// 'a' // 'b'</span></div></pre></td></tr></table></figure><p>并不是所有类似数组的对象都具有 Iterator 接口，一个简便的解决方法，就是使用<code>Array.from</code>方法将其转为数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">let arrayLike = &#123; </div><div class="line">    length: 2, </div><div class="line">    0: &apos;a&apos;, </div><div class="line">    1: &apos;b&apos; </div><div class="line">&#125;; </div><div class="line">// 报错</div><div class="line">for (let x of arrayLike) &#123; </div><div class="line">   console.log(x); </div><div class="line">&#125; </div><div class="line">// 正确 </div><div class="line">for (let x of Array.from(arrayLike)) &#123; </div><div class="line">  console.log(x); // &apos;a&apos; // &apos;b&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="普通的对象"><a href="#普通的对象" class="headerlink" title="普通的对象"></a>普通的对象</h3><p>对于普通的对象，<code>for...of</code>结构不能直接使用，会报错，必须部署了 Iterator 接口后才能使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> es6 = &#123; </div><div class="line">    <span class="attr">edition</span>: <span class="number">6</span>, </div><div class="line">    <span class="attr">committee</span>: <span class="string">"TC39"</span>, </div><div class="line">    <span class="attr">standard</span>: <span class="string">"ECMA-262"</span> </div><div class="line">&#125;; </div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> e <span class="keyword">in</span> es6) &#123; </div><div class="line">    <span class="built_in">console</span>.log(e); </div><div class="line">&#125; <span class="comment">// edition // committee // standard </span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> e <span class="keyword">of</span> es6) &#123;</div><div class="line">    <span class="built_in">console</span>.log(e); </div><div class="line">&#125; <span class="comment">// TypeError: es6 is not iterable</span></div></pre></td></tr></table></figure><p>解决方法是，使用<code>Object.keys</code>方法将对象的键名生成一个数组，然后遍历这个数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> es6 = &#123; </div><div class="line">    <span class="attr">edition</span>: <span class="number">6</span>, </div><div class="line">    <span class="attr">committee</span>: <span class="string">"TC39"</span>, </div><div class="line">    <span class="attr">standard</span>: <span class="string">"ECMA-262"</span> </div><div class="line">&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(es6)) &#123; </div><div class="line">    <span class="built_in">console</span>.log(key + <span class="string">': '</span> + es6[key]); </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="7、map"><a href="#7、map" class="headerlink" title="7、map"></a>7、map</h3><p>调用的数组的每个元素传递给指定的函数，并返回一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</div><div class="line"><span class="keyword">var</span> newArr1 = arr.map(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span> == <span class="number">0</span> ? x % <span class="number">2</span> : x)</div><div class="line"><span class="built_in">console</span>.log(newArr1) <span class="comment">//[1, 0, 3, 0, 5, 0]</span></div><div class="line"></div><div class="line"><span class="comment">//map()方法创建了一个新数组，但新数组并不是在遍历完arr后才被赋值的，而是每遍历一次就得到一个值</span></div><div class="line"><span class="keyword">var</span> newArr2 = arr.map(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> x % <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(newArr2) <span class="comment">//[undefined, 0, undefined, 0, undefined, 0]</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> newArr3 = arr.map(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> x % <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(newArr3) <span class="comment">//[1, 0, 3, 0, 5, 0]</span></div></pre></td></tr></table></figure><h3 id="8、filter"><a href="#8、filter" class="headerlink" title="8、filter"></a>8、filter</h3><h3 id="参考：-https-www-jianshu-com-p-494226d9dd2c"><a href="#参考：-https-www-jianshu-com-p-494226d9dd2c" class="headerlink" title="参考： https://www.jianshu.com/p/494226d9dd2c"></a>参考： <a href="https://www.jianshu.com/p/494226d9dd2c" target="_blank" rel="external">https://www.jianshu.com/p/494226d9dd2c</a></h3><p>filter用于对数组进行<strong>过滤</strong>。它创建一个新数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p><p>注意：filter()不会对空数组进行检测、不会改变原始数组</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//函数 function 为必须，数组中的每个元素都会执行这个函数。且如果返回值为 true，则该元素被保留；</div><div class="line">//函数的第一个参数 currentValue 也为必须，代表当前元素的值。</div><div class="line">//函数的第二个参数 index 为数组索引。</div><div class="line">//函数的第三个参数 arr 为当前数组。</div><div class="line">Array.filter(function(currentValue, indedx, arr), thisValue)</div><div class="line"></div><div class="line">let arr = [1, 2, 3, 4, 5, 6];</div><div class="line">let newArr = arr.filter(value =&gt; value % 2 == 0);</div><div class="line">console.log(newArr) //[2, 4, 6]</div><div class="line"></div><div class="line">let ar1 = []</div><div class="line">let newArr1 = arr.filter(value =&gt; value % 2 == 0);</div><div class="line">console.log(newArr) //[]</div></pre></td></tr></table></figure><h3 id="9、every"><a href="#9、every" class="headerlink" title="9、every"></a>9、every</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数组的每一项都满足给定条件则返回true</span></div><div class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line">arr.every(<span class="function">(<span class="params">item,index,array</span>) =&gt;</span> &#123;<span class="keyword">return</span> item &gt; <span class="number">2</span>;&#125;);  <span class="comment">// false</span></div></pre></td></tr></table></figure><h3 id="10、some"><a href="#10、some" class="headerlink" title="10、some"></a>10、some</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数组中只要有一项满足条件就返回true</span></div><div class="line">arr.some(<span class="function">(<span class="params">item,index,array</span>) =&gt;</span> &#123;<span class="keyword">return</span> item &gt; <span class="number">2</span>;&#125;); <span class="comment">//true</span></div></pre></td></tr></table></figure><h3 id="11、reduce"><a href="#11、reduce" class="headerlink" title="11、reduce"></a>11、reduce</h3><h3 id="参考https-www-jianshu-com-p-e375ba1cfc47"><a href="#参考https-www-jianshu-com-p-e375ba1cfc47" class="headerlink" title="参考https://www.jianshu.com/p/e375ba1cfc47"></a>参考<a href="https://www.jianshu.com/p/e375ba1cfc47" target="_blank" rel="external">https://www.jianshu.com/p/e375ba1cfc47</a></h3><h3 id="12、find-findIndex"><a href="#12、find-findIndex" class="headerlink" title="12、find   findIndex"></a>12、find   findIndex</h3><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p> 返回通过测试的数组的第一个元素的值</p><p>在第一次调用 callback 函数时会确定元素的索引范围，因此在 find 方法开始执行之后添加到数组的新元素将不会被 callback 函数访问到。如果数组中一个尚未被callback函数访问到的元素的值被callback函数所改变，那么当callback函数访问到它时，它的值是将是根据它在数组中的索引所访问到的当前值。被删除的元素仍旧会被访问到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//value:必须，代表当前元素，其他四个参数都是可选，index代表当前索引值，arr代表当前的数组，thisValue代表传递给函数的值，一般用this值，如果这个参数为空，undefined会传递给this值</span></div><div class="line"><span class="comment">//返回值：返回符合测试条件的第一个数组元素的值，如果没有符合条件的则返回undefined。</span></div><div class="line">array.find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>),<span class="title">thisValue</span>)</span></div></pre></td></tr></table></figure><h4 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h4><p>方法传入一个测试条件（函数），返回符合条件的数组第一个元素位置（index）</p><p>方法为数组中的每个元素都调用一次函数执行</p><p>当数组中的元素在测试条件时返回 true 时, findIndex() 返回符合条件的元素的索引位置，之后的值不会再调用    执行函数。<br>如果没有符合条件的元素返回 -1</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JS-遍历数组&quot;&gt;&lt;a href=&quot;#JS-遍历数组&quot; class=&quot;headerlink&quot; title=&quot;JS 遍历数组&quot;&gt;&lt;/a&gt;JS 遍历数组&lt;/h1&gt;&lt;h2 id=&quot;1-普通for循环&quot;&gt;&lt;a href=&quot;#1-普通for循环&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="js 数组" scheme="http://yoursite.com/tags/js-数组/"/>
    
  </entry>
  
  <entry>
    <title>页面传参</title>
    <link href="http://yoursite.com/2021/03/29/%E9%A1%B5%E9%9D%A2%E4%BC%A0%E5%8F%82/"/>
    <id>http://yoursite.com/2021/03/29/%E9%A1%B5%E9%9D%A2%E4%BC%A0%E5%8F%82/</id>
    <published>2021-03-29T01:37:30.000Z</published>
    <updated>2021-03-29T01:54:29.097Z</updated>
    
    <content type="html"><![CDATA[<p>HTML vue 页面跳传参</p><p>一、html  ——– 通过url， js</p><p>参考：<a href="https://blog.csdn.net/qq_27628085/article/details/90763963" target="_blank" rel="external">https://blog.csdn.net/qq_27628085/article/details/90763963</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//改变当前页面， url 可以拼接参数</span></div><div class="line"><span class="built_in">window</span>.location.href=<span class="string">'hello.html'</span></div><div class="line"><span class="comment">//接收页面传值方法</span></div><div class="line"><span class="comment">//window.location.search 为 ？及以后的部分</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getParams</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + key + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>);</div><div class="line">            <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</div><div class="line">            <span class="keyword">if</span> (r != <span class="literal">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//第一个参数是要打开的页面的url,第二个参数是窗口目标，第三个参数是一个特定字符串以及一个表示新页面是否取代浏览器历史集中当前加载页面的布尔值，通常只需要传递第一个参数。第二个参数还可以是”_blank”,”_self”,”_parent”,”_top”这样的特殊窗口名称，”_blank”打开新窗口,”_self”实现的效果同window.location.href.</span></div><div class="line"><span class="built_in">window</span>.open(url, string，boolean)</div><div class="line"></div><div class="line"><span class="comment">//弹窗可能被屏蔽，有两种情况</span></div><div class="line"><span class="comment">//1.浏览器内置的屏蔽程序阻止弹出窗口，那么 window.open()很可能返回Null，此时，只要监测这个返回的值就可以确定弹出窗口是否被屏蔽</span></div><div class="line"><span class="keyword">var</span> newWin = <span class="built_in">window</span>.open(url);</div><div class="line"><span class="keyword">if</span>(newWin == <span class="literal">null</span>)&#123;</div><div class="line">    alert(<span class="string">"弹窗被阻止"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//2.浏览器扩展或其他程序阻止的弹出窗口，那么window.open()通常会抛出一个错误，因此，要像准确的检测弹出窗口是否被屏蔽，必须在检测返回值的同时，将window.open()封装在try-catch块中</span></div><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">var</span> blocked = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        <span class="keyword">var</span> index = <span class="string">"lemon"</span>;</div><div class="line">        <span class="keyword">var</span> url = <span class="string">"receive.html?index="</span>+index;</div><div class="line">        $(<span class="string">"#more"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">           <span class="keyword">var</span> newWin = <span class="built_in">window</span>.open(url);</div><div class="line">           <span class="keyword">if</span>(newWin == <span class="literal">null</span>)&#123;</div><div class="line">               blocked = <span class="literal">true</span>;</div><div class="line">           &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125; <span class="keyword">catch</span>(ex)&#123;</div><div class="line">        block = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(blocked)&#123;</div><div class="line">        alert(<span class="string">"弹出窗口被阻止"</span>);</div><div class="line">    &#125;    </div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p>二、通过localStorage 和 sessionStorage 先存本地再取出数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//localStorage是持久化的本地保存，只要你找不到其所在地没有主动删掉，就会一直存在。</span></div><div class="line"></div><div class="line"><span class="comment">//sessionStorage是会话级别的本地保存，比如一个页面关闭的时候该页面设置的sessionStorage数据会自动消失，在不同浏览器窗口不会共享的，即使是同一个浏览器的同一个页面。当会话结束，sessionstroage保存值也会清空。</span></div><div class="line"></div><div class="line"><span class="comment">//用setItem来存数据，第一个参数是 名字，第二个参数是存数的数据</span></div><div class="line"><span class="comment">//存数据</span></div><div class="line"><span class="built_in">window</span>.localStorage.setItem(“data”, “kevin”);</div><div class="line"><span class="built_in">window</span>.sessionStorage.setItem(“data”, “kevin”);</div><div class="line"></div><div class="line"><span class="comment">//用getItem来取数据，参入要取数据的 名字就好</span></div><div class="line"><span class="comment">//取数据</span></div><div class="line"></div><div class="line"><span class="built_in">window</span>.localStorage.getItem(“data”);</div><div class="line"><span class="built_in">window</span>.sessionStorage.getItem(“data”);</div><div class="line"></div><div class="line"><span class="comment">//当然如果要存储的数据是一个对象的话，就需要将对象转换为字符串，在取数据的在将字符串转为对象就可以了</span></div><div class="line"></div><div class="line"><span class="comment">//对象转字符串 JSON.stringify( ” 对象 ” )</span></div><div class="line"><span class="comment">//字符串转对象 JSON.parse( ” 字符串 ” )</span></div></pre></td></tr></table></figure><p>三、通过cookie, 具体可参考参考链接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//cookie前端与后台都可以创建保存在客户端,有默认有效时间,当然也可以清除浏览器cookie;</span></div><div class="line"></div><div class="line"><span class="comment">//创建方式,cookie键值对以等号方式连接cookie之间用分号分开;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> name=<span class="string">"liuliu"</span>;</div><div class="line"><span class="keyword">var</span> age=<span class="number">28</span>;</div><div class="line"><span class="built_in">document</span>.cookie=<span class="string">"name="</span>+name;</div><div class="line"><span class="built_in">document</span>.cookie=<span class="string">"age="</span>+age;</div><div class="line"></div><div class="line"><span class="comment">//获取全部cookie字符串:</span></div><div class="line"><span class="built_in">document</span>.cookie;</div></pre></td></tr></table></figure><p>四、vue </p><p>1、params 相当于post请求，页面跳转时参数不会在地址栏中显示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用params传参时 刷新页面参数消失</span></div><div class="line"><span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>: <span class="string">`/describe/<span class="subst">$&#123;id&#125;</span>`</span>&#125;)</div><div class="line"><span class="comment">//路由配置</span></div><div class="line">&#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/describe/:id'</span>,</div><div class="line">    <span class="attr">name</span>: <span class="string">'Describe'</span>,</div><div class="line">    <span class="attr">component</span>: Describe</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//通过路由属性中的name来确定匹配的路由，通过params来传递参数</span></div><div class="line"><span class="comment">// 路由正常配置即可</span></div><div class="line"><span class="comment">// 配置时：添加:/id 也可以不添加，不添加数据会在url后面显示，不添加数据就不会显示</span></div><div class="line"><span class="keyword">this</span>.$router.push(&#123;</div><div class="line">      <span class="comment">//params传参 需要使用 name 否则取不到；对应路由配置的 name</span></div><div class="line">           name: <span class="string">'Describe'</span>,</div><div class="line">           <span class="attr">params</span>: &#123;</div><div class="line">             <span class="attr">id</span>: id</div><div class="line">           &#125;</div><div class="line">       &#125;)</div><div class="line"><span class="comment">//接收参数</span></div><div class="line"><span class="keyword">this</span>.$route.params.id</div></pre></td></tr></table></figure><p> 2、query 相当于get请求，页面跳转时参数会在地址栏中显示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用path来匹配路由，然后通过query来传递参数；这种情况下 query传递的参数会显示在url后面?id=？</span></div><div class="line"><span class="keyword">this</span>.$router.push(&#123;</div><div class="line">               <span class="attr">path</span>: <span class="string">'/describe'</span>,</div><div class="line">               <span class="attr">query</span>: &#123;</div><div class="line">                 <span class="attr">id</span>: id</div><div class="line">               &#125;</div><div class="line">           &#125;)</div><div class="line"><span class="comment">//子组件接收参数：  </span></div><div class="line"><span class="keyword">this</span>.$route.query.id</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">参数获取，params和query区别，query参数在地址栏显示，params的参数不在地址栏显示</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">//和push的区别，push有记录一个history，replace没有</span></div><div class="line"><span class="keyword">this</span>.$router.replace(&#123;<span class="attr">name</span>: <span class="string">'/detail'</span>, <span class="attr">params</span>: &#123;<span class="attr">id</span>: e&#125;&#125;)</div><div class="line"></div><div class="line"><span class="comment">//resolve页面跳转可用新页面打开</span></div><div class="line"><span class="comment">//2.1.0版本后，使用路由对象的resolve方法解析路由，可以得到location、router、href等目标路由的信息。得到href就可以使用window.open开新窗口了（这边应用：https://segmentfault.com/q/1010000009557100下的一个回答）</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">new</span> = <span class="keyword">this</span>.$router.resolve(&#123;<span class="attr">name</span>: <span class="string">'/detail'</span>, <span class="attr">params</span>: &#123;<span class="attr">id</span>: e&#125;&#125;)</div><div class="line"><span class="built_in">window</span>.open(<span class="keyword">new</span>.href,<span class="string">'_blank'</span>)</div><div class="line"></div><div class="line"><span class="built_in">window</span>.opener() <span class="comment">//获取父窗口对象，没有则为null</span></div></pre></td></tr></table></figure><p>3.、修改路由的query参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//安装 webpack-merge</span></div><div class="line">npm i webpack-merge</div><div class="line"><span class="comment">//导入 webpack-merge</span></div><div class="line"><span class="keyword">import</span> merge <span class="keyword">from</span> <span class="string">'webpack-merge'</span>;</div><div class="line"><span class="comment">//修改原有参数</span></div><div class="line"><span class="keyword">this</span>.$router.push(&#123;</div><div class="line">    <span class="attr">query</span>:merge(<span class="keyword">this</span>.$route.query,&#123;<span class="string">'auditedDeptId'</span>:<span class="keyword">this</span>.ruleForm.auditedDeptId&#125;)</div><div class="line">&#125;)</div><div class="line"><span class="comment">//新增一个参数</span></div><div class="line"><span class="keyword">this</span>.$router.push(&#123;</div><div class="line">    <span class="attr">query</span>:merge(<span class="keyword">this</span>.$route.query,&#123;<span class="string">'newParams'</span>:<span class="string">'new'</span>&#125;)</div><div class="line">&#125;)</div><div class="line"><span class="comment">//替换所有参数</span></div><div class="line"> <span class="keyword">this</span>.$router.push(&#123;</div><div class="line">    <span class="attr">query</span>:merge(&#123;&#125;,&#123;<span class="string">'maxPrice'</span>:<span class="string">'630'</span>&#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;HTML vue 页面跳传参&lt;/p&gt;
&lt;p&gt;一、html  ——– 通过url， js&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://blog.csdn.net/qq_27628085/article/details/90763963&quot; target=&quot;_blank</summary>
      
    
    
    
    
    <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>ts使用</title>
    <link href="http://yoursite.com/2021/03/26/ts%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2021/03/26/ts%E4%BD%BF%E7%94%A8/</id>
    <published>2021-03-26T08:33:51.000Z</published>
    <updated>2021-03-29T07:36:13.694Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、基础类型"><a href="#一、基础类型" class="headerlink" title="一、基础类型"></a>一、基础类型</h2><h3 id="TypeScript-支持与-JavaScript-几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用"><a href="#TypeScript-支持与-JavaScript-几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用" class="headerlink" title="TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用"></a>TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//变量</span></div><div class="line"><span class="comment">//一开始赋值什么类型就只能使用什么类型</span></div><div class="line"><span class="keyword">let</span> xx:类型 = yy;</div></pre></td></tr></table></figure><a id="more"></a><h3 id="1、布尔型"><a href="#1、布尔型" class="headerlink" title="1、布尔型"></a>1、布尔型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//布尔类型</span></div><div class="line"><span class="keyword">let</span> flag:boolean = <span class="literal">true</span></div><div class="line"><span class="built_in">console</span>.log(flag);</div></pre></td></tr></table></figure><h3 id="2、数字类型"><a href="#2、数字类型" class="headerlink" title="2、数字类型"></a>2、数字类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数字类型</span></div><div class="line"><span class="keyword">let</span> a1: number = <span class="number">10</span> <span class="comment">// 十进制</span></div><div class="line"><span class="keyword">let</span> a2: number = <span class="number">0b1010</span>  <span class="comment">// 二进制</span></div><div class="line"><span class="keyword">let</span> a3: number = <span class="number">0o12</span> <span class="comment">// 八进制</span></div><div class="line"><span class="keyword">let</span> a4: number = <span class="number">0xa</span> <span class="comment">// 十六进制</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a1); <span class="comment">//10</span></div><div class="line"><span class="built_in">console</span>.log(a2); <span class="comment">//10</span></div><div class="line"><span class="built_in">console</span>.log(a3); <span class="comment">//10</span></div><div class="line"><span class="built_in">console</span>.log(a4); <span class="comment">//10</span></div></pre></td></tr></table></figure><h3 id="3、字符串类型"><a href="#3、字符串类型" class="headerlink" title="3、字符串类型"></a>3、字符串类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字符串类型</span></div><div class="line"><span class="keyword">let</span> str:string = <span class="string">'zs'</span></div><div class="line"><span class="built_in">console</span>.log(str); <span class="comment">//zs</span></div><div class="line"><span class="built_in">console</span>.log(str + a1); <span class="comment">// zs10</span></div></pre></td></tr></table></figure><h3 id="4、-undefined-和-null"><a href="#4、-undefined-和-null" class="headerlink" title="4、 undefined 和 null"></a>4、 undefined 和 null</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// undefined 和 null 都可以作为其他类型的子类型</span></div><div class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span></div><div class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span></div><div class="line"><span class="built_in">console</span>.log(u); <span class="comment">//undefined</span></div><div class="line"><span class="built_in">console</span>.log(n); <span class="comment">//null</span></div><div class="line"></div><div class="line"><span class="comment">//在严格模式下会报错</span></div><div class="line"><span class="comment">//在 tsconfig.json 下设置 "strict": false,   </span></div><div class="line"><span class="keyword">let</span> num:number = <span class="literal">undefined</span></div><div class="line"><span class="built_in">console</span>.log(num); <span class="comment">//undefined</span></div></pre></td></tr></table></figure><h3 id="5、数组"><a href="#5、数组" class="headerlink" title="5、数组"></a>5、数组</h3><h4 id="typeScript-像-JavaScript-一样可以操作数组元素。-有两种方式可以定义数组。-第一种，可以在元素类型后面接上-，表示由此类型元素组成的一个数组"><a href="#typeScript-像-JavaScript-一样可以操作数组元素。-有两种方式可以定义数组。-第一种，可以在元素类型后面接上-，表示由此类型元素组成的一个数组" class="headerlink" title="typeScript 像 JavaScript 一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上[]，表示由此类型元素组成的一个数组"></a>typeScript 像 JavaScript 一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在<code>元素类型后面接上[]</code>，表示由此类型元素组成的一个数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> list1: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">//数组定义后里面的数据类型就固定了</span></div><div class="line"><span class="comment">//泛型</span></div><div class="line"><span class="keyword">let</span> list2: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure><h3 id="6、元组-Tuple"><a href="#6、元组-Tuple" class="headerlink" title="6、元组(Tuple)"></a>6、元组(Tuple)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义数组时，类型和数组的个数一开始就确定了</span></div><div class="line"><span class="keyword">let</span> list3:[string, number, boolean] = [<span class="string">'zs'</span>, <span class="number">12</span>, <span class="literal">false</span>]</div><div class="line"><span class="built_in">console</span>.log(list3); <span class="comment">//['zs', 12, false]</span></div><div class="line"><span class="comment">// console.log(list3[1].startsWith(12)); 直接报错</span></div></pre></td></tr></table></figure><h3 id="7、枚举类型"><a href="#7、枚举类型" class="headerlink" title="7、枚举类型"></a>7、枚举类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//enum 类型是对 JavaScript 标准数据类型的一个补充</span></div><div class="line"><span class="comment">//枚举里面的每个数据都可以称为元素，有从0开始的编号</span></div><div class="line">enum Color &#123;</div><div class="line">        Red,</div><div class="line">        Green,</div><div class="line">        Blue</div><div class="line">      &#125;</div><div class="line"></div><div class="line"><span class="comment">// 枚举数值默认从0开始依次递增</span></div><div class="line"><span class="comment">// 根据特定的名称得到对应的枚举数值</span></div><div class="line"><span class="keyword">let</span> myColor: Color = Color.Green  <span class="comment">// 0</span></div><div class="line"><span class="built_in">console</span>.log(myColor, Color.Red, Color.Blue) <span class="comment">// 1 0 2</span></div><div class="line"></div><div class="line"><span class="comment">//可以手动改变值</span></div><div class="line"><span class="comment">//全部手动赋值</span></div><div class="line">enum Color1 &#123;</div><div class="line">        Red = <span class="number">10</span>,</div><div class="line">        Green = <span class="number">100</span>,</div><div class="line">        Blue = <span class="number">50</span></div><div class="line">      &#125;</div><div class="line"><span class="built_in">console</span>.log(Color1，Color1.Red, Color1.Green, Color1.Blue) </div><div class="line"><span class="comment">// &#123;10: "Red", 50: "Blue", 100: "Green", Red: 10, Green: 100, Blue: 50&#125; 10 100 50</span></div><div class="line"></div><div class="line"><span class="comment">//手动赋值第一二个</span></div><div class="line">enum Color1 &#123;</div><div class="line">        Red = <span class="number">100</span>,</div><div class="line">        Green = <span class="number">50</span>,</div><div class="line">        Blue</div><div class="line">      &#125;</div><div class="line"><span class="built_in">console</span>.log(Color1，Color1.Red, Color1.Green, Color1.Blue) </div><div class="line"><span class="comment">//&#123;50: "Green", 51: "Blue", 100: "Red", Red: 100, Green: 50, Blue: 51&#125; 100 50 51</span></div><div class="line"></div><div class="line"><span class="comment">//手动赋值第一二个</span></div><div class="line">enum Color1 &#123;</div><div class="line">        Red = <span class="number">51</span>,</div><div class="line">        Green = <span class="number">50</span>,</div><div class="line">        Blue</div><div class="line">      &#125;</div><div class="line"><span class="built_in">console</span>.log(Color1，Color1.Red, Color1.Green, Color1.Blue) </div><div class="line"><span class="comment">//&#123;50: "Green", 51: "Blue", Red: 51, Green: 50, Blue: 51&#125; 51 50 51</span></div><div class="line"><span class="built_in">console</span>.log(Color1[<span class="number">2</span>]); <span class="comment">//undefined</span></div><div class="line"><span class="built_in">console</span>.log(Color1[<span class="number">51</span>]); <span class="comment">//Blue</span></div></pre></td></tr></table></figure><h3 id="8、any-anyScript"><a href="#8、any-anyScript" class="headerlink" title="8、any      (anyScript)"></a>8、any      (anyScript)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> list: any[] = [<span class="number">1</span>, <span class="literal">true</span>, <span class="string">'free'</span>]</div><div class="line">list[<span class="number">1</span>] = <span class="number">100</span></div></pre></td></tr></table></figure><h3 id="9、void"><a href="#9、void" class="headerlink" title="9、void"></a>9、void</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//某种程度上来说，void 类型像是与 any 类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 void；总是返回undefined</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">noReturn</span>(<span class="params">a:string</span>):<span class="title">void</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">undefined</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(noReturn(<span class="string">'aaa'</span>)) <span class="comment">//undefined</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">noReturn</span>(<span class="params">a:string</span>):<span class="title">void</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(noReturn(<span class="string">'aaa'</span>)) <span class="comment">//null</span></div><div class="line"></div><div class="line"><span class="comment">//以下编译不通过</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">noReturn</span>(<span class="params">a:string</span>):<span class="title">void</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> a</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="10、object"><a href="#10、object" class="headerlink" title="10、object"></a>10、object</h3><p><code>object</code> 表示非原始类型，也就是除 <code>number</code>，<code>string</code>，<code>boolean</code>之外的类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">obj:object</span>):<span class="title">object</span> </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fn2()'</span>, obj)</div><div class="line">  <span class="keyword">return</span> &#123;&#125;</div><div class="line">  <span class="comment">// return undefined</span></div><div class="line">  <span class="comment">// return null</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fn2(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'abc'</span>)))</div><div class="line"><span class="comment">// console.log(fn2('abc') // error</span></div><div class="line"><span class="built_in">console</span>.log(fn2(<span class="built_in">String</span>))</div></pre></td></tr></table></figure><h3 id="11、联合类型"><a href="#11、联合类型" class="headerlink" title="11、联合类型"></a>11、联合类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: number | string</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> x.toString()</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line">类型断言(Type Assertion): 可以用来手动指定一个值的类型</div><div class="line">语法:</div><div class="line">    方式一: &lt;类型&gt;值</div><div class="line">    方式二: 值 as 类型  tsx中只能用这种方式</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">/* 需求: 定义一个函数得到一个字符串或者数值数据的长度 */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> ((&lt;<span class="built_in">string</span>&gt;x).length) &#123;</div><div class="line">    <span class="comment">// return (&lt;string&gt;x).length</span></div><div class="line">    <span class="keyword">return</span> (x <span class="keyword">as</span> <span class="built_in">string</span>).length</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> x.toString().length</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(getLength(<span class="string">'abcd'</span>), getLength(<span class="number">1234</span>)) <span class="comment">// 4,4</span></div></pre></td></tr></table></figure><h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><p>TS会在没有明确的指定类型的时候推测出一个类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 定义变量时赋值了, 推断为对应的类型 */</span></div><div class="line"><span class="keyword">let</span> x = <span class="number">123</span> <span class="comment">// number</span></div><div class="line"><span class="comment">// x = 'abc' // error</span></div><div class="line"></div><div class="line"><span class="comment">/* 定义变量时没有赋值, 推断为any类型 */</span></div><div class="line"><span class="keyword">let</span> y  <span class="comment">// any类型</span></div><div class="line"><span class="built_in">console</span>.log(y) <span class="comment">//undefined</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> y) <span class="comment">//undefined</span></div><div class="line">y = <span class="number">123</span></div><div class="line">y = <span class="string">'abc'</span></div></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、基础类型&quot;&gt;&lt;a href=&quot;#一、基础类型&quot; class=&quot;headerlink&quot; title=&quot;一、基础类型&quot;&gt;&lt;/a&gt;一、基础类型&lt;/h2&gt;&lt;h3 id=&quot;TypeScript-支持与-JavaScript-几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用&quot;&gt;&lt;a href=&quot;#TypeScript-支持与-JavaScript-几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用&quot; class=&quot;headerlink&quot; title=&quot;TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用&quot;&gt;&lt;/a&gt;TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//变量&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//一开始赋值什么类型就只能使用什么类型&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; xx:类型 = yy;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>ts</title>
    <link href="http://yoursite.com/2021/03/26/ts/"/>
    <id>http://yoursite.com/2021/03/26/ts/</id>
    <published>2021-03-26T06:20:54.000Z</published>
    <updated>2021-03-27T13:30:50.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初步认识"><a href="#初步认识" class="headerlink" title="初步认识"></a>初步认识</h1><h2 id="引用：https-24kcs-github-io-vue3-study-00-E8-AF-BE-E7-A8-8B-E4-BB-8B-E7-BB-8D-html"><a href="#引用：https-24kcs-github-io-vue3-study-00-E8-AF-BE-E7-A8-8B-E4-BB-8B-E7-BB-8D-html" class="headerlink" title="引用：https://24kcs.github.io/vue3_study/00_%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D.html"></a>引用：<a href="https://24kcs.github.io/vue3_study/00_%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D.html" target="_blank" rel="external">https://24kcs.github.io/vue3_study/00_%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D.html</a></h2><h2 id="一、初始"><a href="#一、初始" class="headerlink" title="一、初始"></a>一、初始</h2><h3 id="1-ts文件直接写js代码，在html代码中可以直接使用（我自己实验不行，必须进行编译）"><a href="#1-ts文件直接写js代码，在html代码中可以直接使用（我自己实验不行，必须进行编译）" class="headerlink" title="1.ts文件直接写js代码，在html代码中可以直接使用（我自己实验不行，必须进行编译）"></a>1.ts文件直接写js代码，在html代码中可以直接使用（我自己实验不行，必须进行编译）</h3><h3 id="2-ts函数形参使用类型修饰符，在编译后不会出现"><a href="#2-ts函数形参使用类型修饰符，在编译后不会出现" class="headerlink" title="2.ts函数形参使用类型修饰符，在编译后不会出现"></a>2.ts函数形参使用类型修饰符，在编译后不会出现</h3><h3 id="3-ts使用-let-进行修饰，编译后变成-var"><a href="#3-ts使用-let-进行修饰，编译后变成-var" class="headerlink" title="3.ts使用 let 进行修饰，编译后变成 var"></a>3.ts使用 let 进行修饰，编译后变成 var</h3><a id="more"></a><h2 id="二、自动编译"><a href="#二、自动编译" class="headerlink" title="二、自动编译"></a>二、自动编译</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>). 生成配置文件tsconfig.json</div><div class="line">    tsc --init</div><div class="line"><span class="number">2</span>). 修改tsconfig.json配置</div><div class="line">    <span class="string">"outDir"</span>: <span class="string">"./js"</span>, <span class="comment">//生成在js目录下</span></div><div class="line">    <span class="string">"strict"</span>: <span class="literal">false</span>,    </div><div class="line"><span class="number">3</span>). 启动监视任务: </div><div class="line">    终端 -&gt; 运行任务 -&gt; 监视tsconfig.json</div></pre></td></tr></table></figure><h2 id="三、类型注解"><a href="#三、类型注解" class="headerlink" title="三、类型注解"></a>三、类型注解</h2><h3 id="TypeScript-里的类型注解是一种轻量级的为函数或变量添加约束的方式，TypeScript提供了静态的代码分析，它可以分析代码结构和提供的类型注解。可以编译但是会警告你代码可能不会按预期执行。"><a href="#TypeScript-里的类型注解是一种轻量级的为函数或变量添加约束的方式，TypeScript提供了静态的代码分析，它可以分析代码结构和提供的类型注解。可以编译但是会警告你代码可能不会按预期执行。" class="headerlink" title="TypeScript 里的类型注解是一种轻量级的为函数或变量添加约束的方式，TypeScript提供了静态的代码分析，它可以分析代码结构和提供的类型注解。可以编译但是会警告你代码可能不会按预期执行。"></a>TypeScript 里的类型注解是一种轻量级的为函数或变量添加约束的方式，TypeScript提供了静态的代码分析，它可以分析代码结构和提供的类型注解。可以编译但是会警告你代码可能不会按预期执行。</h3><h3 id="四、webpack打包ts"><a href="#四、webpack打包ts" class="headerlink" title="四、webpack打包ts"></a>四、webpack打包ts</h3><h4 id="1、入口JS-src-main-ts"><a href="#1、入口JS-src-main-ts" class="headerlink" title="1、入口JS: src/main.ts"></a>1、入口JS: src/main.ts</h4><h4 id="2、index页面-public-index-html"><a href="#2、index页面-public-index-html" class="headerlink" title="2、index页面: public/index.html"></a>2、index页面: public/index.html</h4><h4 id="3、webpack配置文件build-webpack-config-js"><a href="#3、webpack配置文件build-webpack-config-js" class="headerlink" title="3、webpack配置文件build/webpack.config.js"></a>3、webpack配置文件build/webpack.config.js</h4><h4 id="4、下载依赖"><a href="#4、下载依赖" class="headerlink" title="4、下载依赖"></a>4、下载依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install -D typescript</div><div class="line">npm install -D webpack@4.41.5 webpack-cli@3.3.10 webpack-dev-server@3.10.2</div><div class="line">npm install -D html-webpack-plugin clean-webpack-plugin</div><div class="line">npm install -D ts-loader</div><div class="line">npm install -D cross-env</div></pre></td></tr></table></figure><h4 id="5、配置打包命令"><a href="#5、配置打包命令" class="headerlink" title="5、配置打包命令"></a>5、配置打包命令</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//"dev": "cross-env NODE_ENV=development webpack-dev-server --config build/webpack.config.js",</span></div><div class="line"><span class="comment">//"build": "cross-env NODE_ENV=production webpack --config build/webpack.config.js"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//package.json 下</span></div><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"dev"</span>: <span class="string">"cross-env NODE_ENV=development webpack-dev-server --config build/webpack.config.js"</span>,</div><div class="line">    <span class="string">"build"</span>: <span class="string">"cross-env NODE_ENV=production webpack --config build/webpack.config.js"</span>,</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div></pre></td></tr></table></figure><h4 id="6、运行与打包"><a href="#6、运行与打包" class="headerlink" title="6、运行与打包"></a>6、运行与打包</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm run dev</div><div class="line">npm run build</div></pre></td></tr></table></figure><h2 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Cannot read property <span class="string">'tap'</span> <span class="keyword">of</span> <span class="literal">undefined</span></div><div class="line">    at webpack (F:\vue-ts\<span class="number">01</span>_TypeScript\<span class="number">03</span>_webpack_ts\node_modules\webpack\lib\webpack.js:<span class="number">51</span>:<span class="number">13</span>)</div><div class="line">    at startDevServer (F:\vue-ts\<span class="number">01</span>_TypeScript\<span class="number">03</span>_webpack_ts\node_modules\webpack-dev-server\bin\webpack-dev-server.js:<span class="number">94</span>:<span class="number">16</span>)</div><div class="line">    at F:\vue-ts\<span class="number">01</span>_TypeScript\<span class="number">03</span>_webpack_ts\node_modules\webpack-dev-server\bin\webpack-dev-server.js:<span class="number">166</span>:<span class="number">3</span></div><div class="line">    at F:\vue-ts\<span class="number">01</span>_TypeScript\<span class="number">03</span>_webpack_ts\node_modules\webpack-dev-server\lib\utils\processOptions.js:<span class="number">33</span>:<span class="number">9</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//原因：webpack版本  html-webpack-plugin版本不匹配</span></div><div class="line"><span class="comment">//解决：先降级html-webpack-plugin 至4.0.0</span></div><div class="line">npm uninstall html-webpack-plugin -D</div><div class="line">npm install html-webpack-plugin@<span class="number">4.0</span><span class="number">.0</span> -D</div><div class="line"></div><div class="line"><span class="comment">//仍不解决，可能是webpack全局版本覆盖了局部版本</span></div><div class="line"><span class="comment">//重新安装webpack 和webpack-cli</span></div><div class="line">npm uninstall webpack webpack-cli -g</div><div class="line">npm install webpack@<span class="number">4.41</span><span class="number">.5</span> webpack-cli@<span class="number">3.3</span><span class="number">.10</span> -g</div><div class="line"><span class="comment">//在局部安装</span></div><div class="line">npm install webpack@<span class="number">4.41</span><span class="number">.5</span> webpack-cli@<span class="number">3.3</span><span class="number">.10</span> -D</div></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;初步认识&quot;&gt;&lt;a href=&quot;#初步认识&quot; class=&quot;headerlink&quot; title=&quot;初步认识&quot;&gt;&lt;/a&gt;初步认识&lt;/h1&gt;&lt;h2 id=&quot;引用：https-24kcs-github-io-vue3-study-00-E8-AF-BE-E7-A8-8B-E4-BB-8B-E7-BB-8D-html&quot;&gt;&lt;a href=&quot;#引用：https-24kcs-github-io-vue3-study-00-E8-AF-BE-E7-A8-8B-E4-BB-8B-E7-BB-8D-html&quot; class=&quot;headerlink&quot; title=&quot;引用：https://24kcs.github.io/vue3_study/00_%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D.html&quot;&gt;&lt;/a&gt;引用：&lt;a href=&quot;https://24kcs.github.io/vue3_study/00_%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D.html&quot;&gt;https://24kcs.github.io/vue3_study/00_%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D.html&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;一、初始&quot;&gt;&lt;a href=&quot;#一、初始&quot; class=&quot;headerlink&quot; title=&quot;一、初始&quot;&gt;&lt;/a&gt;一、初始&lt;/h2&gt;&lt;h3 id=&quot;1-ts文件直接写js代码，在html代码中可以直接使用（我自己实验不行，必须进行编译）&quot;&gt;&lt;a href=&quot;#1-ts文件直接写js代码，在html代码中可以直接使用（我自己实验不行，必须进行编译）&quot; class=&quot;headerlink&quot; title=&quot;1.ts文件直接写js代码，在html代码中可以直接使用（我自己实验不行，必须进行编译）&quot;&gt;&lt;/a&gt;1.ts文件直接写js代码，在html代码中可以直接使用（我自己实验不行，必须进行编译）&lt;/h3&gt;&lt;h3 id=&quot;2-ts函数形参使用类型修饰符，在编译后不会出现&quot;&gt;&lt;a href=&quot;#2-ts函数形参使用类型修饰符，在编译后不会出现&quot; class=&quot;headerlink&quot; title=&quot;2.ts函数形参使用类型修饰符，在编译后不会出现&quot;&gt;&lt;/a&gt;2.ts函数形参使用类型修饰符，在编译后不会出现&lt;/h3&gt;&lt;h3 id=&quot;3-ts使用-let-进行修饰，编译后变成-var&quot;&gt;&lt;a href=&quot;#3-ts使用-let-进行修饰，编译后变成-var&quot; class=&quot;headerlink&quot; title=&quot;3.ts使用 let 进行修饰，编译后变成 var&quot;&gt;&lt;/a&gt;3.ts使用 let 进行修饰，编译后变成 var&lt;/h3&gt;</summary>
    
    
    
    
    <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
</feed>
