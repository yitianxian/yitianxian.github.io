<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录</title>
  
  <subtitle>千里之行，始于足下</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-05-19T12:20:04.514Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Z-Q-K</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react拓展</title>
    <link href="http://yoursite.com/2021/05/19/react%E6%8B%93%E5%B1%95/"/>
    <id>http://yoursite.com/2021/05/19/react%E6%8B%93%E5%B1%95/</id>
    <published>2021-05-19T12:19:38.000Z</published>
    <updated>2021-05-19T12:20:04.514Z</updated>
    
    
    
    
    
    <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>redux</title>
    <link href="http://yoursite.com/2021/05/10/react/redux/"/>
    <id>http://yoursite.com/2021/05/10/react/redux/</id>
    <published>2021-05-10T10:48:01.000Z</published>
    <updated>2021-05-19T12:02:27.073Z</updated>
    
    <content type="html"><![CDATA[<h3 id="状态管理工具"><a href="#状态管理工具" class="headerlink" title="状态管理工具"></a>状态管理工具</h3><p>redux在 react， angular， vue中都可以使用，常用于react</p><p><strong>store会更改状态，但是不会更新页面！！！！！</strong></p><h4 id="store-js-使用store管理所有reduce对象"><a href="#store-js-使用store管理所有reduce对象" class="headerlink" title="store.js: 使用store管理所有reduce对象"></a><img src="F:\zzz\react\react全家桶资料\02_原理图\redux原理图.png" alt="redux原理图">store.js: 使用store管理所有reduce对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">*  该文件专门用于暴露store对象，整个项目有且只有一个</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">//引入createStore</span></div><div class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"><span class="comment">//引入指定reducer</span></div><div class="line"><span class="keyword">import</span> countReduce <span class="keyword">from</span> <span class="string">'./count_reducer'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(countReduce)</div></pre></td></tr></table></figure><h4 id="reduce-js-调用action更改数据"><a href="#reduce-js-调用action更改数据" class="headerlink" title="reduce.js:  调用action更改数据"></a>reduce.js:  调用action更改数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">    1.一个专门为count服务的reduce, reduce本质是个函数</div><div class="line">    2.接收两个参数</div><div class="line">        preState: 之前的窗台</div><div class="line">        action: 动作对象</div><div class="line">    3.reduce 只做基本操作,不进行细节性的复杂操作</div><div class="line">*/</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">countReduce</span>(<span class="params">preState, action</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(preState, action);</div><div class="line">    <span class="comment">//从action中获取type,data</span></div><div class="line">    <span class="keyword">const</span> &#123;type, data&#125; = action</div><div class="line">    <span class="keyword">switch</span> (type) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'increment'</span>:</div><div class="line">            <span class="keyword">return</span> preState + data</div><div class="line">        <span class="keyword">case</span> <span class="string">'decrement'</span>:</div><div class="line">            <span class="keyword">return</span> preState - data</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> preState || <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用constant</span></div><div class="line"><span class="keyword">import</span> &#123;INCREMENT, DECREMENT&#125; <span class="keyword">from</span> <span class="string">'./constant.js'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">countReduce</span>(<span class="params">preState, action</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(preState, action);</div><div class="line">    <span class="comment">//从action中获取type,data</span></div><div class="line">    <span class="keyword">const</span> &#123;type, data&#125; = action</div><div class="line">    <span class="keyword">switch</span> (type) &#123;</div><div class="line">        <span class="keyword">case</span> INCREMENT:</div><div class="line">            <span class="keyword">return</span> preState + data</div><div class="line">        <span class="keyword">case</span> DECREMENT:</div><div class="line">            <span class="keyword">return</span> preState - data</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> preState || <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="action-js-对数据进行的-操作"><a href="#action-js-对数据进行的-操作" class="headerlink" title="action.js  对数据进行的 操作"></a>action.js  对数据进行的 操作</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 专门为Count生成action对象</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">//简写, 返回对象的写法</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> createIncrementAction = <span class="function"><span class="params">data</span>  =&gt;</span> (&#123;<span class="attr">type</span>:<span class="string">'increment'</span>, data&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> createDecrementAction = <span class="function"><span class="params">data</span>  =&gt;</span> (&#123;<span class="attr">type</span>:<span class="string">'decrement'</span>, data&#125;)</div><div class="line"></div><div class="line"><span class="comment">//原生写法</span></div><div class="line"><span class="comment">// function createDecrementAction(data) &#123;</span></div><div class="line"><span class="comment">//     return &#123;type:'decrement', data&#125;</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 专门为Count生成action对象,使用constant</div><div class="line"> */</div><div class="line"><span class="keyword">import</span> &#123;INCREMENT, DECREMENT&#125; <span class="keyword">from</span> <span class="string">'./constant.js'</span></div><div class="line"><span class="comment">//简写, 返回对象的写法</span></div><div class="line"><span class="comment">//同步action，返回一个对象</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> createIncrementAction = <span class="function"><span class="params">data</span>  =&gt;</span> (&#123;<span class="attr">type</span>:INCREMENT, data&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> createDecrementAction = <span class="function"><span class="params">data</span>  =&gt;</span> (&#123;<span class="attr">type</span>:DECREMENT, data&#125;)</div><div class="line"></div><div class="line"><span class="comment">//原生写法</span></div><div class="line"><span class="comment">// function createDecrementAction(data) &#123;</span></div><div class="line"><span class="comment">//     return &#123;type:'decrement', data&#125;</span></div><div class="line"><span class="comment">// &#125;</span></div></pre></td></tr></table></figure><h4 id="constant-js-定义action中对象的type类型的常量"><a href="#constant-js-定义action中对象的type类型的常量" class="headerlink" title="constant.js : 定义action中对象的type类型的常量"></a>constant.js : 定义action中对象的type类型的常量</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义action中对象的type类型的常量</div><div class="line"> */</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT = <span class="string">'increment'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> DECREMENT = <span class="string">'decrement'</span></div></pre></td></tr></table></figure><h4 id="使用（dispatch）"><a href="#使用（dispatch）" class="headerlink" title="使用（dispatch）"></a>使用（dispatch）</h4><p>使用dispatch触发reduce中的action</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//引入store 获取reduce中的状态</span></div><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../../redux/store'</span></div><div class="line"><span class="comment">//引入专门创建的action对象</span></div><div class="line"><span class="keyword">import</span> &#123;createIncrementAction, createDecrementAction&#125; <span class="keyword">from</span> <span class="string">'../../redux/count_action'</span></div><div class="line"></div><div class="line">incrementOdd = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> &#123;value&#125; = <span class="keyword">this</span>.selectNumber</div><div class="line">    <span class="keyword">const</span> count = store.getState()</div><div class="line">    <span class="keyword">if</span>(count % <span class="number">2</span> !== <span class="number">0</span>) &#123;</div><div class="line">        store.dispatch(createIncrementAction(value * <span class="number">1</span>))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>store会更改状态，但是不会更新页面！！！！！</p><p>所以，需要组件自生重新渲染</p><p>方法1： 单个文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">componentDidMount() &#123;</div><div class="line">    <span class="comment">//检测redux中的状态，只要变化，就带哦用render</span></div><div class="line">    store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="comment">// this.render() 不可以</span></div><div class="line">        <span class="keyword">this</span>.setState(&#123;&#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>方法2：index.js 中调用，一劳永逸</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</div><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./redux/store'</span></div><div class="line">ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>,</span></div><div class="line">    document.getElementById('root')</div><div class="line">);</div><div class="line"></div><div class="line">store.subscribe(() =&gt; &#123;</div><div class="line">    ReactDOM.render(</div><div class="line">        <span class="tag">&lt;<span class="name">App</span> /&gt;</span>,</div><div class="line">        document.getElementById('root')</div><div class="line">    );</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="api"><a href="#api" class="headerlink" title="api"></a>api</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取state</span></div><div class="line">store.getState()</div></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h3 id="action操作"><a href="#action操作" class="headerlink" title="action操作"></a>action操作</h3><p>同步action： Object{}</p><p>异步action:  function, </p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用异步action 需要安装中间转换器 redux-thunk (npm add redux-thunk)</span></div><div class="line"><span class="comment">//在store.js中引入</span></div><div class="line"><span class="keyword">import</span> &#123;createStore, applyMiddleware&#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(countReduce, applyMiddleware(thunk))</div></pre></td></tr></table></figure><p>在action.js中使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//异步action, action的值为函数</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> createIncrementAsyncAction = <span class="function">(<span class="params">data,time</span>)  =&gt;</span> &#123;</div><div class="line">    <span class="comment">//会返回一个 dispatch store对象</span></div><div class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="comment">//分发一个同步action真正返回一个值</span></div><div class="line">            dispatch(createIncrementAction(data))</div><div class="line">        &#125;,time)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h2><p><img src="F:\zzz\react\react全家桶资料\02_原理图\react-redux模型图.png" alt="react-redux模型图"></p><p>注意:容器和ui要分开</p><p>components: ui组件文件夹</p><p>container:  容器组件文件夹</p><p>使用:  cotainers 中的Count中的index.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//引入Count ui组件</span></div><div class="line"><span class="keyword">import</span> CountUi <span class="keyword">from</span> <span class="string">'../../components/Count'</span></div><div class="line"><span class="comment">//引入 store</span></div><div class="line"><span class="comment">//引入connent</span></div><div class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"><span class="keyword">import</span> &#123; createDecrementAction, createIncrementAction, createIncrementAsyncAction &#125; <span class="keyword">from</span> <span class="string">'../../redux/count_action'</span>;</div><div class="line"><span class="comment">//容器组件与ui产生联系,并暴露出去  一个Count 的容器组件</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//a的返回值作为状态传递给ui,返回一个对象</span></div><div class="line"><span class="comment">//a 函数返回对象中的key作为ui组件中props的key</span></div><div class="line"><span class="comment">//react-redux 自动调此方法,并且将返回状态传过来</span></div><div class="line"><span class="comment">// const mapStateToProps = (state) =&gt; &#123;</span></div><div class="line"><span class="comment">//     console.log('state:  ' + state);</span></div><div class="line"><span class="comment">//     return &#123;count: state&#125;</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="comment">// const mapStateToProps = state =&gt; (&#123;count: state&#125;)</span></div><div class="line"><span class="comment">//a的返回值作为状态传递给ui,返回一个对象</span></div><div class="line"><span class="comment">//a 函数返回对象中的key作为ui组件中props的key,value为操作状态的方法</span></div><div class="line"><span class="comment">//react-redux 自动调此方法,并且将dispatch传过来</span></div><div class="line"><span class="comment">// const mapDispatchToProps = dispatch =&gt; (</span></div><div class="line"><span class="comment">//     &#123;</span></div><div class="line"><span class="comment">//         jia: data =&gt; dispatch(createIncrementAction(data)),</span></div><div class="line"><span class="comment">//         jian: data =&gt; dispatch(createDecrementAction(data)),</span></div><div class="line"><span class="comment">//         yibujia: (data,time) =&gt; dispatch(createIncrementAsyncAction(data, time)),</span></div><div class="line"><span class="comment">//     &#125;</span></div><div class="line"><span class="comment">// )</span></div><div class="line"></div><div class="line"><span class="comment">// export default connect(mapStateToProps, mapDispatchToProps)(CountUi)</span></div><div class="line"></div><div class="line"><span class="comment">//究极简写</span></div><div class="line"><span class="comment">// export default connect(state =&gt; (&#123;count: state&#125;), dispatch =&gt; (</span></div><div class="line"><span class="comment">//     &#123;</span></div><div class="line"><span class="comment">//         jia: data =&gt; dispatch(createIncrementAction(data)),</span></div><div class="line"><span class="comment">//         jian: data =&gt; dispatch(createDecrementAction(data)),</span></div><div class="line"><span class="comment">//         yibujia: (data,time) =&gt; dispatch(createIncrementAsyncAction(data, time)),</span></div><div class="line"><span class="comment">//     &#125;</span></div><div class="line"><span class="comment">// ))(CountUi)</span></div><div class="line"></div><div class="line"><span class="comment">//究极精简版</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">count</span>: state&#125;), </div><div class="line">    <span class="comment">// react-redux 自动分发</span></div><div class="line">    &#123;</div><div class="line">        <span class="attr">jia</span>: createIncrementAction,</div><div class="line">        <span class="attr">jian</span>: createDecrementAction,</div><div class="line">        <span class="attr">yibujia</span>: createIncrementAsyncAction,</div><div class="line">    &#125;</div><div class="line">)(CountUi)</div></pre></td></tr></table></figure><p>component中的Count中的index</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">h1</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    increment = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="keyword">this</span>.selectNumber</div><div class="line">        <span class="keyword">this</span>.props.jia(value * <span class="number">1</span>)</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    decrement = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="keyword">this</span>.selectNumber</div><div class="line">        <span class="keyword">this</span>.props.jian(value * <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">    incrementOdd = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="keyword">this</span>.selectNumber</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.props.count % <span class="number">2</span> !== <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.props.jia(value * <span class="number">1</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    incrementAsync = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="keyword">this</span>.selectNumber</div><div class="line">        <span class="keyword">this</span>.props.yibujia(value * <span class="number">1</span>, <span class="number">500</span>)</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="keyword">this</span>.props</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为： &#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</div><div class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementOdd&#125;</span>&gt;</span>当前求和奇数在加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>异步加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>App.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="comment">//使用容器组件</span></div><div class="line"><span class="keyword">import</span> Count <span class="keyword">from</span> <span class="string">'./containers/Count'</span></div><div class="line"><span class="comment">//引入store,进行关联</span></div><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./redux/store'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">app</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">Count</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Count</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用react-redux比redux优化：</p><p>index.js中不需要自己调用强制刷新, 在container中的connect已经封装了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</div><div class="line"><span class="comment">//import store from './redux/store'</span></div><div class="line">ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>,</span></div><div class="line">    document.getElementById('root')</div><div class="line">);</div><div class="line"></div><div class="line">// store.subscribe(() =&gt; &#123;</div><div class="line">//     ReactDOM.render(</div><div class="line">//         <span class="tag">&lt;<span class="name">App</span> /&gt;</span>,</div><div class="line">//         document.getElementById('root')</div><div class="line">//     );</div><div class="line">// &#125;)</div></pre></td></tr></table></figure><h4 id="整合-ui-和-容器（一个文件）"><a href="#整合-ui-和-容器（一个文件）" class="headerlink" title="整合 ui 和 容器（一个文件）"></a>整合 ui 和 容器（一个文件）</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"><span class="keyword">import</span> &#123; createDecrementAction, createIncrementAction, createIncrementAsyncAction &#125; <span class="keyword">from</span> <span class="string">'../../redux/count_action'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Count</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    increment = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="keyword">this</span>.selectNumber</div><div class="line">        <span class="keyword">this</span>.props.jia(value * <span class="number">1</span>)</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    decrement = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="keyword">this</span>.selectNumber</div><div class="line">        <span class="keyword">this</span>.props.jian(value * <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">    incrementOdd = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="keyword">this</span>.selectNumber</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.props.count % <span class="number">2</span> !== <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.props.jia(value * <span class="number">1</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    incrementAsync = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> &#123;value&#125; = <span class="keyword">this</span>.selectNumber</div><div class="line">        <span class="keyword">this</span>.props.yibujia(value * <span class="number">1</span>, <span class="number">500</span>)</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123;count&#125; = <span class="keyword">this</span>.props</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为： &#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</div><div class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementOdd&#125;</span>&gt;</span>当前求和奇数在加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>异步加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//究极精简版</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">count</span>: state&#125;), </div><div class="line">    <span class="comment">// react-redux 自动分发</span></div><div class="line">    &#123;</div><div class="line">        <span class="attr">jia</span>: createIncrementAction,</div><div class="line">        <span class="attr">jian</span>: createDecrementAction,</div><div class="line">        <span class="attr">yibujia</span>: createIncrementAsyncAction,</div><div class="line">    &#125;</div><div class="line">)(Count)</div></pre></td></tr></table></figure><h3 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h3><p>将store 传给app所有子组件</p><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</div><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./redux/store'</span></div><div class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line">ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">App</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span>,</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</div><div class="line">);</div></pre></td></tr></table></figure><h3 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h3><p>合并多个reducer</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">*  该文件专门用于暴露store对象，整个项目有且只有一个</div><div class="line">*/</div><div class="line"><span class="comment">//引入createStore</span></div><div class="line"><span class="keyword">import</span> &#123;createStore, applyMiddleware, combineReducers&#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"><span class="comment">//引入指定reducer</span></div><div class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">'./reducers/count'</span></div><div class="line"><span class="keyword">import</span> personReducer <span class="keyword">from</span> <span class="string">'./reducers/person'</span></div><div class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span></div><div class="line"></div><div class="line"><span class="comment">//汇总所有reducer</span></div><div class="line"><span class="keyword">const</span> allReducer = combineReducers(&#123;</div><div class="line">    <span class="attr">count</span>: countReducer,</div><div class="line">    <span class="attr">persons</span>: personReducer</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(allReducer, applyMiddleware(thunk))</div></pre></td></tr></table></figure><h3 id="踩坑："><a href="#踩坑：" class="headerlink" title="踩坑："></a>踩坑：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (type) &#123;</div><div class="line">    <span class="keyword">case</span> ADDPERSON:</div><div class="line">        <span class="comment">// preState.push(personObj)//这样写不会触发更新</span></div><div class="line">        <span class="comment">/**</span></div><div class="line">        * react底层会做浅比较, preState的地址没有发生改变,那么页面不会更新</div><div class="line">        */</div><div class="line"></div><div class="line">        <span class="comment">//下面是放到一个新的数组中</span></div><div class="line">        <span class="keyword">return</span> [personObj, ...preState]</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">return</span> preState;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>原因： redux 的 reducer 函数必须是纯函数</p><p>纯函数：</p><p>1.只要是同样的输入（实参），必须得到同样的输出</p><p>2.不得改写参数数据</p><p>3.不会产生副作用，例如网络请求，输入输出设备</p><p>4.不能调用 Date.now() 或者Math.random()等不纯的方法</p><h3 id="redux-devtools"><a href="#redux-devtools" class="headerlink" title="redux-devtools"></a>redux-devtools</h3><p>项目安装： npm add redux-devtools-extension</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">store.js</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;composeWithDevTools&#125; <span class="keyword">from</span> <span class="string">'redux-devtools-extension'</span></div><div class="line"><span class="comment">//没有异步api</span></div><div class="line"><span class="comment">// export default createStore(allReducer, composeWithDevTools)</span></div><div class="line"><span class="comment">//有异步api</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(allReducer, composeWithDevTools(applyMiddleware(thunk)))</div></pre></td></tr></table></figure><p>浏览器安装： redux-tools</p><h3 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h3><p>安装serve：npm i serve -g</p><p>使用命令：npm run build</p><p>使用命令：serve build</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;状态管理工具&quot;&gt;&lt;a href=&quot;#状态管理工具&quot; class=&quot;headerlink&quot; title=&quot;状态管理工具&quot;&gt;&lt;/a&gt;状态管理工具&lt;/h3&gt;&lt;p&gt;redux在 react， angular， vue中都可以使用，常用于react&lt;/p&gt;
&lt;p&gt;&lt;stro</summary>
      
    
    
    
    
    <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>cropper使用</title>
    <link href="http://yoursite.com/2021/05/09/jquery/cropper%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2021/05/09/jquery/cropper%E4%BD%BF%E7%94%A8/</id>
    <published>2021-05-09T05:05:40.000Z</published>
    <updated>2021-05-09T11:38:16.531Z</updated>
    
    <content type="html"><![CDATA[<h3 id="croper-图片裁剪上传插件"><a href="#croper-图片裁剪上传插件" class="headerlink" title="croper 图片裁剪上传插件"></a>croper 图片裁剪上传插件</h3><h4 id="html引入"><a href="#html引入" class="headerlink" title="html引入"></a>html引入</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"libs/js/cropper.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"libs/css/cropper.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></div></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"../images/picture.jpg"</span> <span class="attr">alt</span>=<span class="string">"Picture"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> image = <span class="built_in">document</span>.querySelector(<span class="string">'#image'</span>);</div><div class="line">      <span class="keyword">var</span> cropper = <span class="keyword">new</span> Cropper(image, &#123;</div><div class="line">参数</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="参数解析："><a href="#参数解析：" class="headerlink" title="参数解析："></a>参数解析：</h4><h5 id="viewMode-默认0，-可选（0，-1，2，3）"><a href="#viewMode-默认0，-可选（0，-1，2，3）" class="headerlink" title="viewMode 默认0， 可选（0， 1，2，3）"></a>viewMode 默认0， 可选（0， 1，2，3）</h5><p><img src="C:\Users\zhang\Desktop\viewNode.png" alt="viewNode"></p><p>解析：</p><p>值为3： 让 img 填满 div 可放大不能缩小</p><p>值为2： 裁剪框不能超过 img， img 中的高与 div 一致</p><p>值为1：裁剪框不能超过图片</p><p>值为0： 裁剪框没有限制</p><h4 id="preview-预览图"><a href="#preview-预览图" class="headerlink" title="preview 预览图"></a>preview 预览图</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">.small &#123;</div><div class="line">    overflow: hidden;</div><div class="line">    height: 100px;</div><div class="line">    width: 100px;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col col-6"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"../images/picture.jpg"</span> <span class="attr">alt</span>=<span class="string">"Picture"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> window.addEventListener('DOMContentLoaded', function () &#123;</div><div class="line">    var image = document.querySelector('#image');</div><div class="line">    var cropper = new Cropper(image, &#123;</div><div class="line">      aspectRatio:1/1,</div><div class="line">      viewMode:0,</div><div class="line">      preview:'.small'</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure><p>注意事项：用于预览的div必须有固定大小，最好超出部分隐藏，即 overflow: hidden;</p><h4 id="dragMode-（移动模式）可以双击切换"><a href="#dragMode-（移动模式）可以双击切换" class="headerlink" title="dragMode （移动模式）可以双击切换"></a>dragMode （移动模式）可以双击切换</h4><p>move：可以移动裁剪框。不能重选</p><p>crop：可以重新选择框，不能拖动</p><p>none：什么都不处理</p><h4 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> image = <span class="built_in">document</span>.querySelector(<span class="string">'#image'</span>);</div><div class="line"><span class="keyword">var</span> cropper = <span class="keyword">new</span> Cropper(image, &#123;</div><div class="line">  <span class="comment">//所有Boolean 不写默认都为true</span></div><div class="line"></div><div class="line">  aspectRatio:<span class="number">1</span>/<span class="number">1</span>,</div><div class="line">  <span class="attr">viewMode</span>:<span class="number">0</span>,</div><div class="line">  <span class="attr">preview</span>:<span class="string">'.small'</span>,</div><div class="line">  <span class="attr">dragMode</span>:<span class="string">'move'</span>,</div><div class="line">  <span class="attr">responsive</span>:<span class="literal">true</span>, <span class="comment">//在调整窗口大小的时候重新渲染cropper</span></div><div class="line">  restore:<span class="literal">true</span>,<span class="comment">//在调整窗口大小后恢复裁剪的区域</span></div><div class="line">  checkCrossOrigin:<span class="literal">true</span>,<span class="comment">//检查图片是否为快于图片</span></div><div class="line">  modal:<span class="literal">true</span>,<span class="comment">//是否开启遮罩 未选中的地方暗色处理</span></div><div class="line">  guides:<span class="literal">true</span>,<span class="comment">//是否显示裁剪虚线</span></div><div class="line">  highlight:<span class="literal">true</span>,<span class="comment">//将选中区域亮色处理</span></div><div class="line">  background:<span class="literal">true</span>,<span class="comment">//是否显示网格背景</span></div><div class="line">  center:<span class="literal">true</span>,<span class="comment">//裁剪框是否在图片中心</span></div><div class="line">  autoCrop:<span class="literal">true</span>,<span class="comment">//初始化时是否自动显示裁剪框</span></div><div class="line">  autoCropArea:<span class="number">1</span>,<span class="comment">//初始化时裁剪框的大小与原图的比例  0-1之间</span></div><div class="line">  movable:<span class="literal">true</span>,<span class="comment">//是否允许移动图片</span></div><div class="line">  rotatable:<span class="literal">true</span>,<span class="comment">//是否允许旋转图片, 需要函数操作</span></div><div class="line">  scalable:<span class="literal">true</span>,<span class="comment">//是否允许翻转图片</span></div><div class="line">  zoomable:<span class="literal">true</span>,<span class="comment">//是否放大缩小图片, 需要函数操作</span></div><div class="line">  zoomOnTouch:<span class="literal">true</span>,<span class="comment">//是否可以通过触摸形式缩放图片 移动端</span></div><div class="line">  zoomOnWheel:<span class="literal">true</span>,<span class="comment">//是否可以通过鼠标缩放图片</span></div><div class="line">  wheelZoomRatio:<span class="number">0.1</span>,<span class="comment">//设置鼠标控制缩放的比列</span></div><div class="line">  cropBoxMovable:<span class="literal">true</span>,<span class="comment">//是否可以移动裁剪框</span></div><div class="line">  cropBoxResizable:<span class="literal">true</span>,<span class="comment">//是否可以调整裁剪框的大小</span></div><div class="line">  toggleDragModeOnDblclick:<span class="literal">false</span>,<span class="comment">//设置dragMode是否可以相互切换, 双击鼠标切换</span></div><div class="line"></div><div class="line">  <span class="comment">//设置container 最小</span></div><div class="line">  minContainerWidth:<span class="number">0</span>,<span class="comment">//设置container宽度</span></div><div class="line">  minContainerHeight:<span class="number">0</span>,<span class="comment">//设置container高度</span></div><div class="line"></div><div class="line">  <span class="comment">//设置canvas  最小</span></div><div class="line">  minCanvasWidth:<span class="number">0</span>,<span class="comment">//canvas宽度</span></div><div class="line">  minCanvasHeight:<span class="number">0</span>,<span class="comment">//canvas高度</span></div><div class="line"></div><div class="line">  <span class="comment">//设置裁剪框  最小</span></div><div class="line">  minCropBoxWidth:<span class="number">500</span>,<span class="comment">//裁剪框 宽度</span></div><div class="line">  minCropBoxHeight:<span class="number">500</span>,<span class="comment">//裁剪框 高度</span></div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> image = <span class="built_in">document</span>.querySelector(<span class="string">'#image'</span>);</div><div class="line"><span class="keyword">var</span> cropper = <span class="keyword">new</span> Cropper(image, &#123;</div><div class="line">  <span class="comment">//插件准备完成时执行</span></div><div class="line">  ready(event) &#123;</div><div class="line">    <span class="built_in">console</span>.log(event)</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//开始移动裁剪框时执行的函数</span></div><div class="line">  cropstart(event) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'start'</span> + event)</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//移动裁剪框的时候, 每一帧都会调用</span></div><div class="line">  cropmove(event) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'move'</span> + event)</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//结束移动裁剪框时执行的函数</span></div><div class="line">  cropend(event) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'end'</span> + event)</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">//裁剪框变化执行的函数</span></div><div class="line">  crop(event) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'crop'</span> + event)</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="api"><a href="#api" class="headerlink" title="api"></a>api</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#reset'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//将图像和裁剪框重置为初始状态</span></div><div class="line">    cropper.reset()</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#clear'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//清除裁剪框</span></div><div class="line">    cropper.clear()</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#replace'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//替换的图片 =&gt; string, 替换图片的比例是否和原图相同 =&gt; boolean</span></div><div class="line">    cropper.replace(<span class="string">"../images/picture-2.jpg"</span>, <span class="literal">false</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#enable'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//替换的图片 =&gt; string, 替换图片的比例是否和原图相同 =&gt; boolean</span></div><div class="line">    cropper.enable()</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#disable'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//替换的图片 =&gt; string, 替换图片的比例是否和原图相同 =&gt; boolean</span></div><div class="line">    cropper.disable()</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#destroy'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//销毁cropper, 并在图像中销毁整个cropper</span></div><div class="line">    cropper.destroy()</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#movex'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//移动x坐标  相对</span></div><div class="line">    cropper.move(<span class="number">1</span>,<span class="number">0</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#movey'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//移动y坐标  相对</span></div><div class="line">    cropper.move(<span class="number">0</span>,<span class="number">1</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#moveTox'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//移动x坐标  绝对</span></div><div class="line">    cropper.moveTo(<span class="number">1</span>,<span class="number">0</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#moveToy'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//移动y坐标  绝对</span></div><div class="line">    cropper.moveTo(<span class="number">0</span>,<span class="number">1</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#zoomG'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//放大</span></div><div class="line">    cropper.zoom(<span class="number">0.1</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#zoomS'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//缩小</span></div><div class="line">    cropper.zoom(<span class="number">-0.1</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#zoomToG'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//放大到</span></div><div class="line">    cropper.zoomTo(<span class="number">2</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#zoomToS'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//缩小到</span></div><div class="line">    cropper.zoomTo(<span class="number">0.1</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#rotateA'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//逆时针旋转</span></div><div class="line">    cropper.rotate(<span class="number">-45</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#rotateB'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//顺时针旋转</span></div><div class="line">    cropper.rotate(<span class="number">45</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#rotateToA'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//逆时针旋转到</span></div><div class="line">    cropper.rotateTo(<span class="number">-45</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#rotateToB'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//顺时针旋转到</span></div><div class="line">    cropper.rotateTo(<span class="number">45</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#scalex'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//沿x翻转</span></div><div class="line">    cropper.scale(<span class="number">1</span>, <span class="number">-1</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#scaley'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//沿y翻转</span></div><div class="line">    cropper.scale(<span class="number">-1</span>, <span class="number">1</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#scalexy'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//沿xy同时翻转</span></div><div class="line">    cropper.scale(<span class="number">-1</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#scaleFromX'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//缩放x坐标默认为1</span></div><div class="line">    cropper.scaleX(<span class="number">0.5</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#scaleFromY'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//沿缩放y坐标</span></div><div class="line">    cropper.scaleY(<span class="number">2</span>)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#getData'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//获取粗略的的数据</span></div><div class="line">    <span class="built_in">console</span>.log(cropper.getData())</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(cropper.getData().toLocaleString()))</div><div class="line">    $(<span class="string">'#message'</span>).append(cropper.getData().toString())</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#setData'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//设置裁剪框的数据</span></div><div class="line">    cropper.setData(&#123;</div><div class="line">        <span class="comment">// width:100,</span></div><div class="line">        <span class="comment">// height:100</span></div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#getContainerData'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//获取container数据</span></div><div class="line">    $(<span class="string">'#message'</span>).append(cropper.getContainerData().toString())</div><div class="line">&#125;)</div><div class="line"><span class="comment">// $('#setData').on('click', function () &#123;</span></div><div class="line"><span class="comment">//   //没有这个api  setImgData 同样没有</span></div><div class="line"><span class="comment">//   cropper.setContainerData(&#123;</span></div><div class="line"><span class="comment">//     width:500,</span></div><div class="line"><span class="comment">//     height:500</span></div><div class="line"><span class="comment">//   &#125;)</span></div><div class="line"><span class="comment">//   alert(123)</span></div><div class="line"><span class="comment">// &#125;)</span></div><div class="line">$(<span class="string">'#getImgData'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//获取img数据</span></div><div class="line">    $(<span class="string">'#message'</span>).append(<span class="built_in">JSON</span>.stringify(cropper.getImageData().toString()))</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#getCanvasData'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//获取canvas数据</span></div><div class="line">    <span class="built_in">console</span>.log(cropper.getCanvasData())</div><div class="line">    $(<span class="string">'#message'</span>).append(<span class="built_in">JSON</span>.stringify(cropper.getCanvasData().toString()))</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#setCanvasData'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//设置canvas数据</span></div><div class="line">    cropper.setCanvasData(&#123;</div><div class="line">        <span class="attr">left</span>:<span class="number">0</span>,</div><div class="line">        <span class="attr">top</span>:<span class="number">0</span>,</div><div class="line">        <span class="attr">width</span>:<span class="number">200</span>,</div><div class="line">        <span class="attr">height</span>:<span class="number">200</span></div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#getCropperBoxData'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//获取 裁剪框 数据</span></div><div class="line">    <span class="built_in">console</span>.log(cropper.getCropBoxData())</div><div class="line">    $(<span class="string">'#message'</span>).append(<span class="built_in">JSON</span>.stringify(cropper.getCropBoxData().toString()))</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#setCropperBoxData'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//设置 裁剪框 数据</span></div><div class="line">    cropper.setCropBoxData(&#123;</div><div class="line">        <span class="attr">left</span>:<span class="number">0</span>,</div><div class="line">        <span class="attr">top</span>:<span class="number">0</span>,</div><div class="line">        <span class="attr">width</span>:<span class="number">400</span>,</div><div class="line">        <span class="attr">height</span>:<span class="number">400</span></div><div class="line">    &#125;)</div><div class="line"></div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#getCroppedCanvas'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//获取 裁剪框中的图片</span></div><div class="line">    $(<span class="string">'#message'</span>).append( cropper.getCroppedCanvas())</div><div class="line">    <span class="built_in">console</span>.log(cropper.getCroppedCanvas().toDataURL(<span class="string">'image/jpeg'</span>))</div><div class="line"></div><div class="line">&#125;)</div><div class="line"></div><div class="line">$(<span class="string">'#getAspectRadio'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//获取 裁剪框中的图片</span></div><div class="line">    $(<span class="string">'#message'</span>).append( cropper.getCroppedCanvas())</div><div class="line">    <span class="built_in">console</span>.log(cropper.getCroppedCanvas().toDataURL(<span class="string">'image/jpeg'</span>))</div><div class="line"></div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#setAspectRadio'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//修改裁剪框的长宽比</span></div><div class="line">    cropper.setAspectRatio(<span class="number">2</span>/<span class="number">1</span>)</div><div class="line"></div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#setData'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//设置拖拽模式</span></div><div class="line">    cropper.setDragMode(<span class="string">'none'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;croper-图片裁剪上传插件&quot;&gt;&lt;a href=&quot;#croper-图片裁剪上传插件&quot; class=&quot;headerlink&quot; title=&quot;croper 图片裁剪上传插件&quot;&gt;&lt;/a&gt;croper 图片裁剪上传插件&lt;/h3&gt;&lt;h4 id=&quot;html引入&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>juqey踩坑</title>
    <link href="http://yoursite.com/2021/05/06/jquery/juqey%E8%B8%A9%E5%9D%91/"/>
    <id>http://yoursite.com/2021/05/06/jquery/juqey%E8%B8%A9%E5%9D%91/</id>
    <published>2021-05-06T07:57:46.000Z</published>
    <updated>2021-05-06T07:59:50.073Z</updated>
    
    <content type="html"><![CDATA[<h3 id="选择父页面元素（top-document）"><a href="#选择父页面元素（top-document）" class="headerlink" title="选择父页面元素（top.document）"></a>选择父页面元素（top.document）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$("[key= 'finishPhoto'] .title", top.document).append(`</div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float: right;</span></span></div><div class="line">         font-size: 14px;</div><div class="line">         font-weight: 400;</div><div class="line">         color: #0084FE;</div><div class="line">         opacity: 1;</div><div class="line">         cursor: pointer;</div><div class="line">         margin-right: 20px;</div><div class="line">   " <span class="attr">onclick</span>=<span class="string">"backToAlbum()"</span>&gt;返回到相册首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">`)</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;选择父页面元素（top-document）&quot;&gt;&lt;a href=&quot;#选择父页面元素（top-document）&quot; class=&quot;headerlink&quot; title=&quot;选择父页面元素（top.document）&quot;&gt;&lt;/a&gt;选择父页面元素（top.document）&lt;/</summary>
      
    
    
    
    
    <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>css-img踩坑</title>
    <link href="http://yoursite.com/2021/04/28/css/css-img%E8%B8%A9%E5%9D%91/"/>
    <id>http://yoursite.com/2021/04/28/css/css-img%E8%B8%A9%E5%9D%91/</id>
    <published>2021-04-28T11:58:21.000Z</published>
    <updated>2021-04-28T12:14:08.330Z</updated>
    
    <content type="html"><![CDATA[<p>先上代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav-set-item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>文章<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img-down"</span> <span class="attr">src</span>=<span class="string">"skin/images/descending-order.png"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img-up"</span> <span class="attr">src</span>=<span class="string">"skin/images/cannot-Ascending-order-.png"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img-del"</span> <span class="attr">src</span>=<span class="string">"skin/images/dele.png"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.nav-set-item</span> <span class="selector-tag">img</span><span class="selector-pseudo">:first-child</span> &#123;</div><div class="line"><span class="attribute">position</span>: absulate;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这一段css无论如何都不能生效</p><p>后来问大佬,原来css中处理img并不是当成img,css将span也当作img处理,所以这样是选中的是第一个span</p><p>解决方式::从第二个元素开始</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.nav-set-item</span> <span class="selector-tag">img</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</div><div class="line"><span class="attribute">left</span>: <span class="number">721px</span>;</div><div class="line"><span class="attribute">top</span>:<span class="number">13px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先上代码:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=</summary>
      
    
    
    
    
    <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>reactRouter</title>
    <link href="http://yoursite.com/2021/04/28/react/reactRouter/"/>
    <id>http://yoursite.com/2021/04/28/react/reactRouter/</id>
    <published>2021-04-28T11:23:20.000Z</published>
    <updated>2021-05-06T11:56:53.907Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save react-router-dom</div></pre></td></tr></table></figure><h3 id="初级使用"><a href="#初级使用" class="headerlink" title="初级使用"></a>初级使用</h3><p>路由模式同样有两种 hash（HashRouter） 和 history(BrowserRouter)</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//index.js中包裹App</div><div class="line">import &#123;BrowserRouter&#125; from 'react-router-dom'</div><div class="line">ReactDOM.render(</div><div class="line">  &lt;BrowserRouter&gt;</div><div class="line">    &lt;App /&gt;</div><div class="line">  &lt;/BrowserRouter&gt;,</div><div class="line">  document.getElementById('root')</div><div class="line">);</div><div class="line"></div><div class="line">//导航区</div><div class="line">&lt;Link classname='list-group-item' to="/about"&gt;About&lt;/Link&gt;</div><div class="line">&lt;Link classname='list-group-item' to="/home"&gt;Home&lt;/Link&gt;</div><div class="line">//展示区</div><div class="line">&lt;Route path='/home' compoent=&#123;Home&#125;&gt;&lt;/Route&gt;</div><div class="line">&lt;Route path='/about' compoent=&#123;About&#125;&gt;&lt;/Route&gt;</div></pre></td></tr></table></figure><h3 id="NavLink"><a href="#NavLink" class="headerlink" title="NavLink"></a>NavLink</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;NavLink&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></div><div class="line"><span class="comment">//可以传入选中的class类名</span></div><div class="line">&lt;NavLink activeClassName=<span class="string">'active'</span> className=<span class="string">'list-group-item'</span> to=<span class="string">"/about"</span>&gt;About&lt;<span class="regexp">/NavLink&gt;</span></div></pre></td></tr></table></figure><h4 id="Switch-Redirect-exact"><a href="#Switch-Redirect-exact" class="headerlink" title="Switch   Redirect  exact"></a>Switch   Redirect  exact</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//exact 路由严格模式，谨慎使用</span></div><div class="line"><span class="comment">//Switch  寻找到路由匹配后不会在向下寻找，提高效率</span></div><div class="line"><span class="comment">//Redirect 重定向，要写在 Switch 最后</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;Route, Switch, Redirect&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></div><div class="line">&lt;Switch&gt;</div><div class="line">    &#123;<span class="comment">/* exact 开启严格匹配 */</span>&#125;</div><div class="line">    &lt;Route exact path=<span class="string">'/home'</span> component=&#123;Home&#125;&gt;</div><div class="line"></div><div class="line">    <span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></div><div class="line">    &lt;Route exact path=<span class="string">'/about'</span> component=&#123;About&#125;&gt;</div><div class="line"></div><div class="line">    <span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></div><div class="line">    &#123;<span class="comment">/* 重定向 */</span>&#125;</div><div class="line">    &lt;Redirect to=<span class="string">'/about'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Redirect</span>&gt;</span></span></div><div class="line">&lt;<span class="regexp">/Switch&gt;</span></div></pre></td></tr></table></figure><h3 id="路由注册顺序（嵌套路由）"><a href="#路由注册顺序（嵌套路由）" class="headerlink" title="路由注册顺序（嵌套路由）"></a>路由注册顺序（嵌套路由）</h3><p>子路由要带上父路由。</p><p>路由注册是由顺序的，先注册app中的路由。</p><p>所以要慎用 exact 会使二级路由失效。</p><h3 id="向路由组件传递参数"><a href="#向路由组件传递参数" class="headerlink" title="向路由组件传递参数"></a>向路由组件传递参数</h3><h4 id="params（路由中路径传参）"><a href="#params（路由中路径传参）" class="headerlink" title="params（路由中路径传参）"></a>params（路由中路径传参）</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//和vue一样</div><div class="line">&lt;li key=&#123;item.id&#125;&gt;</div><div class="line">    &lt;Link to=&#123;`/home/message/detail/$&#123;item.id&#125;/$&#123;item.title&#125;`&#125;&gt;&#123;item.title&#125;&lt;/Link&gt;</div><div class="line">&lt;/li&gt;</div><div class="line">&lt;Switch&gt;</div><div class="line">    &lt;Route path='/home/message/detail/:id/:title' component=&#123;Detail&#125;&gt;&lt;/Route&gt;</div><div class="line">&lt;/Switch&gt;</div></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//组件中用props接收</span></div><div class="line"><span class="keyword">const</span> &#123;id, title&#125; = <span class="keyword">this</span>.props.match.params</div><div class="line"><span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>id: &#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>title: &#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">)</div></pre></td></tr></table></figure><h4 id="search-query"><a href="#search-query" class="headerlink" title="search(query)"></a>search(query)</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//声明</div><div class="line">&lt;Link to=&#123;`/home/message/detail/?id=$&#123;item.id&#125;&amp;title=$&#123;item.title&#125;`&#125;&gt;&#123;item.title&#125;&lt;/Link&gt;</div><div class="line">&lt;Route path='/home/message/detail' component=&#123;Detail&#125;&gt;&lt;/Route&gt;</div><div class="line">&lt;/Switch&gt;</div></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//react  自引入的querystring进行解构</span></div><div class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'querystring'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> &#123;search&#125; = <span class="keyword">this</span>.props.location</div><div class="line"><span class="keyword">const</span> &#123;id, title&#125; = qs.parse(search.slice(<span class="number">1</span>))</div></pre></td></tr></table></figure><p>ps:   urlencode格式:   key1=valueq&amp;key2=value2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">qs.stringify(&#123;<span class="attr">id</span>:<span class="string">'01'</span>, <span class="attr">value</span>:<span class="string">'aa'</span>&#125;)  =&gt;  id=<span class="number">01</span>&amp;value=aa</div><div class="line">qs.parse(<span class="string">'id=01&amp;value=aa'</span>)  =&gt;  &#123;<span class="attr">id</span>:<span class="string">'01'</span>, <span class="attr">value</span>:<span class="string">'aa'</span>&#125;</div></pre></td></tr></table></figure><h3 id="state（地址栏不会跟上东西）"><a href="#state（地址栏不会跟上东西）" class="headerlink" title="state（地址栏不会跟上东西）"></a>state（地址栏不会跟上东西）</h3><p>传递对象参数，默认值问undefined</p><p>用于使用histroy模式时，state存在history中（缓存），所以刷新不会丢失数据，但是如果清除缓存就会出问题</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Link to=&#123;&#123;pathname:'/home/message/detail',state:&#123;id:item.id,title:item.title&#125;&#125;&#125;&gt;&#123;item.title&#125;&lt;/Link&gt;</div><div class="line"></div><div class="line">const &#123;id, title&#125; = this.props.location.state</div></pre></td></tr></table></figure><h3 id="路由跳转模式（push-replace）"><a href="#路由跳转模式（push-replace）" class="headerlink" title="路由跳转模式（push    replace）"></a>路由跳转模式（push    replace）</h3><h4 id="push（默认）"><a href="#push（默认）" class="headerlink" title="push（默认）"></a>push（默认）</h4><p>push会留下历史记录</p><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><p>不会有历史记录</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Link replace to=&#123;&#123;<span class="attr">pathname</span>:<span class="string">'/home/message/detail'</span>,<span class="attr">state</span>:&#123;<span class="attr">id</span>:item.id,<span class="attr">title</span>:item.title&#125;&#125;&#125;&gt;&#123;item.title&#125;&lt;<span class="regexp">/Link&gt;</span></div></pre></td></tr></table></figure><h3 id="编程式路由导航（this-props-history-api）"><a href="#编程式路由导航（this-props-history-api）" class="headerlink" title="编程式路由导航（this.props.history  api）"></a>编程式路由导航（this.props.history  api）</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//params</span></div><div class="line"><span class="keyword">this</span>.props.history.replace(<span class="string">`/home/<span class="subst">$&#123;id&#125;</span>`</span>)</div><div class="line"><span class="keyword">this</span>.props.history.push(<span class="string">`/home/<span class="subst">$&#123;id&#125;</span>`</span>)</div><div class="line"></div><div class="line"><span class="comment">//query</span></div><div class="line"><span class="keyword">this</span>.props.history.replace(<span class="string">`/home?id=<span class="subst">$&#123;id&#125;</span>`</span>)</div><div class="line"><span class="keyword">this</span>.props.history.push(<span class="string">`/home?id=<span class="subst">$&#123;id&#125;</span>`</span>)</div><div class="line"></div><div class="line"><span class="comment">//state</span></div><div class="line"><span class="keyword">this</span>.props.history.replace(<span class="string">`/home/message/detail`</span>,&#123;id, title&#125;)</div><div class="line"><span class="keyword">this</span>.props.history.push(<span class="string">`/home/message/detail`</span>,&#123;id, title&#125;)</div><div class="line"></div><div class="line"><span class="comment">//前进</span></div><div class="line"><span class="keyword">this</span>.props.history.goForward()</div><div class="line"><span class="comment">//后退</span></div><div class="line"><span class="keyword">this</span>.props.history.goBack()</div><div class="line"><span class="comment">//前进后退几步</span></div><div class="line"><span class="keyword">this</span>.props.history.go(n)</div></pre></td></tr></table></figure><h3 id="withRouter"><a href="#withRouter" class="headerlink" title="withRouter"></a>withRouter</h3><p>使一般组件获得路由组件的api</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;withRouter&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    goForword =<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">this</span>.props.history.goForward()</div><div class="line">    &#125;</div><div class="line">    goBack =<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">this</span>.props.history.goBack()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">                Header</div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.goForword&#125;</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.goBack&#125;</span>&gt;</span>回退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(index);</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div clas</summary>
      
    
    
    
    
    <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react组件间传递参数</title>
    <link href="http://yoursite.com/2021/04/25/react/react%E7%BB%84%E4%BB%B6%E9%97%B4%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/"/>
    <id>http://yoursite.com/2021/04/25/react/react%E7%BB%84%E4%BB%B6%E9%97%B4%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/</id>
    <published>2021-04-25T03:40:12.000Z</published>
    <updated>2021-04-25T12:43:14.914Z</updated>
    
    <content type="html"><![CDATA[<h3 id="父传子-props"><a href="#父传子-props" class="headerlink" title="父传子 props"></a>父传子 props</h3><p>与vue一样 ：组件无论是使用函数声明还是通过 class 声明，都决不能修改自身的 props**</p><ul><li>正常情况下 props 的拥有权不属于当前组件，是别人传给你的，你用的时候用 props 来引用，所以修改的权限应该由上面来决定</li></ul><p>父组件传值：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">state = &#123;</div><div class="line">    <span class="attr">todos</span>: [</div><div class="line">      &#123;<span class="attr">id</span>: <span class="string">'001'</span>, <span class="attr">name</span>: <span class="string">'吃饭'</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;,</div><div class="line">      &#123;<span class="attr">id</span>: <span class="string">'002'</span>, <span class="attr">name</span>: <span class="string">'睡觉'</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;,</div><div class="line">      &#123;<span class="attr">id</span>: <span class="string">'003'</span>, <span class="attr">name</span>: <span class="string">'打游戏'</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;,</div><div class="line">    ],</div><div class="line">    <span class="attr">list</span>: &#123;</div><div class="line">      <span class="string">'id'</span>: <span class="string">'002'</span>,</div><div class="line">      <span class="attr">name</span>:<span class="string">'zs'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">addToDo = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span>&#123;todos&#125; = <span class="keyword">this</span>.state</div><div class="line">    <span class="keyword">const</span> newTOdos = [todoObj, ...todos]</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">todos</span>: newTOdos&#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">//render 中</span></div><div class="line"><span class="keyword">const</span> &#123;todos&#125; = <span class="keyword">this</span>.state</div><div class="line"><span class="comment">//对象可以直接结构传递</span></div><div class="line">&lt;List todos=&#123;todos&#125;  &#123;...list&#125; &#123;...list2&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">List</span>&gt;</span></span></div><div class="line"><span class="comment">//传递一个函数</span></div><div class="line">&lt;Header addToDo=&#123;<span class="keyword">this</span>.addToDo&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span></div></pre></td></tr></table></figure><p>子组件接收并传值：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//render中</span></div><div class="line"><span class="comment">//如果解构后有相同的属性,后面的解构会覆盖前面的</span></div><div class="line"><span class="keyword">const</span> &#123;todos, id&#125; = <span class="keyword">this</span>.props</div><div class="line"><span class="built_in">console</span>.log(id); <span class="comment">// 003</span></div><div class="line"></div><div class="line"><span class="comment">//子组件向父组件传值</span></div><div class="line">handleKeyUp = <span class="function">(<span class="params">event</span>)=&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> &#123;keyCode, target&#125; = event</div><div class="line">    <span class="keyword">if</span>(target.value.trim() !== <span class="string">''</span> &amp;&amp; keyCode === <span class="number">13</span> ) &#123;</div><div class="line">        <span class="built_in">console</span>.log(target.value);</div><div class="line">        <span class="keyword">let</span> params = &#123;</div><div class="line">            <span class="attr">id</span>: nanoid(),</div><div class="line">            <span class="attr">name</span>:target.value,</div><div class="line">            <span class="attr">done</span>:<span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.props.addToDo(params)</div><div class="line">        target.value = <span class="string">''</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="兄弟组件传值-消息订阅与发布-："><a href="#兄弟组件传值-消息订阅与发布-：" class="headerlink" title="兄弟组件传值(消息订阅与发布)："></a>兄弟组件传值(消息订阅与发布)：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">npm i pubsub-js</div><div class="line"></div><div class="line"><span class="comment">//订阅消息,组件一挂载就发布, 返回一个订阅token</span></div><div class="line"><span class="comment">//第一个参数: 订阅名</span></div><div class="line"><span class="comment">//第二个参数: 回调</span></div><div class="line"><span class="comment">//回调函数的第一个参数: 订阅名</span></div><div class="line"><span class="comment">//回调函数的第二个参数: 订阅传过来的值</span></div><div class="line">componentDidMount() &#123;</div><div class="line">    <span class="keyword">this</span>.token = PubSub.subscribe(<span class="string">'at'</span>, (_, data) =&gt; &#123;</div><div class="line">        <span class="keyword">this</span>.setState(data)</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//订阅的值发生变动,调用</span></div><div class="line"><span class="comment">//第一个参数: 订阅名</span></div><div class="line"><span class="comment">//第二个参数: 传递的值</span></div><div class="line">PubSub.publish(<span class="string">'at'</span>, &#123;<span class="string">'name'</span>:<span class="string">'tom'</span>&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//组件销毁前要删除token</span></div><div class="line">componentWillUnmount() &#123;</div><div class="line">    PubSub.unsubscribe(<span class="keyword">this</span>.token)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;父传子-props&quot;&gt;&lt;a href=&quot;#父传子-props&quot; class=&quot;headerlink&quot; title=&quot;父传子 props&quot;&gt;&lt;/a&gt;父传子 props&lt;/h3&gt;&lt;p&gt;与vue一样 ：组件无论是使用函数声明还是通过 class 声明，都决不能修改自身的</summary>
      
    
    
    
    
    <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react生命周期</title>
    <link href="http://yoursite.com/2021/04/23/react/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2021/04/23/react/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2021-04-23T05:31:53.000Z</published>
    <updated>2021-04-23T08:46:20.613Z</updated>
    
    <content type="html"><![CDATA[<h3 id="旧生命周期"><a href="#旧生命周期" class="headerlink" title="旧生命周期"></a>旧生命周期</h3><h3 id="react旧生命周期"><a href="#react旧生命周期" class="headerlink" title="react旧生命周期"></a>react旧生命周期</h3><p><img src="F:\zzz\react\react全家桶资料\02_原理图\react生命周期(旧" alt="react生命周期(旧)">.png)</p><h3 id="vue-旧生命周期"><a href="#vue-旧生命周期" class="headerlink" title="vue  旧生命周期"></a>vue  旧生命周期</h3><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="Vue 实例生命周期"></p><h3 id="react新生命周期"><a href="#react新生命周期" class="headerlink" title="react新生命周期"></a>react新生命周期</h3><p><img src="F:\zzz\react\react全家桶资料\02_原理图\react生命周期(新" alt="react生命周期(新)">.png)</p><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*以下三个与之前相比需加上  UNSAVE_ 前缀*/</span></div><div class="line">UNSAVE_componentWillMount() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Demo-componentWillMount'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">UNSAVE_componentWillUnmount() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Demo-componentWillUnmount'</span>);</div><div class="line">&#125;</div><div class="line">UNSAVE_componentWillReceiveProps(props) &#123;</div><div class="line">    <span class="built_in">console</span>.log(props);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'DemoChild2-componentWillReciveProps'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*新增两个生命周期*/</span></div><div class="line"><span class="comment">//报错 getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.</span></div><div class="line"><span class="comment">//不能这样用</span></div><div class="line">getDerivedStateFromProps() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Demo-getDeivedPropForms'</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//应该这样用</span></div><div class="line"><span class="comment">//需要返回一个状态对象或者null</span></div><div class="line"><span class="comment">//可以接收props</span></div><div class="line"><span class="keyword">static</span> getDerivedStateFromProps(props) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Demo-getDeivedPropForms'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//更新之前获取快照 返回值作为参数返回给 componentDidUpdate, 可以用来传递参数</span></div><div class="line">getSnapshotBeforeUpdate() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Demo-getSnpshotBeforeUpdate'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//preProps props</span></div><div class="line"><span class="comment">//preState state</span></div><div class="line"><span class="comment">//snapshot getSnapshotBeforeUpdate返回值</span></div><div class="line">componentDidUpdate(preProps, preState, snapshot) &#123;</div><div class="line">    <span class="built_in">console</span>.log(preProps, preState, snapshot);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Demo-componentDidUpdate'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*弃用一个*/</span></div><div class="line">componentWillUpdate() &#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;旧生命周期&quot;&gt;&lt;a href=&quot;#旧生命周期&quot; class=&quot;headerlink&quot; title=&quot;旧生命周期&quot;&gt;&lt;/a&gt;旧生命周期&lt;/h3&gt;&lt;h3 id=&quot;react旧生命周期&quot;&gt;&lt;a href=&quot;#react旧生命周期&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="reactreact旧生命周期" scheme="http://yoursite.com/tags/reactreact旧生命周期/"/>
    
  </entry>
  
  <entry>
    <title>js函数柯里化</title>
    <link href="http://yoursite.com/2021/04/23/js/js%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    <id>http://yoursite.com/2021/04/23/js/js%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/</id>
    <published>2021-04-23T02:42:25.000Z</published>
    <updated>2021-04-23T03:16:05.201Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><h4 id="函数调用继续返回函数，实现多次接收参数最后统一处理"><a href="#函数调用继续返回函数，实现多次接收参数最后统一处理" class="headerlink" title="函数调用继续返回函数，实现多次接收参数最后统一处理"></a>函数调用继续返回函数，实现多次接收参数最后统一处理</h4><h4 id="只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数"><a href="#只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数" class="headerlink" title="只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数"></a>只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数</h4><p>简单的柯里化函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">b</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> a + b + c</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)); <span class="comment">//6</span></div></pre></td></tr></table></figure><p>应用：</p><p>react中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">saveFormData = <span class="function">(<span class="params">dataType</span>) =&gt;</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">this</span>.setState(&#123;[dataType]: event.target.value&#125;)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"><span class="comment">//react 默认传递参数event 即实际调用为 this.saveFormData('username')（event）</span></div><div class="line"><span class="comment">//onChange 需要函数作为调用，saveFormData('username') 返回的是一个函数</span></div><div class="line">render() &#123;</div><div class="line"><span class="keyword">return</span> (</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> </span></span></div><div class="line"><span class="attr">type</span>=<span class="string">'text'</span> </div><div class="line"><span class="attr">name</span>=<span class="string">'username'</span></div><div class="line"><span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>'<span class="attr">username</span>')&#125;&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">input</span>&gt;</span></div><div class="line">)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>数组排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* @function 指定数组排序规则</div><div class="line">* @param str &#123;string?&#125; 单个属性，不确定个数</div><div class="line">* @param num &#123;Number?&#125; 是否升序 默认降序</div><div class="line">* @version 1.0.0</div><div class="line">* @description 针对特殊业务需求，用于图表的排序</div><div class="line">*/</div><div class="line">sortBy() &#123;</div><div class="line">    <span class="keyword">let</span> num = <span class="number">1</span></div><div class="line">    <span class="keyword">let</span> arr = []</div><div class="line">    <span class="comment">//最后一个参数是数字</span></div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">arguments</span>[<span class="built_in">arguments</span>.length - <span class="number">1</span>] === <span class="string">'number'</span> &amp;&amp;              !<span class="built_in">isNaN</span>(<span class="built_in">arguments</span>[<span class="built_in">arguments</span>.length - <span class="number">1</span>])) &#123;</div><div class="line">        <span class="comment">//获取最后一个参数的值</span></div><div class="line">        num = <span class="built_in">arguments</span>[<span class="built_in">arguments</span>.length - <span class="number">1</span>] ? <span class="number">1</span> : <span class="number">-1</span></div><div class="line">        arr = <span class="built_in">arguments</span>.slice(<span class="number">0</span>, <span class="built_in">arguments</span>.length - <span class="number">1</span>)</div><div class="line">    &#125;<span class="keyword">else</span> &#123;<span class="comment">//最后一个参数不是数字</span></div><div class="line">        arr = <span class="built_in">arguments</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// num = num ? 1 : -1</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="comment">// 获取其他参数的值</span></div><div class="line">        <span class="keyword">let</span> a1 = <span class="number">0</span></div><div class="line">        <span class="keyword">let</span> b1 = <span class="number">0</span></div><div class="line">        <span class="comment">//这里 a[arr[i]] 后端返回的值确定是number</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len =  arr.length; i &lt; len; i++) &#123;</div><div class="line">            a1 += a[arr[i]]</div><div class="line">            b1 += b[arr[i]]</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(a1 &gt; b1)&#123;</div><div class="line">            <span class="keyword">return</span> num * <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(a1 &lt; b1)&#123;</div><div class="line">            <span class="keyword">return</span> num * <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用</span></div><div class="line">data.sort(<span class="keyword">this</span>.sortBy(<span class="string">'isLeader'</span>, <span class="string">'isNotLeader'</span>))</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;函数柯里化&quot;&gt;&lt;a href=&quot;#函数柯里化&quot; class=&quot;headerlink&quot; title=&quot;函数柯里化&quot;&gt;&lt;/a&gt;函数柯里化&lt;/h3&gt;&lt;h4 id=&quot;函数调用继续返回函数，实现多次接收参数最后统一处理&quot;&gt;&lt;a href=&quot;#函数调用继续返回函数，实现多次接</summary>
      
    
    
    
    
    <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>scss中deep</title>
    <link href="http://yoursite.com/2021/04/20/css/scss%E4%B8%ADdeep/"/>
    <id>http://yoursite.com/2021/04/20/css/scss%E4%B8%ADdeep/</id>
    <published>2021-04-20T02:29:18.000Z</published>
    <updated>2021-04-20T02:44:20.362Z</updated>
    
    <content type="html"><![CDATA[<p>vue中有的组件是挂载到全局，查看时与app同级，这时的组件样式更改不能在vue文件中的scope中更改，因为无法读取到。</p><p>同时使用deep有三种运算符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; =&gt; 如果你希望 scoped 样式中的一个选择器能够作用得“更深”，例如影响子组件，你可以使用 &gt;&gt;&gt; 操作符：</div><div class="line">        有些像 Sass 之类的预处理器无法正确解析 &gt;&gt;&gt;。这种情况下你可以使用 /deep/ 或 ::v-deep 操作符取而代之——两者都是 &gt;&gt;&gt; 的别名，同样可以正常工作</div><div class="line"></div><div class="line">/deep/ =&gt; 在scss中有时不能正确编译</div><div class="line"></div><div class="line">::v-deep =&gt; 与/deep/用法一致，听说比/deep/快</div><div class="line">::v-deep .MySteps &#123;</div><div class="line">        width: 50% !important;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vue中有的组件是挂载到全局，查看时与app同级，这时的组件样式更改不能在vue文件中的scope中更改，因为无法读取到。&lt;/p&gt;
&lt;p&gt;同时使用deep有三种运算符&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    
    <category term="scss" scheme="http://yoursite.com/tags/scss/"/>
    
  </entry>
  
  <entry>
    <title>vue3踩坑记录</title>
    <link href="http://yoursite.com/2021/04/19/vue3/vue3%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2021/04/19/vue3/vue3%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2021-04-19T11:03:16.000Z</published>
    <updated>2021-04-20T03:51:02.436Z</updated>
    
    <content type="html"><![CDATA[<h2 id="报错：Error-vue-composition-api-must-call-Vue-use-VueCompositionAPI-before-using-any-function"><a href="#报错：Error-vue-composition-api-must-call-Vue-use-VueCompositionAPI-before-using-any-function" class="headerlink" title="报错：Error: [vue-composition-api] must call Vue.use(VueCompositionAPI) before using any function."></a>报错：Error: [vue-composition-api] must call Vue.use(VueCompositionAPI) before using any function.</h2><h3 id="原因：composition-api-需要安装并引入使用"><a href="#原因：composition-api-需要安装并引入使用" class="headerlink" title="原因：composition-api 需要安装并引入使用"></a>原因：composition-api 需要安装并引入使用</h3><h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install @vue/composition-api --save</div><div class="line"><span class="keyword">import</span> VueCompositionApi <span class="keyword">from</span> <span class="string">'@vue/composition-api'</span></div><div class="line">Vue.use(VueCompositionApi)</div></pre></td></tr></table></figure><h2 id="报错：TypeError-Cannot-read-property-‘util’-of-undefined"><a href="#报错：TypeError-Cannot-read-property-‘util’-of-undefined" class="headerlink" title="报错：TypeError: Cannot read property ‘util’ of undefined"></a>报错：TypeError: Cannot read property ‘util’ of undefined</h2><h3 id="原因：import-defineComponent-from-‘-vue-composition-api’，-这是2-0-3-0的过度版本的脚手架创建的"><a href="#原因：import-defineComponent-from-‘-vue-composition-api’，-这是2-0-3-0的过度版本的脚手架创建的" class="headerlink" title="原因：import { defineComponent } from ‘@vue/composition-api’， 这是2.0-3.0的过度版本的脚手架创建的"></a>原因：import { defineComponent } from ‘@vue/composition-api’， 这是2.0-3.0的过度版本的脚手架创建的</h3><h3 id="解决：升级vue-cli至最新版本"><a href="#解决：升级vue-cli至最新版本" class="headerlink" title="解决：升级vue-cli至最新版本"></a>解决：升级vue-cli至最新版本</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm uninstall vue-cli -g</div><div class="line">npm i @vue/cli -g</div><div class="line">vue --version</div></pre></td></tr></table></figure><h2 id="获取-ctx-（vue2中的this对象-）"><a href="#获取-ctx-（vue2中的this对象-）" class="headerlink" title="获取 ctx （vue2中的this对象 ）"></a>获取 ctx （vue2中的this对象 ）</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; getCurrentInstance&#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> &#123; ctx &#125;:<span class="built_in">any</span> = getCurrentInstance()</div></pre></td></tr></table></figure><h4 id="此时会报错-Property-‘ctx’-does-not-exist-on-type-‘ComponentInternalInstance’"><a href="#此时会报错-Property-‘ctx’-does-not-exist-on-type-‘ComponentInternalInstance’" class="headerlink" title="此时会报错   Property ‘ctx’ does not exist on type ‘ComponentInternalInstance’."></a>此时会报错   Property ‘ctx’ does not exist on type ‘ComponentInternalInstance’.</h4><p>此时使用：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// @ts-ignore</span></div><div class="line"><span class="keyword">const</span> &#123; ctx &#125;:<span class="built_in">any</span> = getCurrentInstance()</div><div class="line"></div><div class="line"><span class="comment">//并关闭ts严格模式</span></div><div class="line"><span class="string">"strict"</span>: <span class="literal">false</span>,</div></pre></td></tr></table></figure><h4 id="会报错：Do-not-use-“-ts-ignore”-because-it-alters-compilation-errors-typescript-eslint-ban-ts-comment"><a href="#会报错：Do-not-use-“-ts-ignore”-because-it-alters-compilation-errors-typescript-eslint-ban-ts-comment" class="headerlink" title="会报错：Do not use “@ts-ignore” because it alters compilation errors  @typescript-eslint/ban-ts-comment"></a>会报错：Do not use “@ts-ignore” because it alters compilation errors  @typescript-eslint/ban-ts-comment</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这是eslint语法检查报错</span></div><div class="line"><span class="comment">//可以将 vue.config.js 中的  lintOnSave: false 注释掉</span></div><div class="line"><span class="comment">//lintOnSave: false,</span></div></pre></td></tr></table></figure><h4 id="终极方案-anyScript"><a href="#终极方案-anyScript" class="headerlink" title="终极方案:anyScript"></a>终极方案:anyScript</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; ctx &#125;:<span class="built_in">any</span> = getCurrentInstance()</div><div class="line"></div><div class="line"><span class="comment">//注意 以下是不行的,因为eslint语法会覆盖ts语法,以下为eslint重命名语法</span></div><div class="line"><span class="keyword">const</span> &#123; ctx:<span class="built_in">any</span>  &#125;= getCurrentInstance()</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;报错：Error-vue-composition-api-must-call-Vue-use-VueCompositionAPI-before-using-any-function&quot;&gt;&lt;a href=&quot;#报错：Error-vue-composition-api-m</summary>
      
    
    
    
    
    <category term="vue3" scheme="http://yoursite.com/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>vue3路由</title>
    <link href="http://yoursite.com/2021/04/17/vue3/vue3%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2021/04/17/vue3/vue3%E8%B7%AF%E7%94%B1/</id>
    <published>2021-04-17T09:45:39.000Z</published>
    <updated>2021-04-17T12:40:14.058Z</updated>
    
    <content type="html"><![CDATA[<h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><p>跟着公司大佬学习3.0前端路由配置</p><p><em>在定义文件时不要使用router后缀否则会无法加载router-view</em></p><h4 id="入口文件-index-ts"><a href="#入口文件-index-ts" class="headerlink" title="入口文件  index.ts"></a>入口文件  index.ts</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory, RouteRecordRaw &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></div><div class="line"><span class="keyword">import</span> &#123; staticRouters &#125; <span class="keyword">from</span> <span class="string">'./staticRouters'</span>;</div><div class="line"><span class="keyword">import</span> defaultRouters <span class="keyword">from</span> <span class="string">'./defaultRouters'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> routes: <span class="built_in">any</span> = staticRouters.concat(defaultRouters);</div><div class="line"></div><div class="line"><span class="keyword">const</span> router = createRouter(&#123;</div><div class="line">    history: createWebHistory(process.env.BASE_URL),</div><div class="line">    routes</div><div class="line">&#125;)</div><div class="line"></div><div class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// let userInfo = localStorage.getItem('user');</span></div><div class="line">    <span class="keyword">const</span> userInfo = <span class="string">"xxxxxxx"</span>;</div><div class="line">    <span class="keyword">if</span> (to.path === <span class="string">"/login"</span>) &#123;</div><div class="line">        next();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (userInfo) &#123;</div><div class="line">            next();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            next(&#123;</div><div class="line">                path: <span class="string">'/login'</span></div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;路由配置&quot;&gt;&lt;a href=&quot;#路由配置&quot; class=&quot;headerlink&quot; title=&quot;路由配置&quot;&gt;&lt;/a&gt;路由配置&lt;/h3&gt;&lt;p&gt;跟着公司大佬学习3.0前端路由配置&lt;/p&gt;
&lt;p&gt;&lt;em&gt;在定义文件时不要使用router后缀否则会无法加载router-v</summary>
      
    
    
    
    
    <category term="vue3" scheme="http://yoursite.com/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>vue-el限制输入</title>
    <link href="http://yoursite.com/2021/04/13/elementUI/vue-el%E9%99%90%E5%88%B6%E8%BE%93%E5%85%A5/"/>
    <id>http://yoursite.com/2021/04/13/elementUI/vue-el%E9%99%90%E5%88%B6%E8%BE%93%E5%85%A5/</id>
    <published>2021-04-13T06:26:35.000Z</published>
    <updated>2021-04-13T06:29:53.212Z</updated>
    
    <content type="html"><![CDATA[<h3 id="oninput限制输入"><a href="#oninput限制输入" class="headerlink" title="oninput限制输入"></a>oninput限制输入</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;el-input v-model='num'</div><div class="line">oninput="if(/^[0-9]*$/.test(value) == false) &#123; value = null &#125;</div><div class="line">                   if(value &lt; 0)&#123;value=0&#125;</div><div class="line">                   if(value &gt; 100)&#123;value=100&#125;</div><div class="line">                   if(value&gt; 0 &amp;&amp; value &lt; 100) &#123;value=value.replace(/[^\d]/g,'')&#125;" &gt;&lt;/el-input&gt;</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;oninput限制输入&quot;&gt;&lt;a href=&quot;#oninput限制输入&quot; class=&quot;headerlink&quot; title=&quot;oninput限制输入&quot;&gt;&lt;/a&gt;oninput限制输入&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;</summary>
      
    
    
    
    
    <category term="vue-el踩坑" scheme="http://yoursite.com/tags/vue-el踩坑/"/>
    
  </entry>
  
  <entry>
    <title>vue路由模式</title>
    <link href="http://yoursite.com/2021/04/08/elementUI/vue%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2021/04/08/elementUI/vue%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-04-08T09:39:47.000Z</published>
    <updated>2021-04-08T10:12:39.977Z</updated>
    
    <content type="html"><![CDATA[<h3 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h3><p>今天使用路由跳转时始终访问不到指定页面</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const href = `/informationAudit/intoInfoAudit?id=` + id;</div><div class="line">window.open(href, "_blank");</div><div class="line"></div><div class="line">//点击后路由跳转</div><div class="line">/informationAudit/intoInfoAudit?id=undefined#/dashboard</div></pre></td></tr></table></figure><p>后来发现路由模式不对</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createRouter = <span class="function"><span class="params">()</span> =&gt;</span></div><div class="line">  <span class="keyword">new</span> Router(&#123;</div><div class="line">    <span class="comment">//不应该注释</span></div><div class="line">    <span class="comment">//mode: 'history', // 路由模式</span></div><div class="line">    scrollBehavior: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">y</span>: <span class="number">0</span> &#125;),</div><div class="line">    <span class="attr">isAdd</span>: <span class="literal">false</span>, <span class="comment">//是否已经添加动态(菜单)路由</span></div><div class="line">    routes: constantRoutes,</div><div class="line">    <span class="attr">base</span>: <span class="string">'/icostviews/'</span></div><div class="line">  &#125;);</div></pre></td></tr></table></figure><p>vue-router有两种模式：</p><p>hash（默认）：</p><p>1、使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载</p><p>2、url带有<em>#</em></p><p>3、前端路由修改的是#中的信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//如果直接输入页面会跳转</div><div class="line">/informationAudit/intoInfoAudit?id=undefined#/supplierManagement/informationAudit</div></pre></td></tr></table></figure><p>history：</p><p>1、这种模式充分利用 <code>history.pushState</code> API 来完成 URL 跳转而无须重新加载页面。</p><p>2、使用history 模式时，URL 就像正常的 url</p><p>3、需要后台配置支持，刷新会请求服务器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;路由模式&quot;&gt;&lt;a href=&quot;#路由模式&quot; class=&quot;headerlink&quot; title=&quot;路由模式&quot;&gt;&lt;/a&gt;路由模式&lt;/h3&gt;&lt;p&gt;今天使用路由跳转时始终访问不到指定页面&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    
    <category term="vue-Router" scheme="http://yoursite.com/tags/vue-Router/"/>
    
  </entry>
  
  <entry>
    <title>js正则</title>
    <link href="http://yoursite.com/2021/04/07/js/js%E6%AD%A3%E5%88%99/"/>
    <id>http://yoursite.com/2021/04/07/js/js%E6%AD%A3%E5%88%99/</id>
    <published>2021-04-07T08:00:57.000Z</published>
    <updated>2021-04-07T08:07:54.509Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><h4 id="常用元字符串"><a href="#常用元字符串" class="headerlink" title="常用元字符串"></a>常用元字符串</h4><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线</td></tr><tr><td>\W</td><td>匹配任意不是字母，数字，下划线</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>.</td><td>匹配除换行符以外的任意单个字符</td></tr><tr><td>^</td><td>表示匹配行首的文本(以谁开始)</td></tr><tr><td>$</td><td>表示匹配行尾的文本(以谁结束)</td></tr></tbody></table><h4 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h4><table><thead><tr><th>限定符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[] 字符串用中括号括起来，表示匹配其中的任一字符，相当于或的意思</div><div class="line">[^]  匹配除中括号以内的内容</div><div class="line">\ 转义符</div><div class="line">| 或者，选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱</div><div class="line">() 从两个直接量中选择一个，分组</div><div class="line">   eg：gr(a|e)y匹配gray和grey</div><div class="line">[\u4e00-\u9fa5]  匹配汉字</div></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//提取邮件中的每一部分</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">'xxxx@itcast.com'</span>;</div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w+)@(\w+)\.(\w+)/</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>); <span class="comment">//RegExp() &#123; [native code] &#125;</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>); <span class="comment">//xxxx</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>); <span class="comment">//itcast</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">3</span>); <span class="comment">//com</span></div><div class="line"></div><div class="line"><span class="comment">//为什么  RegExp.$1 有值</span></div><div class="line"><span class="comment">//参考：https://blog.csdn.net/qq_42423964/article/details/102385983</span></div><div class="line"></div><div class="line"><span class="built_in">RegExp</span> 是javascript中的一个内置对象。为正则表达式。</div><div class="line"></div><div class="line"><span class="built_in">RegExp</span>.$<span class="number">1</span>是<span class="built_in">RegExp</span>的一个属性,指的是与正则表达式匹配的第一个 子匹配(以括号为标志)字符串，以此类推，<span class="built_in">RegExp</span>.$<span class="number">2</span>，<span class="built_in">RegExp</span>.$<span class="number">3</span>，..RegExp.$<span class="number">99</span>总共可以有<span class="number">99</span>个匹配</div><div class="line"></div><div class="line">如果你直接在控制台打印<span class="built_in">RegExp</span>, 出现的一定是一个空字符串: <span class="string">""</span>。那么, 我们在什么时候可以使用<span class="built_in">RegExp</span>.$<span class="number">1</span>呢?</div><div class="line"></div><div class="line"><span class="comment">//其实RegExp这个对象会在我们调用了正则表达式的方法后, 自动将最近一次的结果保存在里面, 所以如果我们在使用正则表达式时, 有用到分组, 那么就可以直接在调用完以后直接使用RegExp.$xx来使用捕获到的分组内容</span></div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;正则&quot;&gt;&lt;a href=&quot;#正则&quot; class=&quot;headerlink&quot; title=&quot;正则&quot;&gt;&lt;/a&gt;正则&lt;/h3&gt;&lt;h4 id=&quot;常用元字符串&quot;&gt;&lt;a href=&quot;#常用元字符串&quot; class=&quot;headerlink&quot; title=&quot;常用元字符串&quot;&gt;&lt;/a&gt;常</summary>
      
    
    
    
    
    <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js对象方法</title>
    <link href="http://yoursite.com/2021/04/07/js/js%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2021/04/07/js/js%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/</id>
    <published>2021-04-07T07:41:27.000Z</published>
    <updated>2021-04-07T07:42:00.717Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对象深拷贝"><a href="#对象深拷贝" class="headerlink" title="对象深拷贝"></a>对象深拷贝</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 深拷贝  把o1的成员拷贝给o2</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">o1, o2</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> o1) &#123;</div><div class="line">    <span class="comment">// 获取key属性对应的值</span></div><div class="line">    <span class="keyword">var</span> item = o1[key];</div><div class="line"></div><div class="line">    <span class="comment">// 如果item 是对象？</span></div><div class="line">    <span class="comment">// var o = &#123;&#125;</span></div><div class="line">    <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</div><div class="line">      <span class="comment">// var o = &#123;&#125;;</span></div><div class="line">      o2[key] = &#123;&#125;; </div><div class="line">      deepCopy(item, o2[key]);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</div><div class="line">      <span class="comment">// 如果item 是数组呢？</span></div><div class="line">      <span class="comment">// var arr = [];</span></div><div class="line">      o2[key] = [];</div><div class="line">      deepCopy(item, o2[key]);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 如果是简单类型</span></div><div class="line">      o2[key] = o1[key];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;对象深拷贝&quot;&gt;&lt;a href=&quot;#对象深拷贝&quot; class=&quot;headerlink&quot; title=&quot;对象深拷贝&quot;&gt;&lt;/a&gt;对象深拷贝&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    
    <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>el-table自定义排序</title>
    <link href="http://yoursite.com/2021/04/06/elementUI/el-table%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2021/04/06/elementUI/el-table%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/</id>
    <published>2021-04-06T02:38:57.000Z</published>
    <updated>2021-04-06T03:12:24.493Z</updated>
    
    <content type="html"><![CDATA[<h3 id="表格自定义排序"><a href="#表格自定义排序" class="headerlink" title="表格自定义排序"></a>表格自定义排序</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">el-table</span></span></div><div class="line"><span class="attr">ref</span>=<span class="string">"tableCot"</span></div><div class="line"><span class="attr">:data</span>=<span class="string">"tableData"</span></div><div class="line"><span class="attr">:default-sort</span> = <span class="string">"&#123;prop: 'projectNo', order: 'descending'&#125;"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">el-table-column</span></span></div><div class="line">     <span class="attr">align</span>=<span class="string">"center"</span></div><div class="line">     <span class="attr">:show-overflow-tooltip</span>=<span class="string">"true"</span></div><div class="line">     <span class="attr">prop</span>=<span class="string">"projectNo"</span></div><div class="line">     <span class="attr">label</span>=<span class="string">"项目编号"</span></div><div class="line">     <span class="attr">:sortable</span>=<span class="string">"true"</span></div><div class="line">     <span class="attr">:sort-method</span>=<span class="string">"sortby"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span>             </div><div class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//可以先看看a，b的内容</span></div><div class="line">sortby(a, b) &#123;</div><div class="line">    <span class="keyword">let</span> x = <span class="built_in">parseInt</span>(a.projectNo.substring(<span class="number">19</span>))</div><div class="line">    <span class="keyword">let</span> y = <span class="built_in">parseInt</span>(b.projectNo.substring(<span class="number">19</span>))</div><div class="line">    <span class="keyword">return</span> x &gt; y ? <span class="number">-1</span> : <span class="number">1</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;表格自定义排序&quot;&gt;&lt;a href=&quot;#表格自定义排序&quot; class=&quot;headerlink&quot; title=&quot;表格自定义排序&quot;&gt;&lt;/a&gt;表格自定义排序&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    
    <category term="Element UI" scheme="http://yoursite.com/tags/Element-UI/"/>
    
  </entry>
  
  <entry>
    <title>vue3新特性-使用</title>
    <link href="http://yoursite.com/2021/03/31/vue3/vue3%E6%96%B0%E7%89%B9%E6%80%A7-%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2021/03/31/vue3/vue3%E6%96%B0%E7%89%B9%E6%80%A7-%E4%BD%BF%E7%94%A8/</id>
    <published>2021-03-31T09:32:34.000Z</published>
    <updated>2021-04-01T14:25:12.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><ul><li>新的option, 所有的组合API函数都在此使用, 只在初始化时执行一次</li><li>函数如果返回对象, 对象中的属性或方法, 模板中可以直接使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//理解：将2.0中data 和 methods 统一,必须通过 return 返回才可以使用</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;defineComponent&#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line"><span class="comment">//暴露一个定义好的组件</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'App'</span>,</div><div class="line">    setup() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ul><li>作用: 定义一个数据的响应式</li><li>语法: const xxx = ref(initValue):<ul><li>创建一个包含响应式数据的引用(reference)对象</li><li>js中操作数据: xxx.value</li><li>模板中操作数据: 不需要.value</li></ul></li><li>一般用来定义一个基本类型的响应式数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"updateCount"</span>&gt;</span>更新数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;defineComponent, ref&#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line">setup()&#123;</div><div class="line">  <span class="comment">// console.log('第一次')</span></div><div class="line">  <span class="comment">// 变量</span></div><div class="line">  <span class="comment">// let count = 0 // 此时的数据并不是响应式的数据(响应式数据:数据变化,页面跟着渲染变化)</span></div><div class="line">  <span class="comment">// ref是一个函数,作用:定义一个响应式的数据,返回的是一个Ref对象,对象中有一个value属性,如果需要对数据进行操作,需要使用该Ref对象调用value属性的方式进行数据的操作</span></div><div class="line">  <span class="comment">// html模版中是不需要使用.value属性的写法</span></div><div class="line">  <span class="comment">// 一般用来定义一个基本类型的响应式数据</span></div><div class="line">  <span class="comment">// count 的类型 Ref类型</span></div><div class="line">    <span class="comment">//count.value = 0</span></div><div class="line">  <span class="keyword">const</span> count = ref(<span class="number">0</span>)</div><div class="line">  <span class="built_in">console</span>.log(count)</div><div class="line">  <span class="comment">// 方法</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">updateCount</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'====='</span>)</div><div class="line">    <span class="comment">// 报错的原因:count是一个Ref对象,对象是不能进行++的操作</span></div><div class="line">    <span class="comment">// count++</span></div><div class="line">    count.value++</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 返回的是一个对象</span></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="comment">// 属性</span></div><div class="line">    count,</div><div class="line">    <span class="comment">// 方法</span></div><div class="line">    updateCount</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h3><ul><li>作用: 定义多个数据的响应式</li><li>const proxy = reactive(obj): 接收一个普通对象然后返回该普通对象的响应式代理器对象</li><li>响应式转换是“深层的”：会影响对象内部所有嵌套的属性</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据都是响应式的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//目标对象</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'小明'</span>,</div><div class="line">      <span class="attr">age</span>: <span class="number">20</span>,</div><div class="line">      <span class="attr">wife</span>: &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'小甜甜'</span>,</div><div class="line">        <span class="attr">age</span>: <span class="number">18</span>,</div><div class="line">        <span class="attr">cars</span>: [<span class="string">'奔驰'</span>, <span class="string">'宝马'</span>, <span class="string">'奥迪'</span>],</div><div class="line">      &#125;,</div><div class="line">    &#125;</div><div class="line"><span class="comment">//代理对象</span></div><div class="line"><span class="keyword">const</span> user = reactive&lt;any&gt;(obj)</div><div class="line"><span class="keyword">const</span> updateUser = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="comment">// 直接使用目标对象的方式来更新目标对象中的成员的值,是不可能的,只能使用代理对象的方式来更新数据(响应式数据)</span></div><div class="line">      <span class="comment">// obj.name += '==='</span></div><div class="line">      <span class="comment">// 通过当前的代理对象把目标对象中的某个数组属性添加一个新的属性</span></div><div class="line">      user.name += <span class="string">'==='</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 总结: 如果操作代理对象,目标对象中的数据也会随之变化,同时如果想要在操作数据的时候,界面也要跟着重新更新渲染,那么也是操作代理对象</span></div><div class="line"><span class="comment">//操作目标对象,目标对象中的数据会随之变化,但不会重新渲染</span></div></pre></td></tr></table></figure><h3 id="computed-和-watch"><a href="#computed-和-watch" class="headerlink" title="computed  和  watch"></a>computed  和  watch</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//computed 和 watch 也放入setup之中</span></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  defineComponent,</div><div class="line">  reactive,</div><div class="line">  computed,</div><div class="line">  watch,</div><div class="line">  ref,</div><div class="line">  watchEffect,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'App'</span>,</div><div class="line">  setup() &#123;</div><div class="line">    <span class="comment">// 定义一个响应式对象</span></div><div class="line">    <span class="keyword">const</span> user = reactive(&#123;</div><div class="line">      <span class="comment">// 姓氏</span></div><div class="line">      firstName: <span class="string">'东方'</span>,</div><div class="line">      <span class="comment">// 名字</span></div><div class="line">      lastName: <span class="string">'不败'</span>,</div><div class="line">    &#125;)</div><div class="line">    <span class="comment">// 通过计算属性的方式,实现第一个姓名的显示</span></div><div class="line">    <span class="comment">// vue3中的计算属性</span></div><div class="line">    <span class="comment">// 计算属性的函数中如果只传入一个回调函数,表示的是get</span></div><div class="line"></div><div class="line">    <span class="comment">// 第一个姓名:</span></div><div class="line">    <span class="comment">// 返回的是一个Ref类型的对象</span></div><div class="line">    <span class="keyword">const</span> fullName1 = computed(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> user.firstName + <span class="string">'_'</span> + user.lastName</div><div class="line">    &#125;)</div><div class="line">    <span class="comment">// 第二个姓名:</span></div><div class="line">    <span class="keyword">const</span> fullName2 = computed(&#123;</div><div class="line">      get() &#123;</div><div class="line">        <span class="keyword">return</span> user.firstName + <span class="string">'_'</span> + user.lastName</div><div class="line">      &#125;,</div><div class="line">      set(val: string) &#123;</div><div class="line">        <span class="comment">// console.log('=====',val)</span></div><div class="line">        <span class="keyword">const</span> names = val.split(<span class="string">'_'</span>)</div><div class="line">        user.firstName = names[<span class="number">0</span>]</div><div class="line">        user.lastName = names[<span class="number">1</span>]</div><div class="line">      &#125;,</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">// 第三个姓名:</span></div><div class="line">    <span class="keyword">const</span> fullName3 = ref(<span class="string">''</span>)</div><div class="line">    <span class="comment">// 监视----监视指定的数据</span></div><div class="line">    watch(</div><div class="line">      user,</div><div class="line">      (&#123; firstName, lastName &#125;) =&gt; &#123;</div><div class="line">        fullName3.value = firstName + <span class="string">'_'</span> + lastName</div><div class="line">      &#125;,</div><div class="line">      &#123; <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="attr">deep</span>: <span class="literal">true</span> &#125;</div><div class="line">    )</div><div class="line">    <span class="comment">// immediate 默认会执行一次watch,deep 深度监视</span></div><div class="line"></div><div class="line">    <span class="comment">// 监视,不需要配置immediate,本身默认就会进行监视,(默认执行一次)</span></div><div class="line">    <span class="comment">// watchEffect(() =&gt; &#123;</span></div><div class="line">    <span class="comment">//   fullName3.value = user.firstName + '_' + user.lastName</span></div><div class="line">    <span class="comment">// &#125;)</span></div><div class="line"></div><div class="line">    <span class="comment">// 监视fullName3的数据,改变firstName和lastName</span></div><div class="line">    watchEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">const</span> names = fullName3.value.split(<span class="string">'_'</span>)</div><div class="line">      user.firstName = names[<span class="number">0</span>]</div><div class="line">      user.lastName = names[<span class="number">1</span>]</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">// watch---可以监视多个数据的</span></div><div class="line">    <span class="comment">// watch([user.firstName,user.lastName,fullName3],()=&gt;&#123;</span></div><div class="line">    <span class="comment">//   // 这里的代码就没有执行,fullName3是响应式的数据,但是,user.firstName,user.lastName不是响应式的数据</span></div><div class="line">    <span class="comment">//   console.log('====')</span></div><div class="line">    <span class="comment">// &#125;)</span></div><div class="line">    <span class="comment">// 当我们使用watch监视非响应式的数据的时候,代码需要改一下</span></div><div class="line">    watch([<span class="function"><span class="params">()</span>=&gt;</span>user.firstName, ()=&gt;user.lastName,fullName3], () =&gt; &#123;</div><div class="line">      <span class="comment">// 这里的代码就没有执行,fullName3是响应式的数据,但是,user.firstName,user.lastName不是响应式的数据</span></div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'===='</span>)</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      user,</div><div class="line">      fullName1,</div><div class="line">      fullName2,</div><div class="line">      fullName3,</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>3.0中的生命周期都变成了组合api</p><p>3.0中的执行都比2.0中的快</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">beforeCreate -&gt; 使用 setup()</div><div class="line">created -&gt; 使用 setup()</div><div class="line">beforeMount -&gt; onBeforeMount</div><div class="line">mounted -&gt; onMounted</div><div class="line">beforeUpdate -&gt; onBeforeUpdate</div><div class="line">updated -&gt; onUpdated</div><div class="line">beforeDestroy -&gt; onBeforeUnmount</div><div class="line">destroyed -&gt; onUnmounted</div><div class="line">errorCaptured -&gt; onErrorCaptured</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;setup&quot;&gt;&lt;a href=&quot;#setup&quot; class=&quot;headerlink&quot; title=&quot;setup&quot;&gt;&lt;/a&gt;setup&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;新的option, 所有的组合API函数都在此使用, 只在初始化时执行一次&lt;/li&gt;
&lt;li&gt;函数如果返</summary>
      
    
    
    
    
    <category term="Vue3" scheme="http://yoursite.com/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>vue3项目创建</title>
    <link href="http://yoursite.com/2021/03/30/vue3/vue3%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA/"/>
    <id>http://yoursite.com/2021/03/30/vue3/vue3%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA/</id>
    <published>2021-03-30T06:00:49.000Z</published>
    <updated>2021-03-30T06:06:45.652Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://24kcs.github.io/vue3_study/chapter3/02_%E5%88%9B%E5%BB%BAvue3%E9%A1%B9%E7%9B%AE.html#_1-%E4%BD%BF%E7%94%A8-vue-cli-%E5%88%9B%E5%BB%BA" target="_blank" rel="external">https://24kcs.github.io/vue3_study/chapter3/02_%E5%88%9B%E5%BB%BAvue3%E9%A1%B9%E7%9B%AE.html#_1-%E4%BD%BF%E7%94%A8-vue-cli-%E5%88%9B%E5%BB%BA</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考：&lt;a href=&quot;https://24kcs.github.io/vue3_study/chapter3/02_%E5%88%9B%E5%BB%BAvue3%E9%A1%B9%E7%9B%AE.html#_1-%E4%BD%BF%E7%94%A8-vue-cli-%E</summary>
      
    
    
    
    
    <category term="Vue3" scheme="http://yoursite.com/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>ts声明文件和内置对象</title>
    <link href="http://yoursite.com/2021/03/30/TypeScript/ts%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6%E5%92%8C%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2021/03/30/TypeScript/ts%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6%E5%92%8C%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-03-30T01:51:51.000Z</published>
    <updated>2021-03-30T06:00:04.960Z</updated>
    
    <content type="html"><![CDATA[<h3 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h3><p>当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line">当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。</div><div class="line">声明语句: 如果需要ts对新的语法进行检查, 需要要加载了对应的类型说明代码</div><div class="line">  declare var jQuery: (selector: string) =&gt; any;</div><div class="line">声明文件: 把声明语句放到一个单独的文件（jQuery.d.ts）中, ts会自动解析到项目中所有声明文件</div><div class="line">下载声明文件: npm install @types/jquery --save-dev 直接安装声明文件</div><div class="line">*/</div><div class="line"></div><div class="line">jQuery(<span class="string">'#foo'</span>);</div><div class="line"><span class="comment">// ERROR: Cannot find name 'jQuery'.</span></div></pre></td></tr></table></figure><p>一般声明文件都会单独写成一个 <code>xxx.d.ts</code> 文件， TS编译器会扫描并加载项目中所有的TS声明文件</p><p>很多的第三方库都定义了对应的声明文件库, 库文件名一般为 <code>@types/xxx</code>, 可以在 <code>https://www.npmjs.com/package/package</code> 进行搜索，<strong>下载完后可不用手动声明</strong></p><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><p>JavaScript 中有很多内置对象，它们可以直接在 TypeScript 中当做定义好了的类型。</p><p>内置对象是指根据标准在全局作用域（Global）上存在的对象。这里的标准是指 ECMAScript 和其他环境（比如 DOM）的标准。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ECMAScript 的内置对象</span></div><div class="line"><span class="comment">/* 1. ECMAScript 的内置对象 */</span></div><div class="line"><span class="keyword">let</span> b: <span class="built_in">Boolean</span> = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>)</div><div class="line"><span class="keyword">let</span> n: <span class="built_in">Number</span> = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="literal">true</span>)</div><div class="line"><span class="keyword">let</span> s: <span class="built_in">String</span> = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'abc'</span>)</div><div class="line"><span class="keyword">let</span> d: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line"><span class="keyword">let</span> r: <span class="built_in">RegExp</span> = <span class="regexp">/^1/</span></div><div class="line"><span class="keyword">let</span> e: <span class="built_in">Error</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error message'</span>)</div><div class="line">b = <span class="literal">true</span></div><div class="line"><span class="comment">// let bb: boolean = new Boolean(2)  // error</span></div><div class="line"></div><div class="line"><span class="comment">//BOM 和 DOM 的内置对象</span></div><div class="line"><span class="keyword">const</span> div: HTMLElement = <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>)</div><div class="line"><span class="keyword">const</span> divs: NodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>)</div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="function">(<span class="params">event: MouseEvent</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.dir(event.target)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">const</span> fragment: DocumentFragment = <span class="built_in">document</span>.createDocumentFragment()</div></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;声明文件&quot;&gt;&lt;a href=&quot;#声明文件&quot; class=&quot;headerlink&quot; title=&quot;声明文件&quot;&gt;&lt;/a&gt;声明文件&lt;/h3&gt;&lt;p&gt;当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能&lt;/p&gt;
&lt;figure class=&quot;h</summary>
      
    
    
    
    
    <category term="Ty" scheme="http://yoursite.com/tags/Ty/"/>
    
  </entry>
  
</feed>
