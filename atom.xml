<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录</title>
  
  <subtitle>千里之行，始于足下</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-03-27T13:30:50.104Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Z-Q-K</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ts使用</title>
    <link href="http://yoursite.com/2021/03/26/ts%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2021/03/26/ts%E4%BD%BF%E7%94%A8/</id>
    <published>2021-03-26T08:33:51.000Z</published>
    <updated>2021-03-27T13:30:50.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、基础类型"><a href="#一、基础类型" class="headerlink" title="一、基础类型"></a>一、基础类型</h2><h3 id="TypeScript-支持与-JavaScript-几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用"><a href="#TypeScript-支持与-JavaScript-几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用" class="headerlink" title="TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用"></a>TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//变量</span></div><div class="line"><span class="comment">//一开始赋值什么类型就只能使用什么类型</span></div><div class="line"><span class="keyword">let</span> xx:类型 = yy;</div></pre></td></tr></table></figure><a id="more"></a><h3 id="1、布尔型"><a href="#1、布尔型" class="headerlink" title="1、布尔型"></a>1、布尔型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//布尔类型</span></div><div class="line"><span class="keyword">let</span> flag:boolean = <span class="literal">true</span></div><div class="line"><span class="built_in">console</span>.log(flag);</div></pre></td></tr></table></figure><h3 id="2、数字类型"><a href="#2、数字类型" class="headerlink" title="2、数字类型"></a>2、数字类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数字类型</span></div><div class="line"><span class="keyword">let</span> a1: number = <span class="number">10</span> <span class="comment">// 十进制</span></div><div class="line"><span class="keyword">let</span> a2: number = <span class="number">0b1010</span>  <span class="comment">// 二进制</span></div><div class="line"><span class="keyword">let</span> a3: number = <span class="number">0o12</span> <span class="comment">// 八进制</span></div><div class="line"><span class="keyword">let</span> a4: number = <span class="number">0xa</span> <span class="comment">// 十六进制</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a1); <span class="comment">//10</span></div><div class="line"><span class="built_in">console</span>.log(a2); <span class="comment">//10</span></div><div class="line"><span class="built_in">console</span>.log(a3); <span class="comment">//10</span></div><div class="line"><span class="built_in">console</span>.log(a4); <span class="comment">//10</span></div></pre></td></tr></table></figure><h3 id="3、字符串类型"><a href="#3、字符串类型" class="headerlink" title="3、字符串类型"></a>3、字符串类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字符串类型</span></div><div class="line"><span class="keyword">let</span> str:string = <span class="string">'zs'</span></div><div class="line"><span class="built_in">console</span>.log(str); <span class="comment">//zs</span></div><div class="line"><span class="built_in">console</span>.log(str + a1); <span class="comment">// zs10</span></div></pre></td></tr></table></figure><h3 id="4、-undefined-和-null"><a href="#4、-undefined-和-null" class="headerlink" title="4、 undefined 和 null"></a>4、 undefined 和 null</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// undefined 和 null 都可以作为其他类型的子类型</span></div><div class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span></div><div class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span></div><div class="line"><span class="built_in">console</span>.log(u); <span class="comment">//undefined</span></div><div class="line"><span class="built_in">console</span>.log(n); <span class="comment">//null</span></div><div class="line"></div><div class="line"><span class="comment">//在严格模式下会报错</span></div><div class="line"><span class="comment">//在 tsconfig.json 下设置 "strict": false,   </span></div><div class="line"><span class="keyword">let</span> num:number = <span class="literal">undefined</span></div><div class="line"><span class="built_in">console</span>.log(num); <span class="comment">//undefined</span></div></pre></td></tr></table></figure><h3 id="5、数组"><a href="#5、数组" class="headerlink" title="5、数组"></a>5、数组</h3><h4 id="typeScript-像-JavaScript-一样可以操作数组元素。-有两种方式可以定义数组。-第一种，可以在元素类型后面接上-，表示由此类型元素组成的一个数组"><a href="#typeScript-像-JavaScript-一样可以操作数组元素。-有两种方式可以定义数组。-第一种，可以在元素类型后面接上-，表示由此类型元素组成的一个数组" class="headerlink" title="typeScript 像 JavaScript 一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上[]，表示由此类型元素组成的一个数组"></a>typeScript 像 JavaScript 一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在<code>元素类型后面接上[]</code>，表示由此类型元素组成的一个数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> list1: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">//数组定义后里面的数据类型就固定了</span></div><div class="line"><span class="comment">//泛型</span></div><div class="line"><span class="keyword">let</span> list2: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure><h3 id="6、元组-Tuple"><a href="#6、元组-Tuple" class="headerlink" title="6、元组(Tuple)"></a>6、元组(Tuple)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义数组时，类型和数组的个数一开始就确定了</span></div><div class="line"><span class="keyword">let</span> list3:[string, number, boolean] = [<span class="string">'zs'</span>, <span class="number">12</span>, <span class="literal">false</span>]</div><div class="line"><span class="built_in">console</span>.log(list3); <span class="comment">//['zs', 12, false]</span></div><div class="line"><span class="comment">// console.log(list3[1].startsWith(12)); 直接报错</span></div></pre></td></tr></table></figure><h3 id="7、枚举类型"><a href="#7、枚举类型" class="headerlink" title="7、枚举类型"></a>7、枚举类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//enum 类型是对 JavaScript 标准数据类型的一个补充</span></div><div class="line"><span class="comment">//枚举里面的每个数据都可以称为元素，有从0开始的编号</span></div><div class="line">enum Color &#123;</div><div class="line">        Red,</div><div class="line">        Green,</div><div class="line">        Blue</div><div class="line">      &#125;</div><div class="line"></div><div class="line"><span class="comment">// 枚举数值默认从0开始依次递增</span></div><div class="line"><span class="comment">// 根据特定的名称得到对应的枚举数值</span></div><div class="line"><span class="keyword">let</span> myColor: Color = Color.Green  <span class="comment">// 0</span></div><div class="line"><span class="built_in">console</span>.log(myColor, Color.Red, Color.Blue) <span class="comment">// 1 0 2</span></div><div class="line"></div><div class="line"><span class="comment">//可以手动改变值</span></div><div class="line"><span class="comment">//全部手动赋值</span></div><div class="line">enum Color1 &#123;</div><div class="line">        Red = <span class="number">10</span>,</div><div class="line">        Green = <span class="number">100</span>,</div><div class="line">        Blue = <span class="number">50</span></div><div class="line">      &#125;</div><div class="line"><span class="built_in">console</span>.log(Color1，Color1.Red, Color1.Green, Color1.Blue) </div><div class="line"><span class="comment">// &#123;10: "Red", 50: "Blue", 100: "Green", Red: 10, Green: 100, Blue: 50&#125; 10 100 50</span></div><div class="line"></div><div class="line"><span class="comment">//手动赋值第一二个</span></div><div class="line">enum Color1 &#123;</div><div class="line">        Red = <span class="number">100</span>,</div><div class="line">        Green = <span class="number">50</span>,</div><div class="line">        Blue</div><div class="line">      &#125;</div><div class="line"><span class="built_in">console</span>.log(Color1，Color1.Red, Color1.Green, Color1.Blue) </div><div class="line"><span class="comment">//&#123;50: "Green", 51: "Blue", 100: "Red", Red: 100, Green: 50, Blue: 51&#125; 100 50 51</span></div><div class="line"></div><div class="line"><span class="comment">//手动赋值第一二个</span></div><div class="line">enum Color1 &#123;</div><div class="line">        Red = <span class="number">51</span>,</div><div class="line">        Green = <span class="number">50</span>,</div><div class="line">        Blue</div><div class="line">      &#125;</div><div class="line"><span class="built_in">console</span>.log(Color1，Color1.Red, Color1.Green, Color1.Blue) </div><div class="line"><span class="comment">//&#123;50: "Green", 51: "Blue", Red: 51, Green: 50, Blue: 51&#125; 51 50 51</span></div><div class="line"><span class="built_in">console</span>.log(Color1[<span class="number">2</span>]); <span class="comment">//undefined</span></div><div class="line"><span class="built_in">console</span>.log(Color1[<span class="number">51</span>]); <span class="comment">//Blue</span></div></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、基础类型&quot;&gt;&lt;a href=&quot;#一、基础类型&quot; class=&quot;headerlink&quot; title=&quot;一、基础类型&quot;&gt;&lt;/a&gt;一、基础类型&lt;/h2&gt;&lt;h3 id=&quot;TypeScript-支持与-JavaScript-几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用&quot;&gt;&lt;a href=&quot;#TypeScript-支持与-JavaScript-几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用&quot; class=&quot;headerlink&quot; title=&quot;TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用&quot;&gt;&lt;/a&gt;TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//变量&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//一开始赋值什么类型就只能使用什么类型&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; xx:类型 = yy;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>ts</title>
    <link href="http://yoursite.com/2021/03/26/ts/"/>
    <id>http://yoursite.com/2021/03/26/ts/</id>
    <published>2021-03-26T06:20:54.000Z</published>
    <updated>2021-03-27T13:30:50.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初步认识"><a href="#初步认识" class="headerlink" title="初步认识"></a>初步认识</h1><h2 id="引用：https-24kcs-github-io-vue3-study-00-E8-AF-BE-E7-A8-8B-E4-BB-8B-E7-BB-8D-html"><a href="#引用：https-24kcs-github-io-vue3-study-00-E8-AF-BE-E7-A8-8B-E4-BB-8B-E7-BB-8D-html" class="headerlink" title="引用：https://24kcs.github.io/vue3_study/00_%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D.html"></a>引用：<a href="https://24kcs.github.io/vue3_study/00_%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D.html" target="_blank" rel="external">https://24kcs.github.io/vue3_study/00_%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D.html</a></h2><h2 id="一、初始"><a href="#一、初始" class="headerlink" title="一、初始"></a>一、初始</h2><h3 id="1-ts文件直接写js代码，在html代码中可以直接使用（我自己实验不行，必须进行编译）"><a href="#1-ts文件直接写js代码，在html代码中可以直接使用（我自己实验不行，必须进行编译）" class="headerlink" title="1.ts文件直接写js代码，在html代码中可以直接使用（我自己实验不行，必须进行编译）"></a>1.ts文件直接写js代码，在html代码中可以直接使用（我自己实验不行，必须进行编译）</h3><h3 id="2-ts函数形参使用类型修饰符，在编译后不会出现"><a href="#2-ts函数形参使用类型修饰符，在编译后不会出现" class="headerlink" title="2.ts函数形参使用类型修饰符，在编译后不会出现"></a>2.ts函数形参使用类型修饰符，在编译后不会出现</h3><h3 id="3-ts使用-let-进行修饰，编译后变成-var"><a href="#3-ts使用-let-进行修饰，编译后变成-var" class="headerlink" title="3.ts使用 let 进行修饰，编译后变成 var"></a>3.ts使用 let 进行修饰，编译后变成 var</h3><a id="more"></a><h2 id="二、自动编译"><a href="#二、自动编译" class="headerlink" title="二、自动编译"></a>二、自动编译</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>). 生成配置文件tsconfig.json</div><div class="line">    tsc --init</div><div class="line"><span class="number">2</span>). 修改tsconfig.json配置</div><div class="line">    <span class="string">"outDir"</span>: <span class="string">"./js"</span>, <span class="comment">//生成在js目录下</span></div><div class="line">    <span class="string">"strict"</span>: <span class="literal">false</span>,    </div><div class="line"><span class="number">3</span>). 启动监视任务: </div><div class="line">    终端 -&gt; 运行任务 -&gt; 监视tsconfig.json</div></pre></td></tr></table></figure><h2 id="三、类型注解"><a href="#三、类型注解" class="headerlink" title="三、类型注解"></a>三、类型注解</h2><h3 id="TypeScript-里的类型注解是一种轻量级的为函数或变量添加约束的方式，TypeScript提供了静态的代码分析，它可以分析代码结构和提供的类型注解。可以编译但是会警告你代码可能不会按预期执行。"><a href="#TypeScript-里的类型注解是一种轻量级的为函数或变量添加约束的方式，TypeScript提供了静态的代码分析，它可以分析代码结构和提供的类型注解。可以编译但是会警告你代码可能不会按预期执行。" class="headerlink" title="TypeScript 里的类型注解是一种轻量级的为函数或变量添加约束的方式，TypeScript提供了静态的代码分析，它可以分析代码结构和提供的类型注解。可以编译但是会警告你代码可能不会按预期执行。"></a>TypeScript 里的类型注解是一种轻量级的为函数或变量添加约束的方式，TypeScript提供了静态的代码分析，它可以分析代码结构和提供的类型注解。可以编译但是会警告你代码可能不会按预期执行。</h3><h3 id="四、webpack打包ts"><a href="#四、webpack打包ts" class="headerlink" title="四、webpack打包ts"></a>四、webpack打包ts</h3><h4 id="1、入口JS-src-main-ts"><a href="#1、入口JS-src-main-ts" class="headerlink" title="1、入口JS: src/main.ts"></a>1、入口JS: src/main.ts</h4><h4 id="2、index页面-public-index-html"><a href="#2、index页面-public-index-html" class="headerlink" title="2、index页面: public/index.html"></a>2、index页面: public/index.html</h4><h4 id="3、webpack配置文件build-webpack-config-js"><a href="#3、webpack配置文件build-webpack-config-js" class="headerlink" title="3、webpack配置文件build/webpack.config.js"></a>3、webpack配置文件build/webpack.config.js</h4><h4 id="4、下载依赖"><a href="#4、下载依赖" class="headerlink" title="4、下载依赖"></a>4、下载依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install -D typescript</div><div class="line">npm install -D webpack@4.41.5 webpack-cli@3.3.10 webpack-dev-server@3.10.2</div><div class="line">npm install -D html-webpack-plugin clean-webpack-plugin</div><div class="line">npm install -D ts-loader</div><div class="line">npm install -D cross-env</div></pre></td></tr></table></figure><h4 id="5、配置打包命令"><a href="#5、配置打包命令" class="headerlink" title="5、配置打包命令"></a>5、配置打包命令</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//"dev": "cross-env NODE_ENV=development webpack-dev-server --config build/webpack.config.js",</span></div><div class="line"><span class="comment">//"build": "cross-env NODE_ENV=production webpack --config build/webpack.config.js"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//package.json 下</span></div><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"dev"</span>: <span class="string">"cross-env NODE_ENV=development webpack-dev-server --config build/webpack.config.js"</span>,</div><div class="line">    <span class="string">"build"</span>: <span class="string">"cross-env NODE_ENV=production webpack --config build/webpack.config.js"</span>,</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div></pre></td></tr></table></figure><h4 id="6、运行与打包"><a href="#6、运行与打包" class="headerlink" title="6、运行与打包"></a>6、运行与打包</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm run dev</div><div class="line">npm run build</div></pre></td></tr></table></figure><h2 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Cannot read property <span class="string">'tap'</span> <span class="keyword">of</span> <span class="literal">undefined</span></div><div class="line">    at webpack (F:\vue-ts\<span class="number">01</span>_TypeScript\<span class="number">03</span>_webpack_ts\node_modules\webpack\lib\webpack.js:<span class="number">51</span>:<span class="number">13</span>)</div><div class="line">    at startDevServer (F:\vue-ts\<span class="number">01</span>_TypeScript\<span class="number">03</span>_webpack_ts\node_modules\webpack-dev-server\bin\webpack-dev-server.js:<span class="number">94</span>:<span class="number">16</span>)</div><div class="line">    at F:\vue-ts\<span class="number">01</span>_TypeScript\<span class="number">03</span>_webpack_ts\node_modules\webpack-dev-server\bin\webpack-dev-server.js:<span class="number">166</span>:<span class="number">3</span></div><div class="line">    at F:\vue-ts\<span class="number">01</span>_TypeScript\<span class="number">03</span>_webpack_ts\node_modules\webpack-dev-server\lib\utils\processOptions.js:<span class="number">33</span>:<span class="number">9</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//原因：webpack版本  html-webpack-plugin版本不匹配</span></div><div class="line"><span class="comment">//解决：先降级html-webpack-plugin 至4.0.0</span></div><div class="line">npm uninstall html-webpack-plugin -D</div><div class="line">npm install html-webpack-plugin@<span class="number">4.0</span><span class="number">.0</span> -D</div><div class="line"></div><div class="line"><span class="comment">//仍不解决，可能是webpack全局版本覆盖了局部版本</span></div><div class="line"><span class="comment">//重新安装webpack 和webpack-cli</span></div><div class="line">npm uninstall webpack webpack-cli -g</div><div class="line">npm install webpack@<span class="number">4.41</span><span class="number">.5</span> webpack-cli@<span class="number">3.3</span><span class="number">.10</span> -g</div><div class="line"><span class="comment">//在局部安装</span></div><div class="line">npm install webpack@<span class="number">4.41</span><span class="number">.5</span> webpack-cli@<span class="number">3.3</span><span class="number">.10</span> -D</div></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;初步认识&quot;&gt;&lt;a href=&quot;#初步认识&quot; class=&quot;headerlink&quot; title=&quot;初步认识&quot;&gt;&lt;/a&gt;初步认识&lt;/h1&gt;&lt;h2 id=&quot;引用：https-24kcs-github-io-vue3-study-00-E8-AF-BE-E7-A8-8B-E4-BB-8B-E7-BB-8D-html&quot;&gt;&lt;a href=&quot;#引用：https-24kcs-github-io-vue3-study-00-E8-AF-BE-E7-A8-8B-E4-BB-8B-E7-BB-8D-html&quot; class=&quot;headerlink&quot; title=&quot;引用：https://24kcs.github.io/vue3_study/00_%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D.html&quot;&gt;&lt;/a&gt;引用：&lt;a href=&quot;https://24kcs.github.io/vue3_study/00_%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D.html&quot;&gt;https://24kcs.github.io/vue3_study/00_%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D.html&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;一、初始&quot;&gt;&lt;a href=&quot;#一、初始&quot; class=&quot;headerlink&quot; title=&quot;一、初始&quot;&gt;&lt;/a&gt;一、初始&lt;/h2&gt;&lt;h3 id=&quot;1-ts文件直接写js代码，在html代码中可以直接使用（我自己实验不行，必须进行编译）&quot;&gt;&lt;a href=&quot;#1-ts文件直接写js代码，在html代码中可以直接使用（我自己实验不行，必须进行编译）&quot; class=&quot;headerlink&quot; title=&quot;1.ts文件直接写js代码，在html代码中可以直接使用（我自己实验不行，必须进行编译）&quot;&gt;&lt;/a&gt;1.ts文件直接写js代码，在html代码中可以直接使用（我自己实验不行，必须进行编译）&lt;/h3&gt;&lt;h3 id=&quot;2-ts函数形参使用类型修饰符，在编译后不会出现&quot;&gt;&lt;a href=&quot;#2-ts函数形参使用类型修饰符，在编译后不会出现&quot; class=&quot;headerlink&quot; title=&quot;2.ts函数形参使用类型修饰符，在编译后不会出现&quot;&gt;&lt;/a&gt;2.ts函数形参使用类型修饰符，在编译后不会出现&lt;/h3&gt;&lt;h3 id=&quot;3-ts使用-let-进行修饰，编译后变成-var&quot;&gt;&lt;a href=&quot;#3-ts使用-let-进行修饰，编译后变成-var&quot; class=&quot;headerlink&quot; title=&quot;3.ts使用 let 进行修饰，编译后变成 var&quot;&gt;&lt;/a&gt;3.ts使用 let 进行修饰，编译后变成 var&lt;/h3&gt;</summary>
    
    
    
    
    <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
</feed>
