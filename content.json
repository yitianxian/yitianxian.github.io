{"meta":{"title":"记录","subtitle":"千里之行，始于足下","description":null,"author":"Z-Q-K","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2021-03-28T08:47:05.000Z","updated":"2021-03-28T08:47:23.285Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-03-28T08:43:33.000Z","updated":"2021-03-28T08:46:27.089Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"ts使用","slug":"ts使用","date":"2021-03-26T08:33:51.000Z","updated":"2021-03-27T13:30:50.104Z","comments":true,"path":"2021/03/26/ts使用/","link":"","permalink":"http://yoursite.com/2021/03/26/ts使用/","excerpt":"一、基础类型TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用123//变量//一开始赋值什么类型就只能使用什么类型let xx:类型 = yy;","text":"一、基础类型TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用123//变量//一开始赋值什么类型就只能使用什么类型let xx:类型 = yy; 1、布尔型123//布尔类型let flag:boolean = trueconsole.log(flag); 2、数字类型12345678910//数字类型let a1: number = 10 // 十进制let a2: number = 0b1010 // 二进制let a3: number = 0o12 // 八进制let a4: number = 0xa // 十六进制console.log(a1); //10console.log(a2); //10console.log(a3); //10console.log(a4); //10 3、字符串类型1234//字符串类型let str:string = 'zs'console.log(str); //zsconsole.log(str + a1); // zs10 4、 undefined 和 null12345678910// undefined 和 null 都可以作为其他类型的子类型let u: undefined = undefinedlet n: null = nullconsole.log(u); //undefinedconsole.log(n); //null//在严格模式下会报错//在 tsconfig.json 下设置 \"strict\": false, let num:number = undefinedconsole.log(num); //undefined 5、数组typeScript 像 JavaScript 一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上[]，表示由此类型元素组成的一个数组123let list1: number[] = [1, 2, 3] //数组定义后里面的数据类型就固定了//泛型let list2: Array&lt;number&gt; = [1, 2, 3] 6、元组(Tuple)1234//定义数组时，类型和数组的个数一开始就确定了let list3:[string, number, boolean] = ['zs', 12, false]console.log(list3); //['zs', 12, false]// console.log(list3[1].startsWith(12)); 直接报错 7、枚举类型123456789101112131415161718192021222324252627282930313233343536373839404142//enum 类型是对 JavaScript 标准数据类型的一个补充//枚举里面的每个数据都可以称为元素，有从0开始的编号enum Color &#123; Red, Green, Blue &#125;// 枚举数值默认从0开始依次递增// 根据特定的名称得到对应的枚举数值let myColor: Color = Color.Green // 0console.log(myColor, Color.Red, Color.Blue) // 1 0 2//可以手动改变值//全部手动赋值enum Color1 &#123; Red = 10, Green = 100, Blue = 50 &#125;console.log(Color1，Color1.Red, Color1.Green, Color1.Blue) // &#123;10: \"Red\", 50: \"Blue\", 100: \"Green\", Red: 10, Green: 100, Blue: 50&#125; 10 100 50//手动赋值第一二个enum Color1 &#123; Red = 100, Green = 50, Blue &#125;console.log(Color1，Color1.Red, Color1.Green, Color1.Blue) //&#123;50: \"Green\", 51: \"Blue\", 100: \"Red\", Red: 100, Green: 50, Blue: 51&#125; 100 50 51//手动赋值第一二个enum Color1 &#123; Red = 51, Green = 50, Blue &#125;console.log(Color1，Color1.Red, Color1.Green, Color1.Blue) //&#123;50: \"Green\", 51: \"Blue\", Red: 51, Green: 50, Blue: 51&#125; 51 50 51console.log(Color1[2]); //undefinedconsole.log(Color1[51]); //Blue","categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","permalink":"http://yoursite.com/tags/TypeScript/"}]},{"title":"ts","slug":"ts","date":"2021-03-26T06:20:54.000Z","updated":"2021-03-27T13:30:50.104Z","comments":true,"path":"2021/03/26/ts/","link":"","permalink":"http://yoursite.com/2021/03/26/ts/","excerpt":"初步认识引用：https://24kcs.github.io/vue3_study/00_%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D.html一、初始1.ts文件直接写js代码，在html代码中可以直接使用（我自己实验不行，必须进行编译）2.ts函数形参使用类型修饰符，在编译后不会出现3.ts使用 let 进行修饰，编译后变成 var","text":"初步认识引用：https://24kcs.github.io/vue3_study/00_%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D.html一、初始1.ts文件直接写js代码，在html代码中可以直接使用（我自己实验不行，必须进行编译）2.ts函数形参使用类型修饰符，在编译后不会出现3.ts使用 let 进行修饰，编译后变成 var 二、自动编译12345671). 生成配置文件tsconfig.json tsc --init2). 修改tsconfig.json配置 \"outDir\": \"./js\", //生成在js目录下 \"strict\": false, 3). 启动监视任务: 终端 -&gt; 运行任务 -&gt; 监视tsconfig.json 三、类型注解TypeScript 里的类型注解是一种轻量级的为函数或变量添加约束的方式，TypeScript提供了静态的代码分析，它可以分析代码结构和提供的类型注解。可以编译但是会警告你代码可能不会按预期执行。四、webpack打包ts1、入口JS: src/main.ts2、index页面: public/index.html3、webpack配置文件build/webpack.config.js4、下载依赖12345npm install -D typescriptnpm install -D webpack@4.41.5 webpack-cli@3.3.10 webpack-dev-server@3.10.2npm install -D html-webpack-plugin clean-webpack-pluginnpm install -D ts-loadernpm install -D cross-env 5、配置打包命令12345678910//\"dev\": \"cross-env NODE_ENV=development webpack-dev-server --config build/webpack.config.js\",//\"build\": \"cross-env NODE_ENV=production webpack --config build/webpack.config.js\"//package.json 下\"scripts\": &#123; \"dev\": \"cross-env NODE_ENV=development webpack-dev-server --config build/webpack.config.js\", \"build\": \"cross-env NODE_ENV=production webpack --config build/webpack.config.js\", \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\" &#125;, 6、运行与打包12npm run devnpm run build 报错解决12345Cannot read property 'tap' of undefined at webpack (F:\\vue-ts\\01_TypeScript\\03_webpack_ts\\node_modules\\webpack\\lib\\webpack.js:51:13) at startDevServer (F:\\vue-ts\\01_TypeScript\\03_webpack_ts\\node_modules\\webpack-dev-server\\bin\\webpack-dev-server.js:94:16) at F:\\vue-ts\\01_TypeScript\\03_webpack_ts\\node_modules\\webpack-dev-server\\bin\\webpack-dev-server.js:166:3 at F:\\vue-ts\\01_TypeScript\\03_webpack_ts\\node_modules\\webpack-dev-server\\lib\\utils\\processOptions.js:33:9 1234567891011//原因：webpack版本 html-webpack-plugin版本不匹配//解决：先降级html-webpack-plugin 至4.0.0npm uninstall html-webpack-plugin -Dnpm install html-webpack-plugin@4.0.0 -D//仍不解决，可能是webpack全局版本覆盖了局部版本//重新安装webpack 和webpack-clinpm uninstall webpack webpack-cli -gnpm install webpack@4.41.5 webpack-cli@3.3.10 -g//在局部安装npm install webpack@4.41.5 webpack-cli@3.3.10 -D","categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","permalink":"http://yoursite.com/tags/TypeScript/"}]}],"categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","permalink":"http://yoursite.com/tags/TypeScript/"}]}